(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1450109,      29179]
NotebookOptionsPosition[   1121776,      23478]
NotebookOutlinePosition[   1434706,      28812]
CellTagsIndexPosition[   1434394,      28800]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Correcting Non-Syntax Expression", "TemplateTitle",
 CellChangeTimes->{{3.5496241220858183`*^9, 3.5496241316698093`*^9}, {
   3.549818710673188*^9, 3.5498187115316067`*^9}, {3.5498190276432457`*^9, 
   3.549819032858705*^9}, 3.7081110541807413`*^9, {3.70811349593964*^9, 
   3.708113497819581*^9}, {3.708119401487939*^9, 3.7081194060123873`*^9}, {
   3.708120399712119*^9, 3.708120401597063*^9}, {3.708161831143449*^9, 
   3.708161831404078*^9}, {3.7081941147197886`*^9, 
   3.7081941227004805`*^9}},ExpressionUUID->"34758043-d8d9-44dd-a789-\
675fe4223213"],

Cell[CellGroupData[{

Cell["Krotkikh Andrey", "TemplateTagItem",
 CellDingbat->Cell["Author:", "TemplateInlineHeader"],
 CellChangeTimes->{{3.708115736896647*^9, 3.7081157374773417`*^9}, 
   3.7081187364816923`*^9, {3.7081194070118856`*^9, 3.708119407148307*^9}, {
   3.7081203363690147`*^9, 3.7081203465815268`*^9}, {3.708170204859643*^9, 
   3.7081702376142263`*^9}, {3.7081941312344875`*^9, 3.7081941347800074`*^9}},
 
 CellTags->"Author",ExpressionUUID->"0f6ba866-c3d0-4311-9b18-4f6e1b8657c7"],

Cell["Roy Xavier", "TemplateTagItem",
 CellDingbat->Cell["Mentor:", "TemplateInlineHeader"],
 CellChangeTimes->{{3.708101463003703*^9, 3.7081014630038357`*^9}, {
   3.708115737558729*^9, 3.708115738253604*^9}, 3.708118737423379*^9, {
   3.7081194079239063`*^9, 3.708119408108163*^9}, {3.7081203544638157`*^9, 
   3.70812036273075*^9}, {3.708170208863906*^9, 3.708170240345989*^9}, {
   3.7081941535213027`*^9, 3.7081941639346433`*^9}},
 CellTags->"Mentor",ExpressionUUID->"0e67a180-ad7d-4310-9cf8-641a37487105"],

Cell["Perm National Research Polytechnical University", "TemplateTagItem",
 CellDingbat->Cell["Affiliation:", "TemplateInlineHeader"],
 CellChangeTimes->{{3.708115738405154*^9, 3.7081157391811867`*^9}, 
   3.7081187383432207`*^9, {3.708119409235963*^9, 3.708119409420137*^9}, {
   3.708120358202778*^9, 3.708120381242029*^9}, {3.708170211015827*^9, 
   3.708170248398614*^9}, {3.708194168459884*^9, 3.7081941837987413`*^9}},
 CellTags->
  "Affiliation",ExpressionUUID->"f040e7eb-bcb1-4d97-8beb-ea56f0aff682"]
}, Open  ]],

Cell["", "TemplateSubsectionDelimiter",ExpressionUUID->"db3c9b28-7203-4de6-8fdc-71adf79829c2"],

Cell[CellGroupData[{

Cell["Most representative image", "TemplateSection",
 CellChangeTimes->{{3.708094573540473*^9, 3.708094574450386*^9}, 
   3.7080949611448793`*^9, 
   3.7080958182774963`*^9},ExpressionUUID->"ba8fb57a-50ef-4f25-afde-\
a880a5da3c9b"],

Cell[TextData[{
 "\t",
 Cell[BoxData[""],
  CellChangeTimes->{3.708121102487195*^9},ExpressionUUID->
  "4904dffe-15cb-4d0f-9197-ca8963215869"],
 Cell[BoxData[
  GraphicsBox[RasterBox[CompressedData["
1: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
BXs81PuELvuI5PxngmqWbTLDt+2AdtPT05991ramrnFlpG7DlrbtO3Zt2rpj
VW1TTW3D5tZWkeeNtVP39Y8+mpvXXSyAwHGREY3YWUqoVI6QN0km8saDq/+l
F+zxUO+Du/QIkNvhiAgAXbEkd7cBeolY3tSyvqZ+/Vfd3/45eSX38U3/cG3j
xtr6ppXrfsVtKQDccpURf8qdJaVKxQgHIx9ye+RgCduwtzktQ7076uR2eGbx
5XLf0ISI7oeGz9MCGqi8dDq9cdMvGzb8Kv7d3wtCu/EYSFzY+pvf1qxt+L+T
/4/uYgEElLuM+PZVpU2El4+Qm9s9S66lF+zpUO+OumQYcjtcWX712li9ZX98
jCUXgUpaWlpqb2+P1Db9cfBvpqE9G91rGzdubm19/Pix7pIBvFNa7Cq6PdF8
mOzTzP847w7Id/HQdFq1vFjJn2Q3nB2m+HdKeb6d3C4/RiZFSzZX8EyzA2Zj
X5R1ydM9uR1lYzSL3tt3iiYzQMVMT0/XNzRHd3cpQrvx6DxwZPXaxqGhId0l
A3jHdewq7igiD+/y3F7UIeb908qV21V51tmzf2KR2+UHKXJwzGxk69xuPqRJ
dYrKpWWZ/i0gt6OcjG4V4jFzM6O7FqAqJBKJmtqGP/zpO8vcfuSv/6hZ29zZ
2am7ZADvuIxd5nlbFgAluV0xSCQaLVdutyzH/LnWud1+PJYfK6vcHlUcsoLt
SytX/uzkHwDI7SiXdGaOJjNAxfT29q6M1A0kLljmdvFo/mT7upZNyR9+LHik
rty5fX+2+MGyyFAraD3a2rpF/Dq39SjUXMUu2ZI8st83Dcp2Bik1t8uYFGSa
2i1FV8hze05szyvL9gSVD+THJHcwW6XnDJX7/A+/LfsagtyOMnryfIEmM0Bl
7NmzZ2VNg53QLh6tv47+d//9z8S/zVIe4oN539BE8eP46eniTwRnJm+YfiKg
rY12pf8ULFuPelVqiLlurai+OLvCfLJJzlayQdEsD0pSpGe5vaik7AadtarJ
W3RJNgfIbAdz4raz3K48WjaGUuyotF7lRBlyOzySbTIj/kuTGaB8YrHYz2vq
Y8Nn7eT2upbNO3fuXH712jRLX7x6rzh4i4dpSjc+m3v+MN3W0dEp08Ku331Y
vBd0p7dJ/LiNZgLis5WLg2bZenRdUwuTsiy5iF0WV6ZNQrrzy9vmkzw8zO15
FVjcNysfQdm8Xb1ikdVto6a1WjVjtBxL+UTpQVQFd3I7vCOywbHkJfG+IN7f
aTIDlMlfRr6vWdvQeeCIZWgfSFwQCb+3t7es9aQzc8VZeuZmxjR4x0dSxSm9
Z/BsOT4RiIBavC1RgGlhl689KN6LkC0yu/hyub17JHt89vWPHj89bXMfbbYe
FdF9fHy83DsSaO6WIFVmxOInFOdiF4Moiy15uo/jF+fObJc1b1fGbScTcyx3
z+7+u0zZiq9YyO3wmrFEI+uqA6WYf7EocuP1uw9zL4Ab94AfOznR2Lx+09Yd
lrk9ururbl1zcHPUo7l5068JTIP30dEp00v3uUnVq4dIvKbbMi3MV7cSHBo+
X7w7e/tOiaMnPmrJSqL1qIc05XbLzVYit8vn2Fu8Ki+xK1dKNb0HNH9qjie5
3fKH4uhpyteqW1QCXhDnfyNgXL72QHctgK8ZEe7M5A0R8AYSkyL7iUyoiIvG
x+FYLFZT2/C7rw8pQlRv/Pt/+mjtv3zxpQhduvfSd4yPRcWPc1O3ioP38dPT
pildxF3PPxGU+1YC47qK7CFO2vGR1MWr9wpGoPWoh8qY24uvrvsutzuaGv7h
RTZDe9FGTAUjt0sn5JPbUR6Z2WfGm5p4Z9FdC+A7iy+X98fHHCU6keqzd46I
KP7552/vB9zV0Wsan4z5xv/u33/0xb44yytUkv9vJbD55J7BsyLkG9PgaT3q
Ib/OkzG9Gu11bs/r7GI/yxZdby+piaaT3O7scCme57Jik+HJ7SibJ88XjGRy
dHSK5nJAAfvRvb17JHWl8OydTqe/+OLL1WsbN2xp+6r7W2MCQ//QWOeBI9t3
7Fq1Zt3WTz/9L0dPGN98Xb/7UMs+wlul30rQO3jGadoXf0v/dc8+R61H29ra
dB8q/7JqxK64wlrO+1LNr4N7m9uznx0iDu4Q/WljRfNkTJq3W4/iYp6M1X2p
lvvv6oL7+xepVmUit6MsRDIxplPSZAYoJv5RWF5ZFU+QXTBfWloaGhpqalm/
tr7po9XrfvbRWvHf2rqmhqb1nZ2dT58+fZOzvEJx8kcVMha5tnzs6x8dSEye
m7plzMty2nr04w2/0L2j/uUit3+4Sq1cIdRuH0j1MqNly+25NTnq7ZIdIK8J
5IqoehPyP3TYv115uKx3X37YLRe1NR+c3I7yo8kMIJN59HTXH6Q3Ttr5riqd
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

    "], {{0, 0}, {600., 520.8}}, {0, 255},
    ColorFunction->RGBColor],
   ImageSize->400,
   PlotRange->{{0, 600.}, {0, 520.8}}]],
  CellChangeTimes->{3.708174503398862*^9},ExpressionUUID->
  "480273e0-59bf-4be6-9ea7-ab6d49821efb"]
}], "TemplateFigure",
 CellChangeTimes->{
  3.7081210311237717`*^9, {3.708121077582275*^9, 3.708121117955016*^9}, {
   3.708121155309864*^9, 3.708121172245816*^9}, {3.7081702253239717`*^9, 
   3.708170225324073*^9}, {3.708170532166215*^9, 3.708170543044545*^9}, {
   3.7081722916052322`*^9, 3.708172293061327*^9}, {3.708172358599671*^9, 
   3.708172358599881*^9}, {3.7081724118360357`*^9, 3.708172411836227*^9}, {
   3.708174506167284*^9, 3.708174506167472*^9}, {3.708174602447486*^9, 
   3.708174604343184*^9}, {3.7082006730628138`*^9, 3.7082006730628138`*^9}, {
   3.708203137083329*^9, 3.708203137661461*^9}, {3.708203357257514*^9, 
   3.7082033576012497`*^9}, {3.7082035717910924`*^9, 
   3.7082035723379755`*^9}},ExpressionUUID->"5746344c-18f1-4d58-883f-\
2ef36e206de1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Abstract", "TemplateSection",
 CellChangeTimes->{{3.549542031484871*^9, 3.5495420379109707`*^9}, {
  3.707836190394134*^9, 3.707836195736104*^9}, {3.707836263029148*^9, 
  3.70783627523112*^9}, {3.7078363208251266`*^9, 
  3.707836322200321*^9}},ExpressionUUID->"7f28a721-268a-464e-9bc5-\
31f61fa28c7d"],

Cell[TextData[{
 Cell["GOAL OF THE PROJECT:", "TemplateInlineHeader",ExpressionUUID->
  "d504b0e1-16cb-4ec1-a0e0-07de58e06dcb"],
 " Find ways for correcting non-",
 StyleBox["SyntaxQ",
  FontSlant->"Italic"],
 " expressions to ",
 StyleBox["SyntaxQ",
  FontSlant->"Italic"],
 " expressions."
}], "TemplateText",
 CellChangeTimes->{{3.707836787772583*^9, 3.707836799763899*^9}, {
   3.708097797844706*^9, 3.708097798625815*^9}, {3.7080978567924232`*^9, 
   3.708097891719069*^9}, {3.708113473751357*^9, 3.708113477388164*^9}, {
   3.7081194144038467`*^9, 3.708119416484273*^9}, 3.708121293399247*^9, {
   3.7081216197834473`*^9, 3.7081216228073187`*^9}, {3.708174739280595*^9, 
   3.708174744687518*^9}, {3.708174775114697*^9, 3.708174780561842*^9}, {
   3.708174882072277*^9, 3.70817488346124*^9}, {3.7081963980316095`*^9, 
   3.7081964646387787`*^9}, 3.708196650704527*^9, {3.708197274434943*^9, 
   3.7081972836764865`*^9}, 3.708197373182269*^9, {3.7082008505178523`*^9, 
   3.7082008977995987`*^9}, {3.708201243975213*^9, 
   3.708201278616152*^9}},ExpressionUUID->"854ae70b-14eb-423f-a4a3-\
db7cbd22f54a"],

Cell[TextData[{
 Cell["SUMMARY OF WORK:", "TemplateInlineHeader",ExpressionUUID->
  "7aebbc1f-62ee-4cab-9afd-e94e9e80ebe2"],
 " We start with a Wolfram Language expression given as a string, which we \
evaluate using the symbol ",
 StyleBox["ToExpression",
  FontSlant->"Italic"],
 ". If ",
 StyleBox["$Failed",
  FontSlant->"Italic"],
 " is returned, it means that our string has not a correct syntax. To \
investigate possible ways of correcting an expression, we tried constructing \
a text analysing parser based on string patterns. We understood after \
benchmarking this method that it was a very inefficient approach. We \
therefore built instead a counting method (how many open and closed brackets, \
braces, etc., the string contains) and looked at a way of using errors issued \
by incorrect expressions when evaluated. We designed from this second \
approach an algorithm that convert non-",
 StyleBox["SyntaxQ",
  FontSlant->"Italic"],
 " expressions to ",
 StyleBox["SyntaxQ",
  FontSlant->"Italic"],
 " expressions by adding one missing character. For any non-",
 StyleBox["SyntaxQ",
  FontSlant->"Italic"],
 " expression, we were then able to generate (possibly several) ",
 StyleBox["SyntaxQ",
  FontSlant->"Italic"],
 " expressions. At the end of our work, we decided to construct a neural net \
in order to rank these corrections. We generated a dataset of pairs of non-",
 StyleBox["SyntaxQ",
  FontSlant->"Italic"],
 " and ",
 StyleBox["SyntaxQ",
  FontSlant->"Italic"],
 " expressions from examples taken from the reference pages of about 2000 \
built-in symbols. This neural net is only a prototype and was not trained due \
to lack of time. "
}], "TemplateText",
 CellChangeTimes->{{3.707836787772583*^9, 3.707836799763899*^9}, 
   3.708098577554308*^9, {3.708098758217001*^9, 3.7080987585846367`*^9}, {
   3.708113479979888*^9, 3.7081134819400682`*^9}, 3.708121297429246*^9, {
   3.7081216176274157`*^9, 3.708121628081092*^9}, {3.708196495597701*^9, 
   3.7081964958708754`*^9}, {3.7081966059848585`*^9, 3.708196725732654*^9}, {
   3.708196801875559*^9, 3.7081968287665997`*^9}, {3.708196878599887*^9, 
   3.708197008019581*^9}, {3.708197392405863*^9, 3.708197410602748*^9}, 
   3.708197515727933*^9, {3.708197605509866*^9, 3.7081976125338373`*^9}, {
   3.708197691816968*^9, 3.7081977321695395`*^9}, {3.7081977760936604`*^9, 
   3.7081978258999257`*^9}, {3.708198065633787*^9, 3.708198076189248*^9}, {
   3.7081982774122972`*^9, 3.7081982921780825`*^9}, {3.7081983560693316`*^9, 
   3.708198418288801*^9}, {3.708199462690576*^9, 3.7081995192067842`*^9}, {
   3.7082009450657735`*^9, 3.7082010544731894`*^9}, {3.708201313569669*^9, 
   3.70820131364783*^9}, {3.7082013469138145`*^9, 3.708201394070567*^9}, {
   3.708201488253189*^9, 3.7082016956773167`*^9}, {3.708201758084234*^9, 
   3.708201808662879*^9}, {3.7082018506320934`*^9, 3.7082025482176633`*^9}, {
   3.708202578733617*^9, 3.70820261787466*^9}, 3.7082027395634584`*^9, {
   3.7082027787513375`*^9, 3.7082027788295007`*^9}},
 TextJustification->1,ExpressionUUID->"31932f51-a8da-4910-b7dd-e57591b56e9a"],

Cell[TextData[{
 Cell["RESULTS AND FUTURE  WORK:", "TemplateInlineHeader",ExpressionUUID->
  "ca47547c-750a-44dd-968b-4c1d5f12facc"],
 " Our main result has been the design of an algorithm that corrects non-",
 StyleBox["SyntaxQ",
  FontSlant->"Italic"],
 " expressions to ",
 StyleBox["SyntaxQ",
  FontSlant->"Italic"],
 " expressions, and the prototype of neural net architecture to rank the \
corrected expressions. In future, we plan to construct a larger dataset to \
train our prototype. We will also improve the algorithm for supporting 2 or \
more missing characters."
}], "TemplateText",
 CellChangeTimes->{{3.707836787772583*^9, 3.707836799763899*^9}, 
   3.708098600920475*^9, {3.708098759248849*^9, 3.7080987595687933`*^9}, {
   3.708113483347765*^9, 3.708113485004046*^9}, {3.708121302269204*^9, 
   3.7081213191236563`*^9}, {3.7081214450744543`*^9, 3.708121455399667*^9}, {
   3.7081216257052717`*^9, 3.70812162672083*^9}, {3.708198192771831*^9, 
   3.708198223303404*^9}, {3.7081982685840816`*^9, 3.7081982750216494`*^9}, {
   3.7081987167763643`*^9, 3.7081987237764416`*^9}, {3.708199133124507*^9, 
   3.7081991695780725`*^9}, {3.7081992492976704`*^9, 3.708199319751549*^9}, {
   3.7081995412851243`*^9, 3.708199542832053*^9}, {3.708202626624756*^9, 
   3.708202718781989*^9}, {3.7082028136423764`*^9, 
   3.7082028221424627`*^9}},ExpressionUUID->"fc37c58e-b01c-44f1-8892-\
c017509d95ad"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "Everything above this bar is your poster. Make sure it fits on a single \
page. ",
 Cell[BoxData[
  ButtonBox["\<\"Preview Poster\"\>",
   Appearance->{
    "Default" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {242, 
        242, 242}, {242, 242, 242}, {242, 242, 242}, {255, 255, 255}}, {{0, 0,
         0}, {242, 242, 242}, {255, 255, 255}, {242, 242, 242}, {255, 255, 
        255}}, {{255, 255, 255}, {242, 242, 242}, {242, 242, 242}, {242, 242, 
        242}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True], "Hover" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {204, 
        204, 204}, {204, 204, 204}, {204, 204, 204}, {255, 255, 255}}, {{0, 0,
         0}, {204, 204, 204}, {249, 249, 249}, {204, 204, 204}, {255, 255, 
        255}}, {{255, 255, 255}, {204, 204, 204}, {204, 204, 204}, {204, 204, 
        204}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True], "Pressed" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {204, 
        204, 204}, {204, 204, 204}, {204, 204, 204}, {255, 255, 255}}, {{0, 0,
         0}, {204, 204, 204}, {229, 229, 229}, {204, 204, 204}, {255, 255, 
        255}}, {{255, 255, 255}, {204, 204, 204}, {204, 204, 204}, {204, 204, 
        204}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True]},
   ButtonFunction:>With[{$CellContext`nb$ = First[
        NotebookGet[
         ButtonNotebook[]]]}, 
     CreateDocument[
      Notebook[
       ((ReplaceAll[
        ReplaceAll[
         DeleteCases[#, 
          Cell[
           Blank[], "TagItem", 
           BlankNullSequence[], CellTags -> "Mentor", 
           BlankNullSequence[]], Infinity], {Pattern[$CellContext`c, 
            Cell[
             Blank[], "TagItem", 
             Pattern[$CellContext`o1, 
              BlankNullSequence[]], 
             Pattern[$CellContext`t, CellTags -> "Author"], 
             Pattern[$CellContext`o2, 
              BlankNullSequence[]]]] :> Cell[
            StringJoin[
             FE`makePlainText[$CellContext`c], "  (Mentor: ", 
             FirstCase[#, Pattern[$CellContext`c2, 
                Cell[
                 Blank[], "TagItem", 
                 BlankNullSequence[], CellTags -> "Mentor", 
                 BlankNullSequence[]]] :> FE`makePlainText[$CellContext`c2], 
              "WTFDIDYOUDO", Infinity], ")"], 
            "TagItem", $CellContext`o1, $CellContext`t, $CellContext`o2]}], {
        Pattern[$CellContext`c, 
           Cell[
            Blank[], "TagItem", 
            Pattern[$CellContext`o1, 
             BlankNullSequence[]], CellTags -> Pattern[$CellContext`a, 
              Alternatives["Author", "Affiliation"]], 
            Pattern[$CellContext`o2, 
             BlankNullSequence[]]]] :> Cell[
           TextData[{
             Cell[
              StringJoin[
               ToUpperCase[$CellContext`a], ": "], "TemplateInlineHeader"], 
             FE`makePlainText[$CellContext`c]}], "Text", CellDingbat -> 
           None]}]& )[
        ReplaceAll[
         DeleteCases[
          Flatten[
           NotebookTools`FlattenCellGroups[
            First[#]]], 
          Cell[
           Blank[], 
           Except[
            Alternatives[
            "TemplateText", "TemplateTagItem", "TemplateTitle", 
             "TemplateInlineHeader", "TemplateFigure", 
             "TemplateSubsectionDelimiter"]], 
           BlankNullSequence[]]], {Cell[
            Pattern[$CellContext`e, 
             Blank[]], 
            Pattern[$CellContext`t, 
             Blank[String]], 
            Pattern[$CellContext`o, 
             BlankNullSequence[]]] :> Cell[$CellContext`e, 
            
            StringTrim[$CellContext`t, 
             "Template"], $CellContext`o]}]]& )[$CellContext`nb$], 
       StyleDefinitions -> Notebook[{
          Cell[
           StyleData[StyleDefinitions -> "Default.nb"]], 
          Cell[
           StyleData[All, "Printout"], PageBreakWithin -> True], 
          Cell[
           StyleData["Title", "Printout"], CellMargins -> {{13, 13}, {5, 1}}], 
          Cell[
           StyleData[
           "TagItem", "Printout", StyleDefinitions -> StyleData["Item"]], 
           CellMargins -> {{13, 13}, {0, 0}}], 
          Cell[
           StyleData["Text", "Printout"], CellMargins -> {{13, 13}, {3, 3}}], 
          
          Cell[
           StyleData["SubsectionDelimiter", "Printout"], 
           CellBracketOptions -> {"Color" -> None}, 
           CellFrame -> {{0, 0}, {1, 0}}, CellMargins -> {{66, 0}, {1, 1}}, 
           CellFrameMargins -> 0, CellOpen -> False, CellFrameColor -> 
           GrayLevel[0.85], CellSize -> {1, 1}, Deployed -> True, 
           CellElementSpacings -> {"ClosedCellHeight" -> 1}], 
          Cell[
           StyleData[
           "Figure", "Printout", StyleDefinitions -> StyleData["Text"]], 
           PageBreakWithin -> True, CellMargins -> {{13, 13}, {15, 15}}], 
          Cell[
           StyleData[
           "TemplateInlineHeader", "Printout", StyleDefinitions -> 
            StyleData["Text"]], FontWeight -> Bold, FontColor -> 
           RGBColor[
            0.7143816281376364, 0.21776150148775464`, 0.03341725795376516], 
           DefaultFormatType -> TextForm]}], WindowSize -> {550, 650}, 
       ScreenStyleEnvironment -> "Printout", ShowPageBreaks -> True, 
       PrintingOptions -> {"PaperOrientation" -> "Portrait"}, 
       WindowFrameElements -> {"CloseBox"}]]],
   Evaluator->Automatic,
   FrameMargins->2,
   Method->"Preemptive"]],
  CellChangeTimes->{
   3.708119993435834*^9, 3.7081201142366533`*^9, 3.7081216973419447`*^9, 
    3.708121742789915*^9, {3.7081219099669857`*^9, 3.708121937835812*^9}, 
    3.70812202456996*^9, 3.708122071754575*^9, 3.7081221040066013`*^9, 
    3.7081225027030687`*^9, 3.7081719415880747`*^9, 3.708172085024791*^9, 
    3.708172369617941*^9, 3.708172435424633*^9, {3.708174107388838*^9, 
    3.7081741131119537`*^9}, 3.7081741468211117`*^9, 3.7081741876030283`*^9},
  ExpressionUUID->"13f2cbb0-0be1-498d-bcbe-44cb23d6edbe"]
}], "TemplateSectionDivider",
 CellChangeTimes->{3.708122505400732*^9, 3.708172026797749*^9, 
  3.708172089889476*^9, 3.708172374031658*^9, 3.708174120005659*^9, 
  3.708174191876646*^9},ExpressionUUID->"121daac6-ac48-4910-9f55-\
fd2749685279"],

Cell[CellGroupData[{

Cell[TextData[{
 "Additional ",
 StyleBox["concise",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontVariations->{"Underline"->True}],
 " content for ",
 StyleBox["2 minute",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontVariations->{"Underline"->True}],
 " presentation"
}], "TemplateSection",
 CellChangeTimes->{{3.7080959248670483`*^9, 3.708095946537079*^9}, {
   3.708096572395012*^9, 3.7080965874427767`*^9}, 
   3.7081072179304457`*^9},ExpressionUUID->"2d847a34-66d2-4516-b974-\
ff32b660a5bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"syntaxCorrector", "[", 
  RowBox[{"\"\<N[N[Nest[Nest[x^2,x,6,4,3]]]\>\"", ",", "True", ",", "20"}], 
  "]"}]], "Input",
 CellChangeTimes->{
  3.708193398263468*^9, {3.708193445177699*^9, 
   3.708193457256256*^9}},ExpressionUUID->"902eb6b8-c2e3-451e-a124-\
d1a3e4d1e93c"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"Closing bracket missing\"\>"},
     {
      InterpretationBox[Cell[TextData[{
        "N[N[Nest[Nest[x^2,x,6",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        ",4,3]]]"
       }],ExpressionUUID->"dd02c0d9-6015-4807-9512-fdde10911366"],
       TextCell[
        Row[{"N[N[Nest[Nest[x^2,x,6", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",4,3]]]"}]]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.7081895882718163`*^9, {3.7081933945328255`*^9, 3.70819339867776*^9}, {
   3.708193442081495*^9, 3.7081934576375217`*^9}, 
   3.708206009973646*^9},ExpressionUUID->"a4384251-3fae-47fb-a91a-\
6cd3c3b6af3f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"syntaxCorrector", "[", 
  RowBox[{"\"\<Fold[f[][],x[[][],{1,2,3}]\>\"", ",", "True", ",", "20"}], 
  "]"}]], "Input",
 CellChangeTimes->{
  3.7079365778071957`*^9, {3.7079550209475856`*^9, 3.70795502166634*^9}, {
   3.708009481966522*^9, 3.7080094866028333`*^9}, {3.708009532430132*^9, 
   3.708009604369933*^9}, {3.7082060421778355`*^9, 
   3.7082060444408193`*^9}},ExpressionUUID->"ce1137ad-8720-4e52-a680-\
3e10daf6a4dd"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"Closing bracket missing\"\>"},
     {
      InterpretationBox[Cell[TextData[{
        "Fold[f[][],x[",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        "[][],{1,2,3}]"
       }],ExpressionUUID->"d8ea11b9-3d5d-4964-9081-e9caaf3251df"],
       TextCell[
        Row[{"Fold[f[][],x[", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "[][],{1,2,3}]"}]]]},
     {
      InterpretationBox[Cell[TextData[{
        "Fold[f[][],x[[",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        "][],{1,2,3}]"
       }],ExpressionUUID->"9188140c-25e0-4a06-8d6a-455a5e68abb0"],
       TextCell[
        Row[{"Fold[f[][],x[[", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "][],{1,2,3}]"}]]]},
     {
      InterpretationBox[Cell[TextData[{
        "Fold[f[][],x[[]",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        "[],{1,2,3}]"
       }],ExpressionUUID->"e109a7d9-69ed-4f18-8700-467914767788"],
       TextCell[
        Row[{"Fold[f[][],x[[]", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "[],{1,2,3}]"}]]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.7077818901143637`*^9, 3.707783445370401*^9, 3.7077837549730062`*^9, 
   3.707817639857545*^9, 3.707817722793953*^9, 3.7078184299820533`*^9, 
   3.7078201145174694`*^9, 3.7078202334919367`*^9, 3.7078203338671846`*^9, 
   3.7078327488805714`*^9, 3.707910274591445*^9, 3.707936578557962*^9, 
   3.707938594008746*^9, 3.7079386790668163`*^9, 3.7079549171654806`*^9, {
   3.707955014760031*^9, 3.7079550221663427`*^9}, 3.70800580297155*^9, {
   3.708009500614668*^9, 3.7080095383973284`*^9}, {3.708009583449123*^9, 
   3.7080096270078726`*^9}, 3.708016618431074*^9, {3.7082060287354245`*^9, 
   3.7082060452889695`*^9}},ExpressionUUID->"7c09877e-ebde-4f62-94fa-\
bc6effd419f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"syntaxCorrector", "[", 
  RowBox[{"\"\<Fold[f[][,x[],{1,2,3}]\>\"", ",", "True", ",", "20"}], 
  "]"}]], "Input",
 CellChangeTimes->{
  3.7079365716303687`*^9, {3.7079550279788723`*^9, 3.707955028353894*^9}, {
   3.708009640390299*^9, 3.7080096446022844`*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"59a745aa-226e-4c4e-80c2-6e486220fb9c"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"Closing Bracket Missed\"\>"},
     {
      InterpretationBox[Cell[TextData[{
        "Fold[f[][",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        ",x[],{1,2,3}]"
       }],ExpressionUUID->"976a44bb-1a09-42a3-9a7b-9fd0a265716a"],
       TextCell[
        Row[{"Fold[f[][", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",x[],{1,2,3}]"}]]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.7077818983877516`*^9, {3.7077832818452196`*^9, 3.707783288405796*^9}, 
   3.707783758071258*^9, 3.7078176438103743`*^9, 3.7078177246289988`*^9, 
   3.707818431651724*^9, 3.707820116521874*^9, 3.70782023583261*^9, 
   3.7078203360517263`*^9, {3.707824853233267*^9, 3.707824857189643*^9}, 
   3.707834951156082*^9, 3.7079102780334187`*^9, 3.707936572587671*^9, 
   3.707938682587779*^9, 3.7079550289007554`*^9, {3.7080096300640125`*^9, 
   3.708009645073604*^9}, 
   3.708016618549659*^9},ExpressionUUID->"cb9159fc-7133-44b1-a75b-\
297053ff142d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"syntaxCorrector", "[", 
  RowBox[{
  "\"\<Function[x,Evaluate[Together[Nest[Function[z,(z+a/z)/2,x,4]]]]\>\"", 
   ",", "True", ",", "20"}], "]"}]], "Input",
 CellChangeTimes->{
  3.7079366073732214`*^9, {3.707955048588435*^9, 3.7079550488540635`*^9}, {
   3.7082060673373575`*^9, 3.708206071605412*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"d3094f7c-9bb6-491c-98b4-865a1a4ec35f"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"Closing bracket missing\"\>"},
     {
      InterpretationBox[Cell[TextData[{
        "Function[x,Evaluate[",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        "Together[Nest[Function[z,(z+a/z)/2,x,4]]]]"
       }],ExpressionUUID->"c9256d90-d628-4d67-bd4b-b7765a14574f"],
       TextCell[
        Row[{"Function[x,Evaluate[", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Together[Nest[Function[z,(z+a/z)/2,x,4]]]]"}]]]},
     {
      InterpretationBox[Cell[TextData[{
        "Function[x,Evaluate[Together",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        "[Nest[Function[z,(z+a/z)/2,x,4]]]]"
       }],ExpressionUUID->"1747ca5c-8314-4eec-9150-c58fb678cb65"],
       TextCell[
        Row[{"Function[x,Evaluate[Together", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Nest[Function[z,(z+a/z)/2,x,4]]]]"}]]]},
     {
      InterpretationBox[Cell[TextData[{
        "Function[x,Evaluate[Together[Nest[Function[z,(z+a/z)",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        "/2,x,4]]]]"
       }],ExpressionUUID->"0d54ed20-5dbc-41fb-a41c-15bab701a342"],
       TextCell[
        Row[{"Function[x,Evaluate[Together[Nest[Function[z,(z+a/z)", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "/2,x,4]]]]"}]]]},
     {
      InterpretationBox[Cell[TextData[{
        "Function[x,Evaluate[Together[Nest[Function[z,(z+a/z)/2",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        ",x,4]]]]"
       }],ExpressionUUID->"691387da-6a71-4fcd-9166-7d1ed7bbb2e6"],
       TextCell[
        Row[{"Function[x,Evaluate[Together[Nest[Function[z,(z+a/z)/2", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",x,4]]]]"}]]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.707782439730847*^9, 3.70778308259172*^9, 3.707783774634905*^9, {
   3.707816236199047*^9, 3.7078162515219374`*^9}, 3.7078176806627955`*^9, 
   3.7078177369346757`*^9, 3.707818474122487*^9, 3.7078189631786704`*^9, {
   3.7078203590319643`*^9, 3.707820369247636*^9}, {3.7078248804287615`*^9, 
   3.707824908175397*^9}, 3.707826092936386*^9, 3.7078261705141487`*^9, 
   3.7078350634078865`*^9, 3.7079104411834507`*^9, 3.7079366078999996`*^9, 
   3.7079387178691425`*^9, 3.7079550502759457`*^9, 3.7080099664655857`*^9, 
   3.7080166191190624`*^9, 
   3.708206072148877*^9},ExpressionUUID->"fd5463b1-7cc2-4dbd-a26e-\
7085c2591838"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"syntaxCorrector", "[", 
  RowBox[{"\"\<Nest[f,,4]\>\"", ",", "True", ",", "20"}], "]"}]], "Input",
 CellChangeTimes->{{3.707911801941455*^9, 3.7079118406648874`*^9}, {
  3.70793661625186*^9, 3.707936619174532*^9}, {3.707952871455854*^9, 
  3.7079528717683563`*^9}, {3.7082060885400057`*^9, 3.708206091150025*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"0422b34d-7340-42b4-887d-bfaa0a46c9ee"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"Letter or number Missed\"\>"},
     {
      InterpretationBox[Cell[TextData[{
        "Nest[f,",
        StyleBox["\[Placeholder]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        ",4]"
       }],ExpressionUUID->"0896c5c0-4417-48e1-99c0-4e984c2d10a4"],
       TextCell[
        Row[{"Nest[f,", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",4]"}]]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.707911822722885*^9, 3.707911842195349*^9}, 
   3.7079359976452007`*^9, 3.7079360531467366`*^9, 3.707936620127695*^9, 
   3.707938721099291*^9, 3.7079393669725056`*^9, 3.707952872805026*^9, 
   3.7079536220139914`*^9, 3.707954787742528*^9, 3.7079550557291174`*^9, 
   3.708009969619804*^9, 3.708010071684836*^9, 3.708016619237644*^9, 
   3.708206091721305*^9},ExpressionUUID->"3b2f44af-4245-405a-95de-\
d29047e16de5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"syntaxCorrector", "[", 
  RowBox[{"\"\<f[\>\"", ",", "False", ",", "20"}], "]"}]], "Input",
 CellChangeTimes->{{3.7080161260326385`*^9, 3.7080161382967167`*^9}, {
  3.70801619362358*^9, 3.7080161943407936`*^9}, {3.708016255654567*^9, 
  3.708016256403019*^9}, {3.708016373857154*^9, 
  3.7080163744603777`*^9}},ExpressionUUID->"01b99db3-1123-491b-8f03-\
2c3e6dfd26d6"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"Closing bracket missing\"\>"},
     {
      InterpretationBox[Cell[TextData[{
        "f[",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]]
       }],ExpressionUUID->"3be3a448-74e4-4613-a1e8-bfe196b66524"],
       TextCell[
        Row[{"f[", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.70801613199446*^9, 3.7080161387322025`*^9}, 
   3.7080161945728445`*^9, 3.708016256776025*^9, {3.708016361817918*^9, 
   3.7080163748394113`*^9}, {3.708016490045293*^9, 3.708016513562394*^9}, 
   3.7080170765087433`*^9, 
   3.7082066027551217`*^9},ExpressionUUID->"1fa28671-4dd6-4d8c-adee-\
b758b5a6d5f2"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "Everything above this bar is in your 2 minute presentation. ",
 Cell[BoxData[
  ButtonBox["\<\"Preview Presentation\"\>",
   Appearance->{
    "Default" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {242, 
        242, 242}, {242, 242, 242}, {242, 242, 242}, {255, 255, 255}}, {{0, 0,
         0}, {242, 242, 242}, {255, 255, 255}, {242, 242, 242}, {255, 255, 
        255}}, {{255, 255, 255}, {242, 242, 242}, {242, 242, 242}, {242, 242, 
        242}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True], "Hover" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {204, 
        204, 204}, {204, 204, 204}, {204, 204, 204}, {255, 255, 255}}, {{0, 0,
         0}, {204, 204, 204}, {249, 249, 249}, {204, 204, 204}, {255, 255, 
        255}}, {{255, 255, 255}, {204, 204, 204}, {204, 204, 204}, {204, 204, 
        204}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True], "Pressed" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {204, 
        204, 204}, {204, 204, 204}, {204, 204, 204}, {255, 255, 255}}, {{0, 0,
         0}, {204, 204, 204}, {229, 229, 229}, {204, 204, 204}, {255, 255, 
        255}}, {{255, 255, 255}, {204, 204, 204}, {204, 204, 204}, {204, 204, 
        204}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True]},
   ButtonFunction:>With[{$CellContext`nb$ = First[
        NotebookGet[
         ButtonNotebook[]]], $CellContext`$banner$ = Lookup[
        Options[
         ButtonNotebook[], DockedCells], DockedCells]}, 
     CreateDocument[
      Notebook[
       (ReplaceAll[
        Flatten[{
          (ReplaceAll[
           ReplaceAll[
            DeleteCases[#, 
             Cell[
              Blank[], "TagItem", 
              BlankNullSequence[], CellTags -> "Mentor", 
              BlankNullSequence[]], Infinity], {Pattern[$CellContext`c, 
               Cell[
                Blank[], "TagItem", 
                Pattern[$CellContext`o1, 
                 BlankNullSequence[]], 
                Pattern[$CellContext`t, CellTags -> "Author"], 
                Pattern[$CellContext`o2, 
                 BlankNullSequence[]]]] :> Cell[
               StringJoin[
                FE`makePlainText[$CellContext`c], "  (Mentor: ", 
                FirstCase[#, Pattern[$CellContext`c2, 
                   Cell[
                    Blank[], "TagItem", 
                    BlankNullSequence[], CellTags -> "Mentor", 
                    BlankNullSequence[]]] :> 
                 FE`makePlainText[$CellContext`c2], "WTFDIDYOUDO", Infinity], 
                ")"], "TagItem", $CellContext`o1, $CellContext`t, \
$CellContext`o2]}], {Pattern[$CellContext`c, 
              Cell[
               Blank[], "TagItem", 
               Pattern[$CellContext`o1, 
                BlankNullSequence[]], CellTags -> Pattern[$CellContext`a, 
                 Alternatives["Author", "Affiliation"]], 
               Pattern[$CellContext`o2, 
                BlankNullSequence[]]]] :> Cell[
              TextData[{
                Cell[
                 StringJoin[
                  ToUpperCase[$CellContext`a], ": "], "TemplateInlineHeader"], 
                FE`makePlainText[$CellContext`c]}], "Text", CellDingbat -> 
              None]}]& )[
           ReplaceAll[
            DeleteCases[
             Flatten[
              NotebookTools`FlattenCellGroups[
               First[#]]], 
             Cell[
              Blank[], 
              Except[
               Alternatives[
               "TemplateText", "TemplateTagItem", "TemplateTitle", 
                "TemplateInlineHeader", "TemplateFigure", 
                "TemplateSubsectionDelimiter"]], 
              BlankNullSequence[]]], {Cell[
               Pattern[$CellContext`e, 
                Blank[]], 
               Pattern[$CellContext`t, 
                Blank[String]], 
               Pattern[$CellContext`o, 
                BlankNullSequence[]]] :> Cell[$CellContext`e, 
               StringTrim[$CellContext`t, "Template"], $CellContext`o]}]], 
          Cell["", "SubsectionDelimiter"], 
          DeleteCases[
           Part[#, {3}], 
           Cell[
            Blank[], "TemplateSection", 
            BlankNullSequence[]], Infinity]}], {Cell[
           Pattern[$CellContext`e, 
            Blank[]], 
           Pattern[$CellContext`t, 
            Blank[String]], 
           Pattern[$CellContext`o, 
            BlankNullSequence[]]] :> Cell[$CellContext`e, 
           
           StringTrim[$CellContext`t, 
            "Template"], $CellContext`o]}]& )[$CellContext`nb$], 
       StyleDefinitions -> Notebook[{
          Cell[
           StyleData[StyleDefinitions -> "Default.nb"]], 
          Cell[
           StyleData[
           "TagItem", "SlideShow", StyleDefinitions -> StyleData["Item"]]], 
          Cell[
           StyleData["SubsectionDelimiter", "SlideShow"], 
           CellBracketOptions -> {"Color" -> None}, 
           CellFrame -> {{0, 0}, {1, 0}}, CellMargins -> {{66, 0}, {1, 1}}, 
           CellFrameMargins -> 0, CellOpen -> False, CellFrameColor -> 
           GrayLevel[0.85], CellSize -> {1, 1}, Deployed -> True, 
           CellElementSpacings -> {"ClosedCellHeight" -> 1}], 
          Cell[
           StyleData[
           "Figure", "SlideShow", StyleDefinitions -> 
            StyleData["Text", "SlideShow"]]], 
          Cell[
           StyleData[
           "TemplateInlineHeader", "SlideShow", StyleDefinitions -> 
            StyleData["Text"]], FontWeight -> Bold, FontColor -> 
           RGBColor[
            0.7143816281376364, 0.21776150148775464`, 0.03341725795376516], 
           DefaultFormatType -> TextForm], 
          Cell[
           StyleData["InlineCell", StyleDefinitions -> StyleData["Text"]]]}], 
       DockedCells -> {Inherited, $CellContext`$banner$}, WindowSize -> 
       Automatic, ScreenStyleEnvironment -> "SlideShow"]]],
   Evaluator->Automatic,
   FrameMargins->2,
   Method->"Preemptive"]],
  CellChangeTimes->{
   3.708105840738933*^9, 3.708107109231278*^9, 3.708107195171091*^9, 
    3.70811042103835*^9, 3.708110496645129*^9, 3.708110585053576*^9, 
    3.70811559896529*^9, 3.708115659320217*^9, 3.708122983563134*^9, {
    3.708123189175438*^9, 3.708123209596447*^9}, 3.7081232893789167`*^9, 
    3.708123413578196*^9, 3.708161600262829*^9, 3.708161685988966*^9, 
    3.708161762243882*^9, 3.708171906418335*^9, 3.7081719711041327`*^9, 
    3.7081720239229593`*^9, 3.7081720696464252`*^9, 3.7081724419361277`*^9, {
    3.7081741291657352`*^9, 3.708174167794054*^9}},ExpressionUUID->
  "abc185a0-c495-4b55-bc66-2aaafed77ca3"]
}], "TemplateSectionDivider",
 CellChangeTimes->{{3.708107255281083*^9, 3.708107257077818*^9}, 
   3.708110466846199*^9, 3.708110623881486*^9, 3.7081156336798077`*^9, 
   3.708115681024527*^9, {3.708122420477776*^9, 3.7081224209570103`*^9}, {
   3.708122986735901*^9, 3.708122997671101*^9}, {3.708123192575124*^9, 
   3.7081232134387836`*^9}, 3.7081232918785152`*^9, {3.708123378671113*^9, 
   3.708123392747447*^9}, 3.7081234259775877`*^9, 3.708161609827849*^9, 
   3.7081616890687*^9, 3.708161765363204*^9, 3.708172073251072*^9, 
   3.708172448694848*^9, 
   3.708174173279682*^9},ExpressionUUID->"003f9a05-6bef-4291-b1a6-\
f10f8847b0c0"],

Cell[CellGroupData[{

Cell["Detailed Records of the Project", "TemplateSection",
 CellChangeTimes->{{3.708096243268845*^9, 
  3.7080962536504707`*^9}},ExpressionUUID->"ba97f0a3-c165-451d-bf4c-\
74c0b4a4f36e"],

Cell[CellGroupData[{

Cell["Main Results in Detail", "TemplateSubsection",
 CellChangeTimes->{{3.549542055118816*^9, 3.5495420583168*^9}, {
  3.708095979852994*^9, 3.708095983809194*^9}, {3.70809609386517*^9, 
  3.708096094077529*^9}},ExpressionUUID->"ec486cf1-bdf1-4bf6-9bd6-\
0a3e2548a100"],

Cell["\<\
1) We has done the algorithm for correcting the string of Wolfram Language \
code. This algorithm is shown below.
2) We investigated first way to correct it: using of string patterns.
3) We tried to optimize for all possible cases.
4) Decided that it is very inefficient way.
5) Investigated second way: analysing of error issues during evaluations.
6) Built the algorithm based on second approach.
7) Suggested the structure of neural net and possible datasets for training \
it.\
\>", "Text",
 CellChangeTimes->{{3.7082075707690988`*^9, 3.7082075728235893`*^9}, {
  3.7082076713763847`*^9, 3.7082078059106455`*^9}, {3.708207837342866*^9, 
  3.708207937334663*^9}, {3.7082079810386515`*^9, 3.7082080133815026`*^9}, {
  3.7082080718109293`*^9, 3.7082081134884386`*^9}, {3.708208160007328*^9, 
  3.708208194733918*^9}},ExpressionUUID->"49053ed9-9085-4749-b029-\
205fb0f8bc66"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code", "TemplateSubsection",
 CellChangeTimes->{{3.549542047850762*^9, 3.549542050840076*^9}, 
   3.549542327097245*^9},ExpressionUUID->"c54bc669-1d00-4e87-877b-\
cfd746ce37fa"],

Cell["Provide one of:", "TemplateComment",
 CellChangeTimes->{{3.70811356171093*^9, 
  3.7081135645971746`*^9}},ExpressionUUID->"a672a6f1-f8fa-4628-83e3-\
5438bd707f89"],

Cell[BoxData[
 TagBox[
  ButtonBox[
   PaneSelectorBox[{False->"\<\"GitHub\"\>", True->
    StyleBox["\<\"GitHub\"\>", "HyperlinkActive"]}, Dynamic[
     CurrentValue["MouseOver"]],
    BaseStyle->{"Hyperlink"},
    FrameMargins->0,
    ImageSize->Automatic],
   BaseStyle->"Hyperlink",
   ButtonData->{
     URL["https://github.com/AndreyKrotkikh/WSS2017/blob/\
43c6ef015f01c845e9ccb8795c9df2b487196287/ForPosterSession.nb"], None},
   ButtonNote->
    "https://github.com/AndreyKrotkikh/WSS2017/blob/\
43c6ef015f01c845e9ccb8795c9df2b487196287/ForPosterSession.nb"],
  Annotation[#, 
   "https://github.com/AndreyKrotkikh/WSS2017/blob/\
43c6ef015f01c845e9ccb8795c9df2b487196287/ForPosterSession.nb", 
   "Hyperlink"]& ]], "Output",
 CellChangeTimes->{
  3.7082070549426146`*^9},ExpressionUUID->"c1c98ce8-f92b-484a-ad49-\
99c4678ba1c6"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Collapsed code", "Text"]], "Subsubsubsubsection",
 CellChangeTimes->{{3.7082071859714327`*^9, 3.7082072410073624`*^9}, 
   3.708207296104374*^9},ExpressionUUID->"f0fba913-1b74-40ef-a0da-\
fe3894d32e2d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$SystemSymbols", "=", 
   RowBox[{"Names", "[", "\"\<System`*\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{"Clear", "[", "syntaxCorrector", "]"}], "\n", 
 RowBox[{
  RowBox[{"syntaxCorrector", "[", 
   RowBox[{"str_String", ",", "nulltest_", ",", "size_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"inp", "=", "str"}], ",", "\[IndentingNewLine]", "counts", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"result", "=", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", "openbrack", ",", 
      "\[IndentingNewLine]", "closebrack", ",", "\[IndentingNewLine]", 
      "openbrace", ",", "\[IndentingNewLine]", "closebrace", ",", 
      "\[IndentingNewLine]", "openparen", ",", "\[IndentingNewLine]", 
      "closeparen"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"counts", "=", 
      RowBox[{"CharacterCounts", "[", "str", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"openbrack", "=", 
      RowBox[{"Lookup", "[", 
       RowBox[{"counts", ",", "\"\<[\>\"", ",", "0"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"closebrack", "=", 
      RowBox[{"Lookup", "[", 
       RowBox[{"counts", ",", "\"\<]\>\"", ",", "0"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"openbrace", "=", 
      RowBox[{"Lookup", "[", 
       RowBox[{"counts", ",", "\"\<{\>\"", ",", "0"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"closebrace", "=", 
      RowBox[{"Lookup", "[", 
       RowBox[{"counts", ",", "\"\<}\>\"", ",", "0"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"openparen", "=", 
      RowBox[{"Lookup", "[", 
       RowBox[{"counts", ",", "\"\<(\>\"", ",", "0"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"closeparen", "=", 
      RowBox[{"Lookup", "[", 
       RowBox[{"counts", ",", "\"\<)\>\"", ",", "0"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"messageAnalysis", "[", "str", "]"}], "&&", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"StringCount", "[", 
            RowBox[{
             RowBox[{"StringDelete", "[", 
              RowBox[{
               RowBox[{"ToString", "[", 
                RowBox[{
                 RowBox[{"ToExpression", "[", "str", "]"}], ",", 
                 "InputForm"}], "]"}], ",", "WhitespaceCharacter"}], "]"}], 
             ",", "\"\<Null\>\""}], "]"}], "\[Equal]", "0"}], "||", 
          RowBox[{"Not", "[", "nulltest", "]"}]}], ")"}]}], ",", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"result", ",", "\"\<All correct!\>\""}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Which", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{"openbrack", "==", "closebrack"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"openbrack", ">", "closebrack"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"openbrack", "-", "closebrack"}], ">", "1"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"result", ",", "\"\<Closing brackets missing\>\""}], 
                 "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"result", ",", "\"\<Closing bracket missing\>\""}], 
                 "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"evaluation", "[", 
               RowBox[{
               "str", ",", "nulltest", ",", "size", ",", "result", ",", 
                "\"\<]\>\""}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"result", ",", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"{", 
                  RowBox[{"evaluation", "[", 
                   RowBox[{
                   "str", ",", "nulltest", ",", "size", ",", "\"\<]\>\""}], 
                   "]"}], "}"}], "]"}]}], "]"}], ";"}], "\[IndentingNewLine]",
              ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"-", "openbrack"}], "+", "closebrack"}], ">", "1"}],
                 ",", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"result", ",", "\"\<Opening brackets missing\>\""}], 
                 "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"result", ",", "\"\<Opening bracket missing\>\""}], 
                 "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"result", ",", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"{", 
                  RowBox[{"evaluation", "[", 
                   RowBox[{
                   "str", ",", "nulltest", ",", "size", ",", "\"\<[\>\""}], 
                   "]"}], "}"}], "]"}]}], "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Not", "[", 
           RowBox[{
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", 
              RowBox[{"{", "\"\<{\>\"", "}"}]}], "]"}], "==", 
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", 
              RowBox[{"{", "\"\<}\>\"", "}"}]}], "]"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"openbrace", ">", "closebrace"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"openbrace", "-", "closebrace"}], ">", "1"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"result", ",", "\"\<Closing braces missing\>\""}], 
                 "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"result", ",", "\"\<Closing brace missing\>\""}], 
                 "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"result", ",", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"{", 
                  RowBox[{"evaluation", "[", 
                   RowBox[{
                   "str", ",", "nulltest", ",", "size", ",", "\"\<}\>\""}], 
                   "]"}], "}"}], "]"}]}], "]"}], ";"}], "\[IndentingNewLine]",
              ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"-", "openbrace"}], "+", "closebrace"}], ">", "1"}],
                 ",", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"result", ",", "\"\<Opening braces missing\>\""}], 
                 "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"result", ",", "\"\<Opening brace missing\>\""}], 
                 "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"result", ",", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"{", 
                  RowBox[{"evaluation", "[", 
                   RowBox[{
                   "str", ",", "nulltest", ",", "size", ",", "\"\<{\>\""}], 
                   "]"}], "}"}], "]"}]}], "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Not", "[", 
           RowBox[{
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", 
              RowBox[{"{", "\"\<(\>\"", "}"}]}], "]"}], "==", 
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", 
              RowBox[{"{", "\"\<)\>\"", "}"}]}], "]"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"openparen", ">", "closeparen"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"openparen", "-", "closeparen"}], ">", "1"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{
                 "result", ",", "\"\<Closing parentheses missing\>\""}], 
                 "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"result", ",", "\"\<Closing parenthes missing\>\""}],
                  "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"result", ",", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"{", 
                  RowBox[{"evaluation", "[", 
                   RowBox[{
                   "str", ",", "nulltest", ",", "size", ",", "\"\<)\>\""}], 
                   "]"}], "}"}], "]"}]}], "]"}], ";"}], "\[IndentingNewLine]",
              ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"-", "openparen"}], "+", "closeparen"}], ">", "1"}],
                 ",", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{
                 "result", ",", "\"\<Opening parentheses missing\>\""}], 
                 "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"result", ",", "\"\<Opening parenthes missing\>\""}],
                  "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"result", ",", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"{", 
                  RowBox[{"evaluation", "[", 
                   RowBox[{
                   "str", ",", "nulltest", ",", "size", ",", "\"\<(\>\""}], 
                   "]"}], "}"}], "]"}]}], "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Not", "[", 
           RowBox[{"EvenQ", "[", 
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", "\"\<\\\"\>\""}], "]"}], "]"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"result", ",", "\"\<Quotes missed\>\""}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"result", ",", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{"evaluation", "[", 
                RowBox[{
                "str", ",", "nulltest", ",", "size", ",", "\"\<\\\"\>\""}], 
                "]"}], "}"}], "]"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", 
              RowBox[{"{", "\"\<[\>\"", "}"}]}], "]"}], "==", 
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", 
              RowBox[{"{", "\"\<]\>\"", "}"}]}], "]"}]}], "&&", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", 
              RowBox[{"{", "\"\<{\>\"", "}"}]}], "]"}], "==", 
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", 
              RowBox[{"{", "\"\<}\>\"", "}"}]}], "]"}]}], "&&", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", 
              RowBox[{"{", "\"\<(\>\"", "}"}]}], "]"}], "==", 
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", 
              RowBox[{"{", "\"\<)\>\"", "}"}]}], "]"}]}], "&&", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", 
              RowBox[{"{", "\"\<(\>\"", "}"}]}], "]"}], "==", 
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", 
              RowBox[{"{", "\"\<)\>\"", "}"}]}], "]"}]}], "&&", 
           "\[IndentingNewLine]", 
           RowBox[{"EvenQ", "[", 
            RowBox[{"StringCount", "[", 
             RowBox[{"str", ",", "\"\<\\\"\>\""}], "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"result", ",", "\"\<Letter or number Missed\>\""}], "]"}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"result", ",", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{"evaluation", "[", 
                RowBox[{
                "str", ",", "nulltest", ",", "size", ",", 
                 "\"\<\[Placeholder]\>\""}], "]"}], "}"}], "]"}]}], "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"TableForm", "[", 
      RowBox[{"Flatten", "[", "result", "]"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"messageAnalysis", "[", "str_", "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mess", ",", "result"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"$MessageList", "=", 
          RowBox[{"{", "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Quiet", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ToExpression", "[", "str", "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"mess", "=", "$MessageList"}], ";"}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"mess", "=!=", 
            RowBox[{"{", "}"}]}], ",", 
           RowBox[{"result", "=", "False"}], ",", 
           RowBox[{"result", "=", "True"}]}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"result", " ", "=", " ", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"mess", " ", "=!=", " ", 
             RowBox[{"{", "}"}]}], ",", " ", "False", ",", " ", "True"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"result", " ", "=", " ", 
          RowBox[{"(", 
           RowBox[{"mess", " ", "===", " ", 
            RowBox[{"{", "}"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
        "*)"}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "result"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"testAnalyser", "[", 
   RowBox[{"str_String", ",", "initStr_", ",", "nulltest_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"messageAnalysis", "[", "str", "]"}], "&&", 
   RowBox[{
    RowBox[{"EditDistance", "[", 
     RowBox[{
      RowBox[{"StringDelete", "[", 
       RowBox[{
        RowBox[{"ToString", "[", 
         RowBox[{
          RowBox[{"ToExpression", "[", "str", "]"}], ",", "InputForm"}], 
         "]"}], ",", "WhitespaceCharacter"}], "]"}], ",", "initStr"}], "]"}], 
    ">=", "1"}], "&&", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"StringCount", "[", 
       RowBox[{
        RowBox[{"StringDelete", "[", 
         RowBox[{
          RowBox[{"ToString", "[", 
           RowBox[{
            RowBox[{"ToExpression", "[", "str", "]"}], ",", "InputForm"}], 
           "]"}], ",", "WhitespaceCharacter"}], "]"}], ",", "\"\<Null\>\""}], 
       "]"}], "\[Equal]", "0"}], "||", 
     RowBox[{"Not", "[", "nulltest", "]"}]}], ")"}]}]}], "\n", 
 RowBox[{"Clear", "[", "stylingResult", "]"}], "\n", 
 RowBox[{
  RowBox[{"stylingResult", "[", 
   RowBox[{"list_", ",", "symbol_String", ",", "size_Integer"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"l", "=", "list"}], ",", 
      RowBox[{"s", "=", "symbol"}], ",", 
      RowBox[{"ss", "=", "size"}], ",", "result", ",", "i"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"result", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "l", "]"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", "\[IndentingNewLine]", 
        RowBox[{"result", ",", "\[IndentingNewLine]", 
         RowBox[{"TextCell", "[", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"StringTake", "[", 
              RowBox[{
               RowBox[{"l", "\[LeftDoubleBracket]", 
                RowBox[{"i", ",", "2"}], "\[RightDoubleBracket]"}], ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", 
                 RowBox[{
                  RowBox[{"l", "\[LeftDoubleBracket]", 
                   RowBox[{"i", ",", "1"}], "\[RightDoubleBracket]"}], "-", 
                  "1"}]}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Style", "[", 
              RowBox[{"s", ",", "Red", ",", 
               RowBox[{"FontSize", "\[Rule]", "ss"}], ",", "Bold"}], "]"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"StringTake", "[", 
              RowBox[{
               RowBox[{"l", "\[LeftDoubleBracket]", 
                RowBox[{"i", ",", "2"}], "\[RightDoubleBracket]"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"l", "\[LeftDoubleBracket]", 
                   RowBox[{"i", ",", "1"}], "\[RightDoubleBracket]"}], "+", 
                  "1"}], ",", 
                 RowBox[{"StringLength", "[", 
                  RowBox[{"l", "\[LeftDoubleBracket]", 
                   RowBox[{"i", ",", "2"}], "\[RightDoubleBracket]"}], 
                  "]"}]}], "}"}]}], "]"}]}], "\[IndentingNewLine]", "}"}], 
           "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "result"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\n", 
 RowBox[{
  RowBox[{"correctSplitting", "[", "str_String", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"s", "=", "str"}], ",", "s1", ",", "s2", ",", 
      RowBox[{"result", "=", 
       RowBox[{"{", "}"}]}], ",", "i"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"s1", "=", 
      RowBox[{"StringSplit", "[", 
       RowBox[{"str", ",", 
        RowBox[{
         RowBox[{"x", ":", "PunctuationCharacter"}], "\[RuleDelayed]", 
         "x"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "s1", "]"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Not", "[", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"$SystemSymbols", ",", 
            RowBox[{"s1", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"s2", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"StringDrop", "[", 
              RowBox[{
               RowBox[{"s1", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", 
               RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "/@", 
            RowBox[{"Range", "[", 
             RowBox[{"StringLength", "[", 
              RowBox[{"s1", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"result", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s1", "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ";;", 
                   RowBox[{"i", "-", "1"}]}], "]"}], "]"}], ",", 
                RowBox[{"s2", "[", 
                 RowBox[{"[", "#", "]"}], "]"}], ",", 
                RowBox[{"s1", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{"i", "+", "1"}], ";;"}], "]"}], "]"}]}], "}"}], 
              "&"}], "/@", 
             RowBox[{"Range", "[", 
              RowBox[{"StringLength", "[", 
               RowBox[{"s1", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}]}]}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"StringJoin", "/@", 
      RowBox[{"Flatten", "[", 
       RowBox[{"result", ",", "1"}], "]"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\n", 
 RowBox[{"Clear", "[", "correctInserting", "]"}], "\n", 
 RowBox[{
  RowBox[{"correctInserting", "[", 
   RowBox[{"str_String", ",", "strinst_String"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"s", "=", "str"}], ",", "s1", ",", "s2", ",", 
      RowBox[{"result", "=", 
       RowBox[{"{", "}"}]}], ",", "i", ",", 
      RowBox[{"symb", "=", "strinst"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"s1", "=", 
      RowBox[{"StringSplit", "[", 
       RowBox[{"str", ",", 
        RowBox[{
         RowBox[{"x", ":", "PunctuationCharacter"}], "\[RuleDelayed]", 
         "x"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "s1", "]"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Not", "[", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"$SystemSymbols", ",", 
            RowBox[{"s1", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"s2", "=", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"#", "+", 
                RowBox[{"Total", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"StringLength", "[", "#", "]"}], "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{"s1", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", 
                    RowBox[{"i", "-", "1"}]}], "]"}], "]"}], ")"}]}], "]"}]}],
                ",", "\[IndentingNewLine]", 
               RowBox[{"StringInsert", "[", 
                RowBox[{
                 RowBox[{"s1", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", "symb", ",", 
                 RowBox[{"{", "#", "}"}]}], "]"}]}], "}"}], "&"}], 
            "\[IndentingNewLine]", "/@", 
            RowBox[{"Range", "[", 
             RowBox[{
              RowBox[{"StringLength", "[", 
               RowBox[{"s1", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "]"}], "+", "1"}], "]"}]}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"result", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s2", "[", 
                 RowBox[{"[", 
                  RowBox[{"#", ",", "1"}], "]"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"s1", "[", 
                   RowBox[{"[", 
                    RowBox[{"1", ";;", 
                    RowBox[{"i", "-", "1"}]}], "]"}], "]"}], ",", 
                  RowBox[{"s2", "[", 
                   RowBox[{"[", 
                    RowBox[{"#", ",", "2"}], "]"}], "]"}], ",", 
                  RowBox[{"s1", "[", 
                   RowBox[{"[", 
                    RowBox[{
                    RowBox[{"i", "+", "1"}], ";;"}], "]"}], "]"}]}], "}"}]}], 
               "}"}], "&"}], "/@", 
             RowBox[{"Range", "[", 
              RowBox[{
               RowBox[{"StringLength", "[", 
                RowBox[{"s1", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "]"}], "+", "1"}], "]"}]}]}],
            "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"StringJoin", "/@", 
       RowBox[{"Flatten", "[", 
        RowBox[{"result", ",", "1"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
     
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Transpose", "[", 
           RowBox[{"Flatten", "[", 
            RowBox[{"result", ",", "1"}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"StringJoin", "/@", 
          RowBox[{
           RowBox[{"Transpose", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"result", ",", "1"}], "]"}], "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], "]"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"evaluation", "[", 
    RowBox[{"str_", ",", "nulltest_", ",", "size_", ",", "symb_"}], "]"}], ":=",
    "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"s1", "=", 
       RowBox[{"correctInserting", "[", 
        RowBox[{"str", ",", "symb"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"s2", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"s1", ",", 
         RowBox[{
          RowBox[{"testAnalyser", "[", 
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", "str", ",", "nulltest"}], 
           "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"s3", "=", 
       RowBox[{"stylingResult", "[", 
        RowBox[{"s2", ",", "symb", ",", "size"}], "]"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.7082071447121754`*^9},ExpressionUUID->"4a62b32b-90c0-4479-b6e4-\
0431f58c0e07"]
}, Closed]]
}, Open  ]],

Cell["Written Content / Lesson Plans", "TemplateSubsection",
 CellChangeTimes->{{3.708096199547399*^9, 
  3.708096214681534*^9}},ExpressionUUID->"a55786c3-e7a6-4cf3-bb54-\
b05532239df1"],

Cell[CellGroupData[{

Cell["Conclusions in Detail", "TemplateSubsection",
 CellChangeTimes->{{3.549547456866158*^9, 3.549547459278479*^9}, 
   3.708095987661463*^9, {3.708096097865437*^9, 
   3.70809609806956*^9}},ExpressionUUID->"5a247b12-4033-40a4-960f-\
65d46bf0f9c2"],

Cell["\<\
1) We have a algorithm that can work with all types of string where we can \
correct it only by adding 1 character.
2) We have a prototype of neural net and dataset for it.\
\>", "Text",
 CellChangeTimes->{{3.708208618509633*^9, 
  3.7082086765201845`*^9}},ExpressionUUID->"e79b1373-c11c-4c89-91cb-\
0b59e10a378b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["All Visualizations", "TemplateSubsection",
 CellChangeTimes->{{3.5495421749322853`*^9, 3.5495421791841507`*^9}, {
  3.7080959928646717`*^9, 3.708095994448739*^9}, {3.708096104617906*^9, 
  3.708096104865819*^9}},ExpressionUUID->"f27ae70e-91c7-4506-8835-\
21b281190700"],

Cell[CellGroupData[{

Cell["Neural Nets", "Chapter",
 CellChangeTimes->{{3.7082088990987873`*^9, 3.7082089038201313`*^9}, 
   3.7082089915832376`*^9},ExpressionUUID->"7face186-ae95-47ea-8acd-\
69f0b13cd6c5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"validCharacters", "=", " ", 
   RowBox[{"StringJoin", "@", 
    RowBox[{"CharacterRange", "[", 
     RowBox[{"30", ",", "125"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"net00", "=", 
  RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<revIn\>\"", "\[Rule]", " ", 
       RowBox[{"SequenceReverseLayer", "[", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<encGRU<\>\"", "->", 
       RowBox[{"GatedRecurrentLayer", "[", "96", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<revOut\>\"", "\[Rule]", " ", 
       RowBox[{"SequenceReverseLayer", "[", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<encGRU>\>\"", "->", 
       RowBox[{"GatedRecurrentLayer", "[", "96", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<cat\>\"", "\[Rule]", " ", 
       RowBox[{"CatenateLayer", "[", "2", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<decGRU\>\"", "\[Rule]", " ", 
       RowBox[{"GatedRecurrentLayer", "[", "96", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<classifier\>\"", "\[Rule]", " ", 
       RowBox[{"NetMapOperator", "[", "\[IndentingNewLine]", 
        RowBox[{"NetChain", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"LinearLayer", "[", 
            RowBox[{"StringLength", "[", "validCharacters", "]"}], "]"}], ",", 
           RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], "]"}], 
        "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "|>"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", " ", 
       RowBox[{"\"\<revIn\>\"", "\[Rule]", 
        RowBox[{"\"\<encGRU<\>\"", "\[Rule]", "\"\<revOut\>\""}]}]}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", " ", 
       "\"\<encGRU>\>\""}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<revOut\>\"", ",", " ", "\"\<encGRU>\>\""}], "}"}], 
       "\[Rule]", " ", 
       RowBox[{"\"\<cat\>\"", "\[Rule]", " ", 
        RowBox[{
        "\"\<decGRU\>\"", "\[Rule]", " ", "\"\<classifier\>\""}]}]}]}], " ", 
     "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Characters\>\"", ",", "validCharacters", ",", 
        "\"\<UnitVector\>\""}], "}"}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Characters\>\"", ",", "validCharacters"}], "}"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.708130936151924*^9, 3.7081310189694653`*^9}, {
   3.708131236001878*^9, 3.708131244213685*^9}, 3.7081313672329845`*^9, {
   3.7081317380784826`*^9, 3.7081317457591114`*^9}, 3.708131879252061*^9, {
   3.7081319172520533`*^9, 3.7081319254498467`*^9}, {3.7081321653097124`*^9, 
   3.70813218165849*^9}},ExpressionUUID->"bcff7b13-499b-4775-8eb8-\
2246e1883dcb"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {3,
               4}, {1, 5}, {4, 6}, {5, 6}, {6, 7}, {7, 8}, {8, 9}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "Input", "revIn", "encGRU<", "revOut", "encGRU>", "cat", 
               "decGRU", "classifier", "Output"}, {Null, 
               RGBColor[0.73, 1., 0.33], 
               RGBColor[0.6, 0.2, 0.6], 
               RGBColor[1., 0.7, 0.31], 
               RGBColor[0.24, 0.277, 0.583]}, {1, 2, 3, 2, 3, 4, 3, 5, 1}, {
              Null, SequenceReverseLayer, GatedRecurrentLayer, CatenateLayer, 
               
               HoldForm[NetMapOperator][
                HoldForm[
                 NetChain[
                  NeuralNetworks`Private`UniqueSkeleton[2, 32539]]]]}, {
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1022025782], 96}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1022025782], 96}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1022025782], 96}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1022025782], 96}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1022025782], 96}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1022025782], 96}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1022025782], 192}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1022025782], 96}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1022025782], 96}, 
                NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Nodes", "revIn"], 
                 NeuralNetworks`NetPath["Nodes", "encGRU<"], 
                 NeuralNetworks`NetPath["Nodes", "revOut"], 
                 NeuralNetworks`NetPath["Nodes", "encGRU>"], 
                 NeuralNetworks`NetPath["Nodes", "cat"], 
                 NeuralNetworks`NetPath["Nodes", "decGRU"], 
                 NeuralNetworks`NetPath["Nodes", "classifier"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NetEncoder["Characters", 
                  Association[
                  "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 0, 0, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
                     13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                    27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
                    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 
                    55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 
                    69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 
                    83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 
                    128, 128}], 
                    RawArray["UnsignedInteger8",{30, 31, 32, 33, 34, 35, 36, 
                    37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 
                    51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 
                    65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 
                    79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 
                    93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 
                    106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 
                    117, 118, 119, 120, 121, 122, 123, 124, 125}], 96, 
                    "\.1e\.1f \
!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`\
abcdefghijklmnopqrstuvwxyz{|}"]], "OutputForm" -> "UnitVector", "IgnoreCase" -> 
                   False, "Count" -> 96], 
                  NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                   NeuralNetworks`RealT]]], 
               Association["Output" -> NetDecoder["Characters", 
                  Association[
                  "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 0, 0, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
                     13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                    27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
                    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 
                    55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 
                    69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 
                    83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 
                    128, 128}], 
                    RawArray["UnsignedInteger8",{30, 31, 32, 33, 34, 35, 36, 
                    37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 
                    51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 
                    65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 
                    79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 
                    93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 
                    106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 
                    117, 118, 119, 120, 121, 122, 123, 124, 125}], 96, 
                    
                    "\.1e\.1f \
!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`\
abcdefghijklmnopqrstuvwxyz{|}"]], "IgnoreCase" -> False, "Count" -> 96], 
                  NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                   NeuralNetworks`RealT]]], 
               Association[
               "revIn" -> 
                Association[
                 "Type" -> "SequenceReverse", "Arrays" -> Association[], 
                  "Parameters" -> Association[], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                    NeuralNetworks`RealT]]], "encGRU<" -> 
                Association[
                 "Type" -> "GatedRecurrent", "Arrays" -> 
                  Association[
                   "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]], 
                  "Parameters" -> 
                  Association[
                   "OutputSize" -> 96, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    96, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1022025782]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                    NeuralNetworks`RealT]], "States" -> 
                  Association[
                   "State" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]]], 
                "revOut" -> 
                Association[
                 "Type" -> "SequenceReverse", "Arrays" -> Association[], 
                  "Parameters" -> Association[], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                    NeuralNetworks`RealT]]], "encGRU>" -> 
                Association[
                 "Type" -> "GatedRecurrent", "Arrays" -> 
                  Association[
                   "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]], 
                  "Parameters" -> 
                  Association[
                   "OutputSize" -> 96, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    96, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1022025782]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                    NeuralNetworks`RealT]], "States" -> 
                  Association[
                   "State" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]]], 
                "cat" -> Association[
                 "Type" -> "Catenate", "Arrays" -> Association[], 
                  "Parameters" -> Association["Level" -> 2, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                    NeuralNetworks`RealT]}, "$InputCount" -> 2, 
                    "$OutputShape" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 192}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 192}, 
                    NeuralNetworks`RealT]]], "decGRU" -> 
                Association[
                 "Type" -> "GatedRecurrent", "Arrays" -> 
                  Association[
                   "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{96, 192}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{96, 192}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{96, 192}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]], 
                  "Parameters" -> 
                  Association[
                   "OutputSize" -> 96, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    192, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1022025782]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                    NeuralNetworks`RealT]], "States" -> 
                  Association[
                   "State" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]]], 
                "classifier" -> 
                Association[
                 "Type" -> "NetMap", "Arrays" -> Association[], "Parameters" -> 
                  Association[
                   "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{96, 96}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {96}, "$OutputSize" -> 96, 
                    "$InputSize" -> 96, "$InputDimensions" -> {96}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1022025782],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]], 
                  "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1022025782], 96}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{735., {110., 119.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.708131367877423*^9, {3.708131738756945*^9, 3.7081317462284436`*^9}, 
   3.7081318799495554`*^9, 3.70813192604025*^9, {3.7081321750836353`*^9, 
   3.708132182414008*^9}, 
   3.708169224021087*^9},ExpressionUUID->"59ee8b0c-f5f1-4d66-87c5-\
4a567478f3bd"]
}, {2}]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"validCharacters", "=", " ", 
   RowBox[{"StringJoin", "@", 
    RowBox[{"CharacterRange", "[", 
     RowBox[{"30", ",", "125"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"net00", "=", 
  RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<revIn\>\"", "\[Rule]", " ", 
       RowBox[{"SequenceReverseLayer", "[", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<encGRU<\>\"", "->", 
       RowBox[{"GatedRecurrentLayer", "[", "64", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<revOut\>\"", "\[Rule]", " ", 
       RowBox[{"SequenceReverseLayer", "[", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<encGRU>\>\"", "->", 
       RowBox[{"GatedRecurrentLayer", "[", "64", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<cat\>\"", "\[Rule]", " ", 
       RowBox[{"CatenateLayer", "[", "2", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<decGRU\>\"", "\[Rule]", " ", 
       RowBox[{"GatedRecurrentLayer", "[", "64", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<classifier\>\"", "\[Rule]", " ", 
       RowBox[{"NetMapOperator", "[", "\[IndentingNewLine]", 
        RowBox[{"NetChain", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"LinearLayer", "[", 
            RowBox[{"StringLength", "[", "validCharacters", "]"}], "]"}], ",", 
           RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], "]"}], 
        "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<loss\>\"", "\[Rule]", " ", 
       RowBox[{"CrossEntropyLossLayer", "[", "\"\<Index\>\"", "]"}]}]}], 
     "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", " ", 
       RowBox[{"\"\<revIn\>\"", "\[Rule]", 
        RowBox[{"\"\<encGRU<\>\"", "\[Rule]", "\"\<revOut\>\""}]}]}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", " ", 
       "\"\<encGRU>\>\""}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<revOut\>\"", ",", " ", "\"\<encGRU>\>\""}], "}"}], 
       "\[Rule]", " ", 
       RowBox[{"\"\<cat\>\"", "\[Rule]", " ", 
        RowBox[{"\"\<decGRU\>\"", "\[Rule]", " ", 
         RowBox[{"\"\<classifier\>\"", " ", "\[Rule]", " ", 
          RowBox[{"NetPort", "[", 
           RowBox[{"\"\<loss\>\"", ",", "\"\<Input\>\""}], "]"}]}]}]}]}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Target\>\"", "]"}], "\[Rule]", " ", 
       RowBox[{"NetPort", "[", 
        RowBox[{"\"\<loss\>\"", ",", "\"\<Target\>\""}], "]"}]}]}], "}"}], 
    ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Characters\>\"", ",", "validCharacters", ",", 
        "\"\<UnitVector\>\""}], "}"}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Target\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Characters\>\"", ",", "validCharacters"}], "}"}], 
      "]"}]}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Characters\>\"", ",", "validCharacters"}], "}"}], "]"}]}],
     "*)"}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.7081214128709974`*^9, 3.7081214698605766`*^9}, {
   3.708121596434064*^9, 3.7081216464223957`*^9}, {3.7081218996313815`*^9, 
   3.708121960701556*^9}, 3.708124879303993*^9, {3.708129592714689*^9, 
   3.708129594501954*^9}, 
   3.708130150475954*^9},ExpressionUUID->"20b48497-2105-4019-8a42-\
de02640003bc"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {3,
               4}, {1, 5}, {4, 6}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {10, 9}, {
              9, 11}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "Input", "revIn", "encGRU<", "revOut", "encGRU>", "cat", 
               "decGRU", "classifier", "loss", "Target", "Loss"}, {Null, 
               RGBColor[0.73, 1., 0.33], 
               RGBColor[0.6, 0.2, 0.6], 
               RGBColor[1., 0.7, 0.31], 
               RGBColor[0.24, 0.277, 0.583], 
               RGBColor[0, 1, 1]}, {1, 2, 3, 2, 3, 4, 3, 5, 6, 1, 1}, {
              Null, SequenceReverseLayer, GatedRecurrentLayer, CatenateLayer, 
               
               HoldForm[NetMapOperator][
                HoldForm[
                 NetChain[
                  NeuralNetworks`Private`UniqueSkeleton[2, 42459]]]], 
               HoldForm[
                CrossEntropyLossLayer["Index"]]}, {
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1900306884], 96}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1900306884], 96}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1900306884], 64}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1900306884], 96}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1900306884], 64}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1900306884], 64}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1900306884], 128}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1900306884], 64}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1900306884], 96}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1900306884]}, 
                NeuralNetworks`IndexIntegerT[96]], 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Nodes", "revIn"], 
                 NeuralNetworks`NetPath["Nodes", "encGRU<"], 
                 NeuralNetworks`NetPath["Nodes", "revOut"], 
                 NeuralNetworks`NetPath["Nodes", "encGRU>"], 
                 NeuralNetworks`NetPath["Nodes", "cat"], 
                 NeuralNetworks`NetPath["Nodes", "decGRU"], 
                 NeuralNetworks`NetPath["Nodes", "classifier"], 
                 NeuralNetworks`NetPath["Nodes", "loss"], 
                 NeuralNetworks`NetPath["Inputs", "Target"], 
                 NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NetEncoder["Characters", 
                  Association[
                  "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 0, 0, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
                     13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                    27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
                    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 
                    55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 
                    69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 
                    83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 
                    128, 128}], 
                    RawArray["UnsignedInteger8",{30, 31, 32, 33, 34, 35, 36, 
                    37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 
                    51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 
                    65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 
                    79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 
                    93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 
                    106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 
                    117, 118, 119, 120, 121, 122, 123, 124, 125}], 96, 
                    "\.1e\.1f \
!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`\
abcdefghijklmnopqrstuvwxyz{|}"]], "OutputForm" -> "UnitVector", "IgnoreCase" -> 
                   False, "Count" -> 96], 
                  NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 96}, 
                   NeuralNetworks`RealT]], "Target" -> 
                NetEncoder["Characters", 
                  Association[
                  "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 0, 0, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
                     13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                    27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
                    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 
                    55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 
                    69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 
                    83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 
                    128, 128}], 
                    RawArray["UnsignedInteger8",{30, 31, 32, 33, 34, 35, 36, 
                    37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 
                    51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 
                    65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 
                    79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 
                    93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 
                    106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 
                    117, 118, 119, 120, 121, 122, 123, 124, 125}], 96, 
                    "\.1e\.1f \
!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`\
abcdefghijklmnopqrstuvwxyz{|}"]], "OutputForm" -> "Index", "IgnoreCase" -> 
                   False, "Count" -> 96], 
                  NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884]}, 
                   NeuralNetworks`IndexIntegerT[96]]]], 
               Association[
               "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
               Association[
               "revIn" -> 
                Association[
                 "Type" -> "SequenceReverse", "Arrays" -> Association[], 
                  "Parameters" -> Association[], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 96}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 96}, 
                    NeuralNetworks`RealT]]], "encGRU<" -> 
                Association[
                 "Type" -> "GatedRecurrent", "Arrays" -> 
                  Association[
                   "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 96}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 96}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 96}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                  "Parameters" -> 
                  Association[
                   "OutputSize" -> 64, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    96, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1900306884]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 96}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 64}, 
                    NeuralNetworks`RealT]], "States" -> 
                  Association[
                   "State" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                "revOut" -> 
                Association[
                 "Type" -> "SequenceReverse", "Arrays" -> Association[], 
                  "Parameters" -> Association[], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 64}, 
                    NeuralNetworks`RealT]]], "encGRU>" -> 
                Association[
                 "Type" -> "GatedRecurrent", "Arrays" -> 
                  Association[
                   "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 96}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 96}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 96}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                  "Parameters" -> 
                  Association[
                   "OutputSize" -> 64, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    96, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1900306884]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 96}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 64}, 
                    NeuralNetworks`RealT]], "States" -> 
                  Association[
                   "State" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                "cat" -> Association[
                 "Type" -> "Catenate", "Arrays" -> Association[], 
                  "Parameters" -> Association["Level" -> 2, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 64}, 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 64}, 
                    NeuralNetworks`RealT]}, "$InputCount" -> 2, 
                    "$OutputShape" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 128}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 64}, 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 128}, 
                    NeuralNetworks`RealT]]], "decGRU" -> 
                Association[
                 "Type" -> "GatedRecurrent", "Arrays" -> 
                  Association[
                   "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 128}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 128}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 128}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                  "Parameters" -> 
                  Association[
                   "OutputSize" -> 64, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    128, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1900306884]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 64}, 
                    NeuralNetworks`RealT]], "States" -> 
                  Association[
                   "State" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                "classifier" -> 
                Association[
                 "Type" -> "NetMap", "Arrays" -> Association[], "Parameters" -> 
                  Association[
                   "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{96, 64}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {96}, "$OutputSize" -> 96, 
                    "$InputSize" -> 64, "$InputDimensions" -> {64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1900306884],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]], 
                  "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 96}, 
                    NeuralNetworks`RealT]]], "loss" -> 
                Association[
                 "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "TargetForm" -> "Index", "$InputDimensions" -> {
                    NeuralNetworks`LengthVar[1900306884]}, "$Classes" -> 96], 
                  "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884], 96}, 
                    NeuralNetworks`RealT], "Target" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1900306884]}, 
                    NeuralNetworks`IndexIntegerT[96]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{822., {170., 179.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.7081301618780017`*^9, 
  3.708169222086708*^9},ExpressionUUID->"3a3aecbf-5e47-4568-9aca-\
6802bb6238ca"]
}, {2}]]
}, Closed]],

Cell[CellGroupData[{

Cell["Examples ", "Chapter",
 CellChangeTimes->{{3.707781771086343*^9, 3.7077817726957335`*^9}, {
  3.7082089073636456`*^9, 
  3.708208911511585*^9}},ExpressionUUID->"259d25c2-758e-4c8e-ad87-\
203afbc23560"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"syntaxCorrector", "[", 
  RowBox[{"\"\<N[N[Nest[Nest[x^2,x,6,4,3]]]\>\"", ",", "True", ",", "20"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.707781803492872*^9, 3.707781809508498*^9}, 
   3.707781882227925*^9, {3.707936434268714*^9, 3.7079364415824957`*^9}, {
   3.7079365071792974`*^9, 3.707936515030076*^9}, 3.707936589858062*^9, {
   3.7079528548307*^9, 3.7079528557213497`*^9}, {3.7080094302590218`*^9, 
   3.708009433811529*^9}},ExpressionUUID->"a1f6886a-84d7-4581-83d4-\
5a5b22046d7d"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"Closing Bracket Missed\"\>"},
     {
      InterpretationBox[Cell[TextData[{
        "N[N[Nest[Nest[x^2,x,6",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        ",4,3]]]"
       }],ExpressionUUID->"addfdde9-1fdd-44d7-bf66-917b7aeb186f"],
       TextCell[
        Row[{"N[N[Nest[Nest[x^2,x,6", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",4,3]]]"}]]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.7077818829622746`*^9, 3.7077834425605335`*^9, 3.7077837530921783`*^9, 
   3.707817638023223*^9, 3.707817720771422*^9, 3.7078184281257133`*^9, 
   3.7078201126071095`*^9, 3.707820231004175*^9, 3.7078203324101677`*^9, 
   3.707832746416832*^9, 3.707910266249512*^9, {3.707936511300806*^9, 
   3.707936515390986*^9}, 3.707936590292655*^9, 3.7079385746357894`*^9, 
   3.7079386764708757`*^9, 3.7079423982325826`*^9, {3.7079528398774524`*^9, 
   3.7079528562057195`*^9}, 3.707953608468784*^9, 3.707954782039354*^9, {
   3.7079548739463573`*^9, 3.707954914696698*^9}, 3.707955008181835*^9, 
   3.70800576576978*^9, 3.708005796394956*^9, {3.7080093384562426`*^9, 
   3.708009447792407*^9}, 3.7080096228769407`*^9, 3.708016618306488*^9, 
   3.7081882846099396`*^9, 
   3.7081885224819593`*^9},ExpressionUUID->"6443cd53-16f1-4186-91e2-\
bb266fbf2a40"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"syntaxCorrector", "[", 
  RowBox[{"\"\<N[N[Nest[Nest[x^2,x,6,4,3]]]\>\"", ",", "False", ",", "20"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.708009458432903*^9, 
  3.7080094588782177`*^9}},ExpressionUUID->"c3fe2e25-8ca0-4a28-a1fc-\
0278e7c73f44"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"Closing Bracket Missed\"\>"},
     {
      InterpretationBox[Cell[TextData[{
        "N[N[Nest[Nest[x^2,x,6",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        ",4,3]]]"
       }],ExpressionUUID->"97eb256d-0b25-4802-9ce0-ff931ad1394c"],
       TextCell[
        Row[{"N[N[Nest[Nest[x^2,x,6", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",4,3]]]"}]]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.7080094593955812`*^9, 3.708009625101511*^9, 
  3.7080166183880463`*^9, 
  3.708189078652871*^9},ExpressionUUID->"9cd7535c-5cd2-43e0-8d66-\
fa9d32a8709e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{"Flatten", "[", 
   RowBox[{"syntaxCorrector", "[", 
    RowBox[{"\"\<Fold[f[][],x[[][],{1,2,3}]\>\"", ",", "True", ",", "20"}], 
    "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{
  3.7079365778071957`*^9, {3.7079550209475856`*^9, 3.70795502166634*^9}, {
   3.708009481966522*^9, 3.7080094866028333`*^9}, {3.708009532430132*^9, 
   3.708009604369933*^9}},ExpressionUUID->"17cc39e9-02b8-490d-a17d-\
8144a2d1776b"],

Cell[BoxData[
 TagBox[
  TagBox[
   TagBox[GridBox[{
      {"\<\"Closing bracket missing\"\>"},
      {
       InterpretationBox[Cell[TextData[{
         "Fold[f[][],x[",
         StyleBox["]",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         "[][],{1,2,3}]"
        }],ExpressionUUID->"66cb73dc-a5fc-4f42-b4c9-e118842d7901"],
        TextCell[
         Row[{"Fold[f[][],x[", 
           Style["]", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], "[][],{1,2,3}]"}]]]},
      {
       InterpretationBox[Cell[TextData[{
         "Fold[f[][],x[[",
         StyleBox["]",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         "][],{1,2,3}]"
        }],ExpressionUUID->"2ce1ed3a-f611-45e2-ab30-5aebb3c872a4"],
        TextCell[
         Row[{"Fold[f[][],x[[", 
           Style["]", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], "][],{1,2,3}]"}]]]},
      {
       InterpretationBox[Cell[TextData[{
         "Fold[f[][],x[[]",
         StyleBox["]",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         "[],{1,2,3}]"
        }],ExpressionUUID->"63a3c892-0cc3-41f9-aac6-8a82f74af777"],
        TextCell[
         Row[{"Fold[f[][],x[[]", 
           Style["]", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], "[],{1,2,3}]"}]]]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Column],
   Function[BoxForm`e$, 
    TableForm[BoxForm`e$]]],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.7077818901143637`*^9, 3.707783445370401*^9, 3.7077837549730062`*^9, 
   3.707817639857545*^9, 3.707817722793953*^9, 3.7078184299820533`*^9, 
   3.7078201145174694`*^9, 3.7078202334919367`*^9, 3.7078203338671846`*^9, 
   3.7078327488805714`*^9, 3.707910274591445*^9, 3.707936578557962*^9, 
   3.707938594008746*^9, 3.7079386790668163`*^9, 3.7079549171654806`*^9, {
   3.707955014760031*^9, 3.7079550221663427`*^9}, 3.70800580297155*^9, {
   3.708009500614668*^9, 3.7080095383973284`*^9}, {3.708009583449123*^9, 
   3.7080096270078726`*^9}, 3.708016618431074*^9, 
   3.7082060287354245`*^9},ExpressionUUID->"4eb7458d-6890-4182-9f78-\
93b254c8ed4f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"syntaxCorrector", "[", 
  RowBox[{"\"\<Fold[f[][,x[],{1,2,3}]\>\"", ",", "True", ",", "20"}], 
  "]"}]], "Input",
 CellChangeTimes->{
  3.7079365716303687`*^9, {3.7079550279788723`*^9, 3.707955028353894*^9}, {
   3.708009640390299*^9, 3.7080096446022844`*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"d5f70d4e-2fd8-4be6-a841-7adb40ba689c"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"Closing Bracket Missed\"\>"},
     {
      InterpretationBox[Cell[TextData[{
        "Fold[f[][",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        ",x[],{1,2,3}]"
       }],ExpressionUUID->"fe025a8b-d007-4957-aac7-cfd89dd96b1e"],
       TextCell[
        Row[{"Fold[f[][", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",x[],{1,2,3}]"}]]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.7077818983877516`*^9, {3.7077832818452196`*^9, 3.707783288405796*^9}, 
   3.707783758071258*^9, 3.7078176438103743`*^9, 3.7078177246289988`*^9, 
   3.707818431651724*^9, 3.707820116521874*^9, 3.70782023583261*^9, 
   3.7078203360517263`*^9, {3.707824853233267*^9, 3.707824857189643*^9}, 
   3.707834951156082*^9, 3.7079102780334187`*^9, 3.707936572587671*^9, 
   3.707938682587779*^9, 3.7079550289007554`*^9, {3.7080096300640125`*^9, 
   3.708009645073604*^9}, 
   3.708016618549659*^9},ExpressionUUID->"fdf69b0d-e125-433b-adce-\
0cc6431873e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"syntaxCorrector", "[", 
  RowBox[{"\"\<Fold[f[][,x[],{1,2,3}]\>\"", ",", "False", ",", "20"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.708009657857626*^9, 3.708009658736246*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"25b1e7f5-9435-4f2e-9275-b1ed59782e52"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"Closing Bracket Missed\"\>"},
     {
      InterpretationBox[Cell[TextData[{
        "Fold[f[][",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        ",x[],{1,2,3}]"
       }],ExpressionUUID->"de85b6a0-7880-458b-8a7b-3aafb98e7f00"],
       TextCell[
        Row[{"Fold[f[][", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",x[],{1,2,3}]"}]]]},
     {
      InterpretationBox[Cell[TextData[{
        "Fold[f[][,",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        "x[],{1,2,3}]"
       }],ExpressionUUID->"f40f583f-d5bc-448a-9856-5cfccc8f7009"],
       TextCell[
        Row[{"Fold[f[][,", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "x[],{1,2,3}]"}]]]},
     {
      InterpretationBox[Cell[TextData[{
        "Fold[f[][,x",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        "[],{1,2,3}]"
       }],ExpressionUUID->"e89f879b-5956-4ddc-9a98-c9b10b5ace52"],
       TextCell[
        Row[{"Fold[f[][,x", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "[],{1,2,3}]"}]]]},
     {
      InterpretationBox[Cell[TextData[{
        "Fold[f[][,x[",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        "],{1,2,3}]"
       }],ExpressionUUID->"23538914-2f7e-4021-a1a0-41b7a7752b61"],
       TextCell[
        Row[{"Fold[f[][,x[", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "],{1,2,3}]"}]]]},
     {
      InterpretationBox[Cell[TextData[{
        "Fold[f[][,x[]",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        ",{1,2,3}]"
       }],ExpressionUUID->"e3191b0f-d91d-42db-ab34-4567f62a25fb"],
       TextCell[
        Row[{"Fold[f[][,x[]", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{1,2,3}]"}]]]},
     {
      InterpretationBox[Cell[TextData[{
        "Fold[f[][,x[],",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        "{1,2,3}]"
       }],ExpressionUUID->"fe135545-60aa-4514-97b9-24f8f914f795"],
       TextCell[
        Row[{"Fold[f[][,x[],", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "{1,2,3}]"}]]]},
     {
      InterpretationBox[Cell[TextData[{
        "Fold[f[][,x[],{1,2,3}",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        "]"
       }],ExpressionUUID->"ca4cd94d-aba2-4210-994b-0699490f3467"],
       TextCell[
        Row[{"Fold[f[][,x[],{1,2,3}", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]]},
     {
      InterpretationBox[Cell[TextData[{
        "Fold[f[][,x[],{1,2,3}]",
        StyleBox["]",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]]
       }],ExpressionUUID->"0e2a79a5-0efb-4713-ba96-695d123342f5"],
       TextCell[
        Row[{"Fold[f[][,x[],{1,2,3}]", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.7080096590524807`*^9, 
  3.708016618654234*^9},ExpressionUUID->"ab95f8e1-557f-42f9-94c8-\
e3195ff70d99"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"syntaxCorrector", "[", 
    RowBox[{"\"\<Fold[f[][,x[],{1,2,3}]\>\"", ",", "#", ",", "20"}], "]"}], 
   "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"True", ",", "False"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.707936524892886*^9, 3.7079365612383385`*^9}, {
  3.7079550352602005`*^9, 3.7079550355570745`*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"e4f93b5a-9b82-4672-b78a-b2eff19b5a35"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    TagBox[GridBox[{
       {"\<\"Closing Bracket Missed\"\>"},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f[][",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          ",x[],{1,2,3}]"
         }],ExpressionUUID->"afad0fbd-f3ef-4591-8ec2-8d0327dda098"],
         TextCell[
          Row[{"Fold[f[][", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], ",x[],{1,2,3}]"}]]]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     Column],
    Function[BoxForm`e$, 
     TableForm[BoxForm`e$]]], ",", 
   TagBox[
    TagBox[GridBox[{
       {"\<\"Closing Bracket Missed\"\>"},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f[][",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          ",x[],{1,2,3}]"
         }],ExpressionUUID->"088ed4fc-9250-41f8-9f02-62131fdf50b9"],
         TextCell[
          Row[{"Fold[f[][", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], ",x[],{1,2,3}]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f[][,",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          "x[],{1,2,3}]"
         }],ExpressionUUID->"87d34559-d125-498b-8112-8a250f85d203"],
         TextCell[
          Row[{"Fold[f[][,", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], "x[],{1,2,3}]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f[][,x",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          "[],{1,2,3}]"
         }],ExpressionUUID->"fb93bf94-741c-4c45-9b2b-25d37956671d"],
         TextCell[
          Row[{"Fold[f[][,x", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], "[],{1,2,3}]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f[][,x[",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          "],{1,2,3}]"
         }],ExpressionUUID->"129673b1-dfed-4bbd-9aae-e9df3f331212"],
         TextCell[
          Row[{"Fold[f[][,x[", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], "],{1,2,3}]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f[][,x[]",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          ",{1,2,3}]"
         }],ExpressionUUID->"70f9d327-178b-44e1-ad33-2003d5a3cf66"],
         TextCell[
          Row[{"Fold[f[][,x[]", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{1,2,3}]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f[][,x[],",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          "{1,2,3}]"
         }],ExpressionUUID->"a0f80002-cf77-4ef9-a78b-612a96f99457"],
         TextCell[
          Row[{"Fold[f[][,x[],", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], "{1,2,3}]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f[][,x[],{1,2,3}",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          "]"
         }],ExpressionUUID->"cd866232-04b4-485b-9a2c-9786d462ead1"],
         TextCell[
          Row[{"Fold[f[][,x[],{1,2,3}", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f[][,x[],{1,2,3}]",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]]
         }],ExpressionUUID->"1d45e188-e1fa-4224-91b2-dc1b35c62d1a"],
         TextCell[
          Row[{"Fold[f[][,x[],{1,2,3}]", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     Column],
    Function[BoxForm`e$, 
     TableForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7077822488177867`*^9, 3.7077832903904037`*^9, 3.7077837603969398`*^9, 
   3.707817646102131*^9, 3.707817727129226*^9, 3.707818439783225*^9, 
   3.7078201193498893`*^9, 3.707820341352482*^9, 3.707910305586026*^9, {
   3.707936522721079*^9, 3.7079365616124754`*^9}, 3.7079387065685854`*^9, 
   3.7079550359789405`*^9, 3.7080099553727493`*^9, 
   3.7080166188348627`*^9},ExpressionUUID->"67cb4888-18ba-451e-bc26-\
95350764cfdc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"syntaxCorrector", "[", 
    RowBox[{"\"\<Fold[f[][][],x[][[],{1,2,3}]\>\"", ",", "#", ",", "20"}], 
    "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"True", ",", "False"}], "}"}]}]], "Input",
 CellChangeTimes->{
  3.707936595539129*^9, {3.707955039322736*^9, 
   3.7079550396352367`*^9}},ExpressionUUID->"f52aef0a-52ea-43b4-bd2a-\
7cc6c084abf4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    TagBox[GridBox[{
       {"\<\"Closing Bracket Missed\"\>"},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f[][][],x[][",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          "[],{1,2,3}]"
         }],ExpressionUUID->"a549f730-f0f4-48b0-98e1-f5d1ce74bc34"],
         TextCell[
          Row[{"Fold[f[][][],x[][", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], "[],{1,2,3}]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f[][][],x[][[",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          "],{1,2,3}]"
         }],ExpressionUUID->"9e846951-6716-41d2-a5e8-63b3dbabb0ee"],
         TextCell[
          Row[{"Fold[f[][][],x[][[", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], "],{1,2,3}]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f[][][],x[][[]",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          ",{1,2,3}]"
         }],ExpressionUUID->"36668927-5585-4f72-a6d7-391e732b3c55"],
         TextCell[
          Row[{"Fold[f[][][],x[][[]", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{1,2,3}]"}]]]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     Column],
    Function[BoxForm`e$, 
     TableForm[BoxForm`e$]]], ",", 
   TagBox[
    TagBox[GridBox[{
       {"\<\"Closing Bracket Missed\"\>"},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f[][][],x[][",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          "[],{1,2,3}]"
         }],ExpressionUUID->"cdedaa34-d003-4296-aa06-f98cd3c81435"],
         TextCell[
          Row[{"Fold[f[][][],x[][", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], "[],{1,2,3}]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f[][][],x[][[",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          "],{1,2,3}]"
         }],ExpressionUUID->"d7c441f2-8e94-4877-a77a-5dbc5172b0b1"],
         TextCell[
          Row[{"Fold[f[][][],x[][[", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], "],{1,2,3}]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f[][][],x[][[]",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          ",{1,2,3}]"
         }],ExpressionUUID->"b5bde1a1-4377-46ea-96b6-0d8f27b6efcd"],
         TextCell[
          Row[{"Fold[f[][][],x[][[]", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{1,2,3}]"}]]]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     Column],
    Function[BoxForm`e$, 
     TableForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{3.7077822982019963`*^9, 3.7077832933393106`*^9, 
  3.707783765634364*^9, 3.7078176526671658`*^9, 3.7078177294380836`*^9, 
  3.7078184416478252`*^9, 3.7078201220051413`*^9, 3.707820345352293*^9, 
  3.707834981531517*^9, 3.7079103093877163`*^9, 3.7079365961209993`*^9, 
  3.70793871265832*^9, 3.7079550399477224`*^9, 3.708009959963989*^9, 
  3.7080166188939023`*^9},ExpressionUUID->"6cf96aa2-5a6c-40df-84b9-\
59890ad8dbcf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"syntaxCorrector", "[", 
    RowBox[{"\"\<Fold[f,x[,{1,2,3}]\>\"", ",", "#", ",", "20"}], "]"}], "&"}],
   "/@", 
  RowBox[{"{", 
   RowBox[{"True", ",", "False"}], "}"}]}]], "Input",
 CellChangeTimes->{
  3.7079365997992306`*^9, {3.7079550446040273`*^9, 3.7079550448384047`*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"24dd0f8d-1190-4497-a55e-5858808c7ade"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    TagBox[GridBox[{
       {"\<\"Closing Bracket Missed\"\>"},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f,x[",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          ",{1,2,3}]"
         }],ExpressionUUID->"4e362d24-2ba5-4864-8ce1-4da373c34c7a"],
         TextCell[
          Row[{"Fold[f,x[", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{1,2,3}]"}]]]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     Column],
    Function[BoxForm`e$, 
     TableForm[BoxForm`e$]]], ",", 
   TagBox[
    TagBox[GridBox[{
       {"\<\"Closing Bracket Missed\"\>"},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f,x[",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          ",{1,2,3}]"
         }],ExpressionUUID->"01930640-12e3-4b0a-90d6-4ea43a3ec477"],
         TextCell[
          Row[{"Fold[f,x[", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{1,2,3}]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f,x[,",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          "{1,2,3}]"
         }],ExpressionUUID->"51f0b874-0e96-4bc1-b612-e8fc703a0f53"],
         TextCell[
          Row[{"Fold[f,x[,", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], "{1,2,3}]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f,x[,{1,2,3}",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          "]"
         }],ExpressionUUID->"efafe6d5-bd14-4cd4-822e-5a1a77fa7677"],
         TextCell[
          Row[{"Fold[f,x[,{1,2,3}", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Fold[f,x[,{1,2,3}]",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]]
         }],ExpressionUUID->"54cdc38b-cc79-4b65-950e-c2cde7c474a1"],
         TextCell[
          Row[{"Fold[f,x[,{1,2,3}]", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     Column],
    Function[BoxForm`e$, 
     TableForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.707782314563439*^9, 3.707783772196677*^9, {3.707817660177515*^9, 
   3.707817672086181*^9}, 3.7078177341435127`*^9, 3.7078184776025095`*^9, 
   3.7078193605136967`*^9, 3.7078195827873073`*^9, 3.7078201352378874`*^9, 
   3.7078203523122177`*^9, 3.707834990385765*^9, {3.7078350544891143`*^9, 
   3.7078350572300406`*^9}, 3.7079103124275017`*^9, 3.7079366002506638`*^9, 
   3.707938715335812*^9, 3.7079550452133884`*^9, 3.7080099635755367`*^9, 
   3.7080166190084825`*^9},ExpressionUUID->"168be4d9-12cd-4fb0-9caa-\
4a2217509174"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"syntaxCorrector", "[", 
    RowBox[{
    "\"\<Function[x,Evaluate[Together[Nest[Function[z,(z+a/z)/2,x,4]]]]\>\"", 
     ",", "#", ",", "20"}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"True", ",", "False"}], "}"}]}]], "Input",
 CellChangeTimes->{
  3.7079366073732214`*^9, {3.707955048588435*^9, 3.7079550488540635`*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"a9541d6f-04dd-4b53-a0d4-11447a2bfc65"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    TagBox[GridBox[{
       {"\<\"Closing Bracket Missed\"\>"},
       {
        InterpretationBox[Cell[TextData[{
          "Function[x,Evaluate[Together[Nest[Function[z,(z+a/z)",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          "/2,x,4]]]]"
         }],ExpressionUUID->"0e1ce761-c1fb-446d-aba6-1e7b2bb56f5c"],
         TextCell[
          Row[{"Function[x,Evaluate[Together[Nest[Function[z,(z+a/z)", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], "/2,x,4]]]]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Function[x,Evaluate[Together[Nest[Function[z,(z+a/z)/2",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          ",x,4]]]]"
         }],ExpressionUUID->"11d22d10-78f7-45eb-8106-e889b58169e8"],
         TextCell[
          Row[{"Function[x,Evaluate[Together[Nest[Function[z,(z+a/z)/2", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], ",x,4]]]]"}]]]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     Column],
    Function[BoxForm`e$, 
     TableForm[BoxForm`e$]]], ",", 
   TagBox[
    TagBox[GridBox[{
       {"\<\"Closing Bracket Missed\"\>"},
       {
        InterpretationBox[Cell[TextData[{
          "Function[x,Evaluate[Together[Nest[Function[z,",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          "(z+a/z)/2,x,4]]]]"
         }],ExpressionUUID->"9730f969-feaf-4ce2-882e-942d3eeea546"],
         TextCell[
          Row[{"Function[x,Evaluate[Together[Nest[Function[z,", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], 
            "(z+a/z)/2,x,4]]]]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Function[x,Evaluate[Together[Nest[Function[z,(z+a/z)",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          "/2,x,4]]]]"
         }],ExpressionUUID->"a27f47c8-f344-4af8-953c-dad578865df6"],
         TextCell[
          Row[{"Function[x,Evaluate[Together[Nest[Function[z,(z+a/z)", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], "/2,x,4]]]]"}]]]},
       {
        InterpretationBox[Cell[TextData[{
          "Function[x,Evaluate[Together[Nest[Function[z,(z+a/z)/2",
          StyleBox["]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          ",x,4]]]]"
         }],ExpressionUUID->"46e1da64-6044-4f5d-a54a-074946043b73"],
         TextCell[
          Row[{"Function[x,Evaluate[Together[Nest[Function[z,(z+a/z)/2", 
            Style["]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], ",x,4]]]]"}]]]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     Column],
    Function[BoxForm`e$, 
     TableForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.707782439730847*^9, 3.70778308259172*^9, 3.707783774634905*^9, {
   3.707816236199047*^9, 3.7078162515219374`*^9}, 3.7078176806627955`*^9, 
   3.7078177369346757`*^9, 3.707818474122487*^9, 3.7078189631786704`*^9, {
   3.7078203590319643`*^9, 3.707820369247636*^9}, {3.7078248804287615`*^9, 
   3.707824908175397*^9}, 3.707826092936386*^9, 3.7078261705141487`*^9, 
   3.7078350634078865`*^9, 3.7079104411834507`*^9, 3.7079366078999996`*^9, 
   3.7079387178691425`*^9, 3.7079550502759457`*^9, 3.7080099664655857`*^9, 
   3.7080166191190624`*^9},ExpressionUUID->"ddcaf0da-a069-463a-85e3-\
1d258a8bd3cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"syntaxCorrector", "[", 
    RowBox[{"\"\<Nest[f,,4]\>\"", ",", "#", ",", "20"}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"True", ",", "False"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.707911801941455*^9, 3.7079118406648874`*^9}, {
  3.70793661625186*^9, 3.707936619174532*^9}, {3.707952871455854*^9, 
  3.7079528717683563`*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"c7f16819-723d-4260-82c1-113a43a764b4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    TagBox[GridBox[{
       {"\<\"Letter or Number Missed\"\>"},
       {
        InterpretationBox[Cell[TextData[{
          "Nest[f,",
          StyleBox["\[Placeholder]",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontSize->20,
           FontWeight->Bold,
           FontColor->RGBColor[1, 0, 0]],
          ",4]"
         }],ExpressionUUID->"9647021b-7606-4dcb-9091-5e3ba7dabb64"],
         TextCell[
          Row[{"Nest[f,", 
            Style["\[Placeholder]", 
             RGBColor[1, 0, 0], FontSize -> 20, Bold], ",4]"}]]]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     Column],
    Function[BoxForm`e$, 
     TableForm[BoxForm`e$]]], ",", 
   TagBox[
    TagBox[GridBox[{
       {"\<\"All Correct!\"\>"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     Column],
    Function[BoxForm`e$, 
     TableForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{{3.707911822722885*^9, 3.707911842195349*^9}, 
   3.7079359976452007`*^9, 3.7079360531467366`*^9, 3.707936620127695*^9, 
   3.707938721099291*^9, 3.7079393669725056`*^9, 3.707952872805026*^9, 
   3.7079536220139914`*^9, 3.707954787742528*^9, 3.7079550557291174`*^9, 
   3.708009969619804*^9, 3.708010071684836*^9, 
   3.708016619237644*^9},ExpressionUUID->"5ca0e996-68c6-4138-b0aa-\
db7fddb0374c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"testOnly", "=", 
   RowBox[{"StringDelete", "[", 
    RowBox[{
     RowBox[{"NotebookImport", "[", 
      RowBox[{
      "\"\<E:\\\\Downloads\\\\\
TwoDimensionalCellularAutomataFromOneDimensionalRules-author.nb\>\"", ",", 
       RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<InputText\>\""}]}], "]"}], 
     ",", "WhitespaceCharacter"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7079405305903463`*^9, 3.7079405426581497`*^9}, {
  3.7079405980485287`*^9, 
  3.7079406008032265`*^9}},ExpressionUUID->"d521ce2d-139b-4fef-b8fb-\
97b1428f9364"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"syntaxCorrector", "[", 
  RowBox[{"testOnly2", ",", "True", ",", "20"}], "]"}]], "Input",
 CellChangeTimes->{{3.70794094731155*^9, 3.707940958423691*^9}, {
   3.7079410034817076`*^9, 3.7079410151572227`*^9}, {3.7079417387087083`*^9, 
   3.707941743646166*^9}, 3.7079424068021126`*^9, {3.7079424442453527`*^9, 
   3.707942445568016*^9}, {3.7079426615750313`*^9, 
   3.7079426731124315`*^9}},ExpressionUUID->"0aea6d96-c074-4bff-85ad-\
1f2627a0a46f"],

Cell[BoxData[
 RowBox[{"syntaxCorrector", "[", 
  RowBox[{"testOnly2", ",", "True", ",", "20"}], "]"}]], "Output",
 CellChangeTimes->{
  3.707940546307649*^9, 3.7079406033135395`*^9, 3.7079406487877274`*^9, {
   3.707940708984404*^9, 3.707940783959627*^9}, {3.707940884122134*^9, 
   3.707940923579223*^9}, 3.7079409602145634`*^9, {3.7079410073158603`*^9, 
   3.707941016235489*^9}, 3.7079417594365473`*^9, 3.707941800342613*^9, {
   3.707942440841383*^9, 3.707942446296211*^9}, 3.707942521911775*^9, {
   3.707942664794308*^9, 3.707942679725647*^9}, 3.7079427151114845`*^9, 
   3.707955112058676*^9, 3.7079551550361433`*^9, 
   3.7080166204525113`*^9},ExpressionUUID->"b7f6598c-2db8-4ad2-b52c-\
68db77db298c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"numTest", "=", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"StringLength", "@", "testOnly"}]}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testOnly2", "=", 
   RowBox[{
    RowBox[{"StringDrop", "[", 
     RowBox[{"testOnly", ",", 
      RowBox[{"{", "numTest", "}"}]}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"messageAnalysis", "@", "testOnly2"}]}], "Input",
 CellChangeTimes->{{3.7079405443090897`*^9, 3.7079405458247623`*^9}, {
  3.7079406137175107`*^9, 3.707940648027233*^9}, {3.707940708287732*^9, 
  3.7079407836248918`*^9}, {3.7079408834915223`*^9, 3.7079409125855293`*^9}, {
  3.7079417066882534`*^9, 
  3.7079417090067406`*^9}},ExpressionUUID->"ba9df7e9-8e3c-4cc7-9a24-\
87da64d232db"],

Cell[BoxData["974"], "Output",
 CellChangeTimes->{{3.7079417324549265`*^9, 3.707941763362415*^9}, 
   3.7079426854180326`*^9, 3.707942759715373*^9, {3.707955064322933*^9, 
   3.707955079401183*^9}, {3.7079551474110937`*^9, 3.7079551513329906`*^9}, {
   3.707955182145755*^9, 3.7079552000990324`*^9}, 3.708016620500041*^9, {
   3.708206112651068*^9, 3.708206116069663*^9}, {3.708206197863022*^9, 
   3.708206207391977*^9}, {3.70820626996402*^9, 
   3.7082062741069417`*^9}},ExpressionUUID->"8141b190-8042-4991-bac4-\
e56e037d63b5"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.7079417324549265`*^9, 3.707941763362415*^9}, 
   3.7079426854180326`*^9, 3.707942759715373*^9, {3.707955064322933*^9, 
   3.707955079401183*^9}, {3.7079551474110937`*^9, 3.7079551513329906`*^9}, {
   3.707955182145755*^9, 3.7079552000990324`*^9}, 3.708016620500041*^9, {
   3.708206112651068*^9, 3.708206116069663*^9}, {3.708206197863022*^9, 
   3.708206207391977*^9}, {3.70820626996402*^9, 
   3.7082062744031515`*^9}},ExpressionUUID->"679a0c5b-a66b-4bad-b875-\
a5553cee67a8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"syntaxCorrector", "[", 
  RowBox[{"testOnly2", ",", "True", ",", "20"}], "]"}]], "Input",ExpressionUUI\
D->"14bede3b-e6d3-4ef0-8369-a0ddcac62bb0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allexamples", "=", 
   RowBox[{"Flatten", "/@", 
    RowBox[{"Association", "[", 
     RowBox[{"WolframLanguageData", "[", 
      RowBox[{"\"\<Graphics\>\"", ",", "\"\<DocumentationExampleInputs\>\""}],
       "]"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.707154784729302*^9, 3.7071547907555385`*^9}, 
   3.707154834511428*^9, {3.7072606157371807`*^9, 3.70726061621389*^9}, {
   3.707260672672909*^9, 3.707260683213067*^9}, {3.7072607491822343`*^9, 
   3.7072607721164722`*^9}, {3.707307473974388*^9, 3.7073075005347795`*^9}, {
   3.707307564919465*^9, 3.707307565185091*^9}, {3.7073077014209213`*^9, 
   3.7073077184836025`*^9}, {3.7073077729529357`*^9, 3.707307820306341*^9}, {
   3.707418400290495*^9, 3.70741840216482*^9}, {3.70741901496215*^9, 
   3.7074190212716007`*^9}, {3.7074202569848766`*^9, 
   3.7074202592314663`*^9}, {3.7074233048391542`*^9, 
   3.7074233082336025`*^9}, {3.7080042388230333`*^9, 3.708004239485157*^9}, {
   3.7080051218084927`*^9, 3.7080051457062054`*^9}, {3.7082065443794985`*^9, 
   3.7082065471451883`*^9}},ExpressionUUID->"d2b97b22-fb2b-4fa6-9c3f-\
bf1950d81411"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"genexamples", "=", 
  RowBox[{"Lookup", "[", 
   RowBox[{"allexamples", ",", "\"\<Applications\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7073075926072593`*^9, 3.70730761492*^9}, {
   3.707391965858786*^9, 3.7073919714518204`*^9}, {3.7074008906479635`*^9, 
   3.7074008986489596`*^9}, {3.7074233286119766`*^9, 3.707423329489604*^9}, 
   3.7074246556625133`*^9, {3.707429437798353*^9, 3.7074294481568165`*^9}, {
   3.708004254328376*^9, 3.7080042578264837`*^9}, {3.7080051698913803`*^9, 
   3.7080051748379083`*^9}},ExpressionUUID->"94aa9252-cea1-4947-837f-\
529952657999"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{Cell[BoxData[
    RowBox[{"Subsets", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", "3", "}"}]}], "]"}]], "Input",
    ShowStringCharacters->True,ExpressionUUID->
    "e32209de-1256-40c7-a0cc-092571e7cda2"], ",", Cell[BoxData[
    RowBox[{"Binomial", "[", 
     RowBox[{"4", ",", "3"}], "]"}]], "Input",
    ShowStringCharacters->True,ExpressionUUID->
    "adeefe51-0f50-430b-acd7-1ef6deee0bd5"], ",", Cell[BoxData[
    RowBox[{"Graphics", "[", 
     RowBox[{"Line", "[", 
      RowBox[{"Subsets", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Cos", "[", 
             RowBox[{"2", "Pi", " ", 
              RowBox[{"i", "/", "8"}]}], "]"}], ",", 
            RowBox[{"Sin", "[", 
             RowBox[{"2", " ", "Pi", " ", 
              RowBox[{"i", "/", "8"}]}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "8"}], "}"}]}], "]"}], ",", 
        RowBox[{"{", "2", "}"}]}], "]"}], "]"}], "]"}]], "Input",
    ShowStringCharacters->True,ExpressionUUID->
    "adc85670-0184-4dae-bf75-27b318203422"], ",", Cell[BoxData[
    RowBox[{"Total", "[", 
     RowBox[{"Subsets", "[", 
      RowBox[{
       RowBox[{"Times", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "]"}], ",", 
       RowBox[{"{", "3", "}"}]}], "]"}], "]"}]], "Input",
    ShowStringCharacters->True,ExpressionUUID->
    "62e8f18b-8315-48b7-b6ef-6168e64a71b6"], ",", Cell[BoxData[
    RowBox[{"Subsets", "[", 
     RowBox[{"Divisors", "[", "10", "]"}], "]"}]], "Input",
    ShowStringCharacters->True,ExpressionUUID->
    "9ea77f9c-380d-4ad5-a2fc-b7cecdf03e54"], ",", Cell[BoxData[
    RowBox[{"Subsets", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4", ",", "8", ",", "16"}], "}"}], ",", 
      RowBox[{"{", "3", "}"}]}], "]"}]], "Input",
    ShowStringCharacters->True,ExpressionUUID->
    "466454f2-ea2f-432e-9ab9-ab7e301808db"], ",", Cell[BoxData[
    RowBox[{"Total", "/@", "%"}]], "Input",
    ShowStringCharacters->True,ExpressionUUID->
    "a118c0d5-a4ed-4c33-9a35-aefd7a9d855d"], ",", Cell[BoxData[
    RowBox[{"Graphics3D", "[", 
     RowBox[{"Line", "/@", 
      RowBox[{"Subsets", "[", 
       RowBox[{
        RowBox[{"RandomReal", "[", 
         RowBox[{"100", ",", 
          RowBox[{"{", 
           RowBox[{"20", ",", "3"}], "}"}]}], "]"}], ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]], "Input",
    ShowStringCharacters->True,ExpressionUUID->
    "bfc96cb3-d029-49dc-bbcc-5420ff155712"], ",", Cell[BoxData[
    RowBox[{"Graphics3D", "[", 
     RowBox[{"Line", "[", 
      RowBox[{"Subsets", "[", 
       RowBox[{
        RowBox[{"Tuples", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", "3"}], "]"}], ",", 
        RowBox[{"{", "2", "}"}]}], "]"}], "]"}], "]"}]], "Input",
    ShowStringCharacters->True,ExpressionUUID->
    "4e6f34c4-a751-4671-82b6-c5111a012b63"]}], "}"}]], "Output",
 CellChangeTimes->{{3.7074294380961914`*^9, 3.707429448330905*^9}, {
   3.7080042431990576`*^9, 3.708004258048001*^9}, {3.7080051626211004`*^9, 
   3.708005175767864*^9}, 3.708016621082444*^9, 
   3.708206301010993*^9},ExpressionUUID->"db18db78-394f-44a5-bd7c-\
83b95784f7fa"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"curatedgenexamples", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"NotebookImport", "[", 
       RowBox[{
        RowBox[{"Notebook", "[", 
         RowBox[{"{", 
          RowBox[{"genexamples", "[", 
           RowBox[{"[", 
            RowBox[{"#", ",", "1"}], "]"}], "]"}], "}"}], "]"}], ",", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<InputText\>\""}]}], "]"}], 
      "&"}], "/@", 
     RowBox[{"Range", "[", 
      RowBox[{"Length", "[", "genexamples", "]"}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.707308018621872*^9, 3.7073081305561094`*^9}, 
   3.707424647685878*^9},ExpressionUUID->"238c7d5a-18f7-41cb-a213-\
5a8ff0ecfaa8"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"oneexample", "=", 
   RowBox[{"curatedgenexamples", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"input", "=", 
   RowBox[{"StringDelete", "[", 
    RowBox[{"oneexample", ",", "WhitespaceCharacter"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"removed", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringDrop", "[", 
      RowBox[{"input", ",", 
       RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", 
     RowBox[{"StringLength", "[", "input", "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"syntaxCorrector", "[", 
     RowBox[{"#", ",", "True", ",", "20"}], "]"}], "&"}], "/@", "removed"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.708004289960766*^9, 3.7080043001905584`*^9}, 
   3.7080044250467815`*^9, {3.7080047335404396`*^9, 3.708004740833805*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"8de62f34-b9bb-4aa3-9d46-2875177d84b2"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening bracket missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "{1,2,3,4},{3}]"
            }],ExpressionUUID->"cca4f333-87a1-4fbd-a225-d317449fafa7"],
            TextCell[
             Row[{"Subsets", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "{1,2,3,4},{3}]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening brace missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "1,2,3,4},{3}]"
            }],ExpressionUUID->"f85bcf76-9db6-4468-8148-a22955d7cb2e"],
            TextCell[
             Row[{"Subsets[", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "1,2,3,4},{3}]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",2,3,4},{3}]"
            }],ExpressionUUID->"02190a2c-1394-497e-8b31-24251e521be1"],
            TextCell[
             Row[{"Subsets[{", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",2,3,4},{3}]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",3,4},{3}]"
            }],ExpressionUUID->"14fbfee8-4bcb-45d1-982e-8c368f1b9201"],
            TextCell[
             Row[{"Subsets[{1,", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",3,4},{3}]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",4},{3}]"
            }],ExpressionUUID->"42b44d50-8e56-45ad-864a-499a0b88bda3"],
            TextCell[
             Row[{"Subsets[{1,2,", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",4},{3}]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "},{3}]"
            }],ExpressionUUID->"e2012c69-aa71-4fea-b946-f3f78b4eff31"],
            TextCell[
             Row[{"Subsets[{1,2,3,", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "},{3}]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing brace missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "3,4,{3}]"
            }],ExpressionUUID->"20ba93e0-9dcd-43cc-b1eb-89d76e3ac522"],
            TextCell[
             Row[{"Subsets[{1,2,", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "3,4,{3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",4,{3}]"
            }],ExpressionUUID->"f289386b-11e5-484f-8b4e-f548c64c967e"],
            TextCell[
             Row[{"Subsets[{1,2,3", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",4,{3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",{3}]"
            }],ExpressionUUID->"f6006d91-b0f4-4271-b090-984200c02cf7"],
            TextCell[
             Row[{"Subsets[{1,2,3,4", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4,{",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "3}]"
            }],ExpressionUUID->"e81ad4b0-c7ef-4961-a41e-6e6fe1f64fa1"],
            TextCell[
             Row[{"Subsets[{1,2,3,4,{", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4,{3",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "}]"
            }],ExpressionUUID->"52349a2c-4738-4389-b62f-c32d62f1bdb6"],
            TextCell[
             Row[{"Subsets[{1,2,3,4,{3", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4,{3}",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]"
            }],ExpressionUUID->"9670acfc-fe4d-48dd-b89f-ff134b05a825"],
            TextCell[
             Row[{"Subsets[{1,2,3,4,{3}", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or number Missed\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening brace missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "{1,2,3,4},3}]"
            }],ExpressionUUID->"270f8202-2f5b-4ebd-91e4-e70173ec8c29"],
            TextCell[
             Row[{"Subsets[", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "{1,2,3,4},3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "1,2,3,4},3}]"
            }],ExpressionUUID->"520526e5-1cc0-4a16-9aef-1d202536256c"],
            TextCell[
             Row[{"Subsets[{", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "1,2,3,4},3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "2,3,4},3}]"
            }],ExpressionUUID->"ffbedf4a-dbfb-4307-bb47-91330ecc227d"],
            TextCell[
             Row[{"Subsets[{1,", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "2,3,4},3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "3,4},3}]"
            }],ExpressionUUID->"40ef2095-8547-402c-b8a8-a5ea46f26fda"],
            TextCell[
             Row[{"Subsets[{1,2,", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "3,4},3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "4},3}]"
            }],ExpressionUUID->"b845928e-b881-4220-9c79-62e54fa35da9"],
            TextCell[
             Row[{"Subsets[{1,2,3,", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "4},3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "},3}]"
            }],ExpressionUUID->"f44eccb5-3b54-4e7a-b4de-48a2a6a225a4"],
            TextCell[
             Row[{"Subsets[{1,2,3,4", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "},3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4},",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "3}]"
            }],ExpressionUUID->"73de2af7-5ebb-4868-8bc8-d9330c5eccd0"],
            TextCell[
             Row[{"Subsets[{1,2,3,4},", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "3}]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "[{1,2,3,4},{}]"
            }],ExpressionUUID->"6ecdb477-24bc-4e9f-838e-221bcbc2de2c"],
            TextCell[
             Row[{"Subsets", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "[{1,2,3,4},{}]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing brace missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4},{3",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]"
            }],ExpressionUUID->"69164a8a-1499-45bb-b67f-a37666bbcba0"],
            TextCell[
             Row[{"Subsets[{1,2,3,4},{3", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing bracket missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4},{3}",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]]
            }],ExpressionUUID->"8b1bd21a-a68a-4176-9fd1-a514eb881eab"],
            TextCell[
             Row[{"Subsets[{1,2,3,4},{3}", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.7080044072270374`*^9, 3.7080044255112014`*^9}, 
   3.7080047413104353`*^9, 3.7080166218744926`*^9, 
   3.708206307660701*^9},ExpressionUUID->"84df31bd-5364-419a-b6e9-\
4c34e42bb0e4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"oneexample", "=", 
   RowBox[{"curatedgenexamples", "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"input", "=", 
   RowBox[{"StringDelete", "[", 
    RowBox[{"oneexample", ",", "WhitespaceCharacter"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"removed", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringDrop", "[", 
      RowBox[{"input", ",", 
       RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", 
     RowBox[{"StringLength", "[", "input", "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"syntaxCorrector", "[", 
     RowBox[{"#", ",", "True", ",", "20"}], "]"}], "&"}], "/@", "removed"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.708004833503882*^9, 3.708004833691725*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"b177361d-a186-476e-a534-bbc6f4ebf1b7"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening Bracket Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Binomial",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "4,3]"
            }],ExpressionUUID->"5d762bd8-b147-42dc-b474-43f0690db533"],
            TextCell[
             Row[{"Binomial", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "4,3]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or Number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Binomial[",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",3]"
            }],ExpressionUUID->"4cb2648f-a8b3-48ae-9d0e-4323a3f971fb"],
            TextCell[
             Row[{"Binomial[", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",3]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or Number Missed\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or Number Missed\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing Bracket Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Binomial[4,3",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]]
            }],ExpressionUUID->"2d879e48-a454-4c4b-be3d-fbb229f0f120"],
            TextCell[
             Row[{"Binomial[4,3", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.708004834057625*^9, 3.70800488016195*^9, 
  3.708016622147683*^9},ExpressionUUID->"44ef5e8b-aecc-4f97-b357-\
836ea1405821"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"oneexample", "=", 
   RowBox[{"curatedgenexamples", "[", 
    RowBox[{"[", "3", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"input", "=", 
   RowBox[{"StringDelete", "[", 
    RowBox[{"oneexample", ",", "WhitespaceCharacter"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"removed", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringDrop", "[", 
      RowBox[{"input", ",", 
       RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", 
     RowBox[{"StringLength", "[", "input", "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"syntaxCorrector", "[", 
     RowBox[{"#", ",", "True", ",", "20"}], "]"}], "&"}], "/@", "removed"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.708004916021454*^9, 3.708004916144803*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"5aba85a8-d7d8-47a9-ad3c-6c6322eaea19"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening bracket missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "G",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             
             "raphicsLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]\
]"
            }],ExpressionUUID->"0cd5cabc-b816-452f-9130-4b14585e46fa"],
            TextCell[
             Row[{"G", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "raphicsLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}\
]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Gr",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "aphicsLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"378f6d06-8028-4e48-b422-48c25604fd37"],
            TextCell[
             Row[{"Gr", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "aphicsLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]\
]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Gra",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             
             "phicsLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]\
"
            }],ExpressionUUID->"1d9a76e3-4539-408d-8feb-0e4c504772d5"],
            TextCell[
             Row[{"Gra", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "phicsLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]\
]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Grap",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "hicsLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"f553fb21-853c-4372-b03a-396fe8c122a5"],
            TextCell[
             Row[{"Grap", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "hicsLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]\
"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graph",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "icsLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"f41d9da4-4902-43e7-9d28-b1501bf824d3"],
            TextCell[
             Row[{"Graph", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "icsLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]\
"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphi",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "csLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"526ceead-54b1-497d-83e0-5b76c868a379"],
            TextCell[
             Row[{"Graphi", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "csLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}\
]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphic",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "sLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"3105d386-7dec-427e-9476-0024dbcfe7f1"],
            TextCell[
             Row[{"Graphic", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "sLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]\
]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"5f2ef011-2eb6-4952-89ac-1dd7cd237786"],
            TextCell[
             Row[{"Graphics", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]\
]},
          {
           InterpretationBox[Cell[TextData[{
             "GraphicsL",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "ine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"ac8da88d-5ef5-4fbb-9226-f899c18ea049"],
            TextCell[
             Row[{"GraphicsL", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "ine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]\
},
          {
           InterpretationBox[Cell[TextData[{
             "GraphicsLi",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "ne[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"17998ea9-02eb-46a3-b6be-f0d53c426b52"],
            TextCell[
             Row[{"GraphicsLi", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "ne[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "GraphicsLin",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "e[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"b99e6f48-7126-4d33-8809-ff27a1deca0b"],
            TextCell[
             Row[{"GraphicsLin", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "e[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},\

          {
           InterpretationBox[Cell[TextData[{
             
             "GraphicsLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]\
",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]]"
            }],ExpressionUUID->"cdfb59ac-7dcd-4773-a0a9-66a9b9238989"],
            TextCell[
             
             Row[{"GraphicsLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}]\
,{2}]", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "GraphicsLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]\
]",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]"
            }],ExpressionUUID->"034cba04-bfcb-4db5-b132-1ce95d6942c3"],
            TextCell[
             
             Row[{"GraphicsLine[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}]\
,{2}]]", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening bracket missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[L",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "ineSubsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"e05dca7c-745c-46f5-812a-41666a398442"],
            TextCell[
             Row[{"Graphics[L", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "ineSubsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Li",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "neSubsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"993cc405-55d4-43d9-8e87-397310fa8090"],
            TextCell[
             Row[{"Graphics[Li", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "neSubsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},\

          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Lin",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "eSubsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"94a086bd-6b26-41d7-8e6d-f09d593536fd"],
            TextCell[
             Row[{"Graphics[Lin", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "eSubsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"f45b707d-c6fe-4245-a3db-71a286723139"],
            TextCell[
             Row[{"Graphics[Line", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[LineS",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "ubsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"3b3dfd95-6644-459d-bc7a-8cc58be0caf8"],
            TextCell[
             Row[{"Graphics[LineS", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "ubsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[LineSu",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "bsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"f7a0947e-2225-44af-aaa4-10bd66ddbf64"],
            TextCell[
             Row[{"Graphics[LineSu", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "bsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[LineSub",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "sets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"6ff4ba25-a4e3-42e6-af37-e1257a28f9c1"],
            TextCell[
             Row[{"Graphics[LineSub", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "sets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[LineSubs",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "ets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"5d7cc262-1823-4b1f-a5a0-6aaf428cd626"],
            TextCell[
             Row[{"Graphics[LineSubs", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "ets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[LineSubse",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "ts[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"fc843bd2-357e-4fec-b741-e2f4244d84f1"],
            TextCell[
             Row[{"Graphics[LineSubse", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "ts[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[LineSubset",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "s[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"32e8eb93-4373-4f4a-9ed4-102b6c5d85be"],
            TextCell[
             Row[{"Graphics[LineSubset", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "s[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[LineSubsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]]]"
            }],ExpressionUUID->"d728f1bd-26da-4f8b-a0e4-5d6c39a9a378"],
            TextCell[
             
             Row[{"Graphics[LineSubsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}]\
,{2}", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[LineSubsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]\
",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]]"
            }],ExpressionUUID->"9e835917-6f78-4147-b899-fa60ce5a45f2"],
            TextCell[
             
             Row[{"Graphics[LineSubsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}]\
,{2}]", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[LineSubsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]\
]",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]"
            }],ExpressionUUID->"0a37c449-98aa-4d2a-8414-dd502b4512a7"],
            TextCell[
             
             Row[{"Graphics[LineSubsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}]\
,{2}]]", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening bracket missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[S",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "ubsetsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"ecfe0a42-e967-474a-baa4-576da318e62b"],
            TextCell[
             Row[{"Graphics[Line[S", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "ubsetsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Su",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "bsetsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"8ee88399-0bdc-451c-8305-c1efa1bb23f3"],
            TextCell[
             Row[{"Graphics[Line[Su", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "bsetsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Sub",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "setsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"a4d3f311-c565-40f6-a8ce-960e26257b07"],
            TextCell[
             Row[{"Graphics[Line[Sub", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "setsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subs",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "etsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"4210a7dc-42cc-4acc-bdf7-9a48fbff9d7d"],
            TextCell[
             Row[{"Graphics[Line[Subs", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "etsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subse",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "tsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"bdb7171a-9450-45d8-88d3-4bfc23b9d824"],
            TextCell[
             Row[{"Graphics[Line[Subse", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "tsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subset",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "sTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"cf1b4571-b532-4a37-9b1b-e4f6dc3f1685"],
            TextCell[
             Row[{"Graphics[Line[Subset", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "sTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"0fb65659-7fb5-48e8-8c14-a3e9ab0a1b6c"],
            TextCell[
             Row[{"Graphics[Line[Subsets", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[SubsetsT",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "able[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"4957d753-1926-4ce5-b660-62074b5eaae3"],
            TextCell[
             Row[{"Graphics[Line[SubsetsT", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "able[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[SubsetsTa",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "ble[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"8210b004-568e-404e-ba66-0c632d4c5a66"],
            TextCell[
             Row[{"Graphics[Line[SubsetsTa", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "ble[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[SubsetsTab",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "le[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"14c75d55-2b87-4804-ba24-dcb86412b424"],
            TextCell[
             Row[{"Graphics[Line[SubsetsTab", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "le[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[SubsetsTabl",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "e[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"497b05b8-33a8-43fe-bd8e-bbbeb27e4330"],
            TextCell[
             Row[{"Graphics[Line[SubsetsTabl", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "e[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[SubsetsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "],{2}]]]"
            }],ExpressionUUID->"f192fe4b-ca24-4a5b-8059-36b45a651763"],
            TextCell[
             
             Row[{"Graphics[Line[SubsetsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[SubsetsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]]]"
            }],ExpressionUUID->"31931b27-de78-4820-aecd-8f75c695b47a"],
            TextCell[
             
             Row[{"Graphics[Line[SubsetsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}]\
,{2}", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[Line[SubsetsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]\
",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]]"
            }],ExpressionUUID->"9a9e4f58-8404-4e38-8e04-378cff590fe5"],
            TextCell[
             
             Row[{"Graphics[Line[SubsetsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}]\
,{2}]", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[Line[SubsetsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]\
]",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]"
            }],ExpressionUUID->"88b820bc-9068-4999-927a-8b0365f5eef7"],
            TextCell[
             
             Row[{"Graphics[Line[SubsetsTable[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}]\
,{2}]]", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening bracket missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"dd12d662-18f5-4249-bffc-a91721cb6c3c"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening brace missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"ec4f10bb-544e-4e0c-8638-ec9fa26a0c2f"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[Cos[2Pii/8],Sin[2Pii/8]",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "},{i,8}],{2}]]]"
            }],ExpressionUUID->"21f17678-35c0-466f-ad08-7845f8e2eae8"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[Cos[2Pii/8],Sin[2Pii/8]", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "},{i,8}],{2}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening bracket missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{C",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "os2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"3d4cfc19-15dc-4a5c-9275-d9c772992246"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{C", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "os2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Co",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "s2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"f488a75c-b725-4c27-87b9-bb7bd1b2da9e"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Co", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "s2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"a0cec968-99ce-41e1-8e30-6225870fdccc"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos2",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"11f2abce-d63e-4e4c-84a7-002983e006cf"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos2", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Pii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos2P",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "ii/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"d3784d82-8bbd-4960-904c-14fec80d74b8"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos2P", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "ii/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos2Pi",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "i/8],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"ca7fd224-66ca-440c-acc4-e97bb68982fb"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos2Pi", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "i/8],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos2Pii/8",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"c714d458-ba7e-49a1-8113-230fa0b7cd40"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos2Pii/8", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "],Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"64073694-9cc3-4caa-8273-f95e26784ddd"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "],Sin[2Pii/8]},{i,8}],{2}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing bracket missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Pii/8,Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"6d715525-3936-483f-83cc-72c23629ebce"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Pii/8,Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2P",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "ii/8,Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"a196d4ff-b19c-4a98-96ad-66dd7edc11bd"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2P", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "ii/8,Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pi",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "i/8,Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"0661226a-d04a-4817-9e52-b88e6821ffbe"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pi", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "i/8,Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "/8,Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"cb512de0-3612-485e-8df6-feee0413e231"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "/8,Sin[2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",Sin[2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"0b7f5d55-9324-4538-a9d7-2b7dee311a7c"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               ",Sin[2Pii/8]},{i,8}],{2}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening bracket missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],S",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "in2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"46db4a6b-4c65-456c-bb63-d023bea5e922"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],S", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "in2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Si",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "n2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"9a4e1d51-7116-4884-99c8-43207746e3c5"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Si", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "n2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "2Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"fb977b4b-2995-416c-95c3-366d144dee12"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "2Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin2",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Pii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"e6004233-cc86-43b3-bd06-0a345f72826b"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin2", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Pii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin2P",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "ii/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"32bb007e-f82b-4e0a-a56e-ba1a6c000f1f"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin2P", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "ii/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin2Pi",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "i/8]},{i,8}],{2}]]]"
            }],ExpressionUUID->"759576e7-7425-4a5e-9098-dfdbc771d6ae"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin2Pi", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "i/8]},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin2Pii/8",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]},{i,8}],{2}]]]"
            }],ExpressionUUID->"5337e8e1-6ec3-484a-8345-190e301f9a7f"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin2Pii/8", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "]},{i,8}],{2}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]},{i,8}],{2}]]]"
            }],ExpressionUUID->"c34f5ca2-9c94-4c69-9c5b-665496b8cfe8"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "]},{i,8}],{2}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing bracket missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Pii/8},{i,8}],{2}]]]"
            }],ExpressionUUID->"e8ba7beb-f020-4beb-9e4a-81b77dc587e4"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Pii/8},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2P",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "ii/8},{i,8}],{2}]]]"
            }],ExpressionUUID->"32f47506-d345-4286-85ca-e5fa2d94f07c"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2P", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "ii/8},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pi",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "i/8},{i,8}],{2}]]]"
            }],ExpressionUUID->"1749d583-a198-4821-ad7b-4ef64e5c70ad"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pi", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "i/8},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "/8},{i,8}],{2}]]]"
            }],ExpressionUUID->"91f403c2-0707-4b9c-b2d3-afdbe6f5aa2d"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "/8},{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "},{i,8}],{2}]]]"
            }],ExpressionUUID->"1625235b-262a-40a4-9f60-44069764fbc4"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "},{i,8}],{2}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing brace missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "[2Pii/8],{i,8}],{2}]]]"
            }],ExpressionUUID->"c8504322-1306-4f6e-baf8-e87fc14f77f5"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "[2Pii/8],{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",{i,8}],{2}]]]"
            }],ExpressionUUID->"a260e764-d1c2-4ad4-86d1-ef7a8208cee1"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               ",{i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8],{",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "i,8}],{2}]]]"
            }],ExpressionUUID->"434a825b-ce52-45aa-9ccf-66b4d1cc6f5c"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8],{", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8],{i",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",8}],{2}]]]"
            }],ExpressionUUID->"418f8a83-5fe6-4fc3-94a2-703831464187"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8],{i", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8],{i,8",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "}],{2}]]]"
            }],ExpressionUUID->"ae4d1c00-42aa-4489-a1ca-91a219b58399"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8],{i,8", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8],{i,8}",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "],{2}]]]"
            }],ExpressionUUID->"5ed4db27-e891-4ed6-934c-91a67d695e4f"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8],{i,8}\
", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "],{2}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening brace missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "{Cos[2Pii/8],Sin[2Pii/8]},i,8}],{2}]]]"
            }],ExpressionUUID->"ebd97b72-0baa-4fcb-a74d-66d42db6a1d5"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "{Cos[2Pii/8],Sin[2Pii/8]},i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Cos[2Pii/8],Sin[2Pii/8]},i,8}],{2}]]]"
            }],ExpressionUUID->"b82fb3c8-1366-4ada-b017-0aaf3e29a81d"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Cos[2Pii/8],Sin[2Pii/8]},i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Sin[2Pii/8]},i,8}],{2}]]]"
            }],ExpressionUUID->"57aa61b5-8b59-4cb4-ac77-8316d376e79e"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Sin[2Pii/8]},i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "},i,8}],{2}]]]"
            }],ExpressionUUID->"bd3d2147-e51e-454f-8525-277129c4ffba"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "},i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "i,8}],{2}]]]"
            }],ExpressionUUID->"46916015-bd2f-46ef-93a4-f1e21b5c13d5"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "i,8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},i",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",8}],{2}]]]"
            }],ExpressionUUID->"8bb3e656-67f9-486b-9859-94fcfadd59ab"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},i", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",8}],{2}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Table[{Cos[2Pii/8],Sin[2Pii/8]},{i8}],{2}]]]"
            }],ExpressionUUID->"b66c4262-e522-4113-8ef6-64dae80c444a"],
            TextCell[
             Row[{"Graphics[Line[Subsets[", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Table[{Cos[2Pii/8],Sin[2Pii/8]},{i8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "[{Cos[2Pii/8],Sin[2Pii/8]},{i8}],{2}]]]"
            }],ExpressionUUID->"5bb12dd0-7c7f-4c2e-bf93-f2d8bae2cef0"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "[{Cos[2Pii/8],Sin[2Pii/8]},{i8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "{i8}],{2}]]]"
            }],ExpressionUUID->"e13d55cb-a742-49cf-8cd7-14773dd3362f"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "{i8}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i8}",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "],{2}]]]"
            }],ExpressionUUID->"9d780332-fd1a-4172-b56e-4a25900e5c55"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i8}\
", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "],{2}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "{i,}],{2}]]]"
            }],ExpressionUUID->"c3fc4356-fded-4142-a6ea-9c25b40542e5"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "{i,}],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,}",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "],{2}]]]"
            }],ExpressionUUID->"8fcd9f51-683d-40fb-be9a-84c59c33dce6"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,}\
", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "],{2}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing brace missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "i,8],{2}]]]"
            }],ExpressionUUID->"30aa5f86-645c-44c8-9edc-9baa8ad6e750"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "i,8],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "8],{2}]]]"
            }],ExpressionUUID->"c3b218ab-43e7-491c-a4bc-e31e989571a1"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "8],{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "],{2}]]]"
            }],ExpressionUUID->"c22c4cb3-7fc9-4099-8c8c-5f5ce3a7e195"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,\
8", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "],{2}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing bracket missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8},{2}]]]"
            }],ExpressionUUID->"38eba5de-79b9-4130-9818-8b6ba4aaffe5"],
            TextCell[
             Row[{"Graphics[", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8},{2}]]]"}]]]\
},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8},{2}]]]"
            }],ExpressionUUID->"4927031e-097d-4f14-9e48-8ac9a9416000"],
            TextCell[
             Row[{"Graphics[Line", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8},{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8},{2}]]]"
            }],ExpressionUUID->"3fbe7027-df78-4875-b427-0454d1f46d2e"],
            TextCell[
             Row[{"Graphics[Line[", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8},{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8},{2}]]]"
            }],ExpressionUUID->"53f07e4a-6998-4128-9899-0bcab1bff2b9"],
            TextCell[
             Row[{"Graphics[Line[Subsets", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8},{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",{2}]]]"
            }],ExpressionUUID->"293dc2c7-8f3b-4532-805e-2785fc1fd1ff"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8},{2}",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]]]"
            }],ExpressionUUID->"c2ec862f-8cdc-41ad-8829-f5fb2023341e"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
,{2}", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8},{2}]\
",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]]"
            }],ExpressionUUID->"a3d1f2f9-604b-4242-894b-3a539c96e6ff"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
,{2}]", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8},{2}]\
]",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]"
            }],ExpressionUUID->"11a97808-9b85-4332-829f-a8702020c192"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
,{2}]]", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8},{2}]\
]]",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]]
            }],ExpressionUUID->"f02e4b92-efcc-4d27-870b-d09104d02485"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
,{2}]]]", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}]{2}]]]"
            }],ExpressionUUID->"65c9a5a1-cf96-45c9-a738-8be5fbdea34a"],
            TextCell[
             Row[{"Graphics[Line[Subsets[", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}]{2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}]{2}]]]"
            }],ExpressionUUID->"53de277f-0f2a-4197-9432-b94f6f9059c8"],
            TextCell[
             Row[{"Graphics[Line[Subsets[Table", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}]{2}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening brace missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],2}]]]"
            }],ExpressionUUID->"369bed1e-7ddc-44a1-b2a7-ee4198144e3c"],
            TextCell[
             Row[{"Graphics[Line[Subsets[", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],2}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "2}]]]"
            }],ExpressionUUID->"36370a5c-2d94-4803-9fc3-2194dbc30b5f"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
],", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "2}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{}]]]"
            }],ExpressionUUID->"20cd492c-be44-4952-94f4-c47ea49888d8"],
            TextCell[
             Row[{"Graphics[Line[", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{}]]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{}]]]"
            }],ExpressionUUID->"20464e09-ab1e-409a-8bfe-3dd1f6ac046c"],
            TextCell[
             Row[{"Graphics[Line[Subsets", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{}]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing brace missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]]]"
            }],ExpressionUUID->"93d39811-cf29-42f9-b2a6-d5a0ca811bf1"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
],{2", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]]]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing bracket missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"
            }],ExpressionUUID->"344af9c1-7752-4377-b770-f6100d3a3068"],
            TextCell[
             Row[{"Graphics[", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"}]]]\
},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"
            }],ExpressionUUID->"b6c719cd-adf5-4a7c-ba8d-1473806bbf5f"],
            TextCell[
             Row[{"Graphics[Line", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"
            }],ExpressionUUID->"4d1656c4-402b-454a-90f4-bc766aef4ee4"],
            TextCell[
             Row[{"Graphics[Line[", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"
            }],ExpressionUUID->"e38dc3d9-7448-40d6-ba1c-29da0a741142"],
            TextCell[
             Row[{"Graphics[Line[Subsets", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "],{2}]]"
            }],ExpressionUUID->"adab7c41-2352-4016-a5a9-c5dfed0b308d"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "],{2}]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}]",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",{2}]]"
            }],ExpressionUUID->"90ffe122-b643-49fb-b0dd-eb12eb438332"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
]", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{2}]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}\
",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]]"
            }],ExpressionUUID->"adeba1d8-a4b0-4a80-9258-79db2fc7ead6"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
],{2}", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}\
]",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]"
            }],ExpressionUUID->"7600c87e-8475-44ea-99d9-f5a98206fa0b"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
],{2}]", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}\
]]",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]]
            }],ExpressionUUID->"339731c9-1f00-45ed-a0d7-4bd609772a03"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
],{2}]]", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing bracket missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"
            }],ExpressionUUID->"34634d0b-c9e7-4909-a0a9-a52a80b77c31"],
            TextCell[
             Row[{"Graphics[", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"}]]]\
},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"
            }],ExpressionUUID->"0eeab91a-fd09-423f-a881-91feed3db444"],
            TextCell[
             Row[{"Graphics[Line", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"
            }],ExpressionUUID->"6b2ce0ee-204c-46af-a8d4-3bc9744d8647"],
            TextCell[
             Row[{"Graphics[Line[", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"
            }],ExpressionUUID->"68c320a9-1bb9-49c7-bb34-38b8a7f47cb7"],
            TextCell[
             Row[{"Graphics[Line[Subsets", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "],{2}]]"
            }],ExpressionUUID->"603406ce-aede-4c48-9cf1-dc8bb9ddb25d"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "],{2}]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}]",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",{2}]]"
            }],ExpressionUUID->"0440b66e-9253-44b3-ae4b-7e8fc75b4cc4"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
]", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{2}]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}\
",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]]"
            }],ExpressionUUID->"51a8d987-099f-451b-9240-5c72a138588c"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
],{2}", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}\
]",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]"
            }],ExpressionUUID->"5145ed08-5ed2-44db-b979-43f70cf7df84"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
],{2}]", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}\
]]",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]]
            }],ExpressionUUID->"6f408811-d157-4f84-906a-2fbd44b7b61a"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
],{2}]]", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing bracket missing\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"
            }],ExpressionUUID->"f1cdab36-d99b-46e5-ac63-6190a815fe74"],
            TextCell[
             Row[{"Graphics[", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"}]]]\
},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"
            }],ExpressionUUID->"00c8c0b2-5126-4a0a-99a6-0749625d495b"],
            TextCell[
             Row[{"Graphics[Line", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"
            }],ExpressionUUID->"4db93e72-84f6-47fe-a107-e9684ad58fa8"],
            TextCell[
             Row[{"Graphics[Line[", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"
            }],ExpressionUUID->"beb65f3b-b68a-402d-99c9-c83de414afa6"],
            TextCell[
             Row[{"Graphics[Line[Subsets", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "],{2}]]"
            }],ExpressionUUID->"cca26188-b3bb-4dad-9cb5-9c80dfe1873c"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "],{2}]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}]",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",{2}]]"
            }],ExpressionUUID->"91debfa6-308f-4b11-abda-40f0ab7ccedc"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
]", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{2}]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}\
",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]]"
            }],ExpressionUUID->"8f153027-dda6-4c10-ae10-b8d6fbb54940"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
],{2}", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}\
]",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]"
            }],ExpressionUUID->"ffd9dd6a-2405-483d-ad14-ec6343b8edbf"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
],{2}]", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             
             "Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}],{2}\
]]",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]]
            }],ExpressionUUID->"768d3a3e-a7b1-4913-b494-e034821b200c"],
            TextCell[
             
             Row[{"Graphics[Line[Subsets[Table[{Cos[2Pii/8],Sin[2Pii/8]},{i,8}\
],{2}]]", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.708004916751731*^9, 3.70801662373588*^9, 
  3.708206571911024*^9},ExpressionUUID->"df7049ef-465c-46aa-aab5-\
cd2ef8eeda70"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"oneexample", "=", 
   RowBox[{"curatedgenexamples", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"input", "=", 
   RowBox[{"StringDelete", "[", 
    RowBox[{"oneexample", ",", "WhitespaceCharacter"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"removed", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringDrop", "[", 
      RowBox[{"input", ",", 
       RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", 
     RowBox[{"StringLength", "[", "input", "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"syntaxCorrector", "[", 
     RowBox[{"#", ",", "True", ",", "20"}], "]"}], "&"}], "/@", "removed"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.7080052548045406`*^9, 3.7080052550366116`*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"15cb42e7-70dd-4407-a753-eabde289ff3b"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening Bracket Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "S",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "ubsets{1,2,3,4},{3}]"
            }],ExpressionUUID->"5f0110de-4dc5-47ca-8166-eddfd196dbd8"],
            TextCell[
             Row[{"S", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "ubsets{1,2,3,4},{3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Su",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "bsets{1,2,3,4},{3}]"
            }],ExpressionUUID->"d75fa50e-28dd-4a64-b339-49632f7a542a"],
            TextCell[
             Row[{"Su", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "bsets{1,2,3,4},{3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Sub",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "sets{1,2,3,4},{3}]"
            }],ExpressionUUID->"559ec2ec-8c7d-4ed1-8098-ee4b0c573f59"],
            TextCell[
             Row[{"Sub", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "sets{1,2,3,4},{3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subs",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "ets{1,2,3,4},{3}]"
            }],ExpressionUUID->"34b22a3c-2715-44ca-923c-6ad4bceded26"],
            TextCell[
             Row[{"Subs", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "ets{1,2,3,4},{3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subse",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "ts{1,2,3,4},{3}]"
            }],ExpressionUUID->"dd21ea80-e993-43aa-8191-64a1ae7791a1"],
            TextCell[
             Row[{"Subse", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "ts{1,2,3,4},{3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subset",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "s{1,2,3,4},{3}]"
            }],ExpressionUUID->"4fe42ca1-def1-4895-a090-e85d46e96c93"],
            TextCell[
             Row[{"Subset", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "s{1,2,3,4},{3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets",
             StyleBox["[",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "{1,2,3,4},{3}]"
            }],ExpressionUUID->"8ec4dc9c-d66a-4662-87fa-b61c92c15a30"],
            TextCell[
             Row[{"Subsets", 
               Style["[", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "{1,2,3,4},{3}]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening Braces Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "1,2,3,4},{3}]"
            }],ExpressionUUID->"dadb922a-b711-473d-b287-4d6f39c6e6a5"],
            TextCell[
             Row[{"Subsets[", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "1,2,3,4},{3}]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or Number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",2,3,4},{3}]"
            }],ExpressionUUID->"0b3a90a6-305a-4f7e-bee5-bfc28f72c1c9"],
            TextCell[
             Row[{"Subsets[{", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",2,3,4},{3}]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or Number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",3,4},{3}]"
            }],ExpressionUUID->"f475ff36-0403-44cf-a96a-9dcc1056da60"],
            TextCell[
             Row[{"Subsets[{1,", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",3,4},{3}]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or Number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",4},{3}]"
            }],ExpressionUUID->"32331863-133e-4681-b976-44f9a59890bf"],
            TextCell[
             Row[{"Subsets[{1,2,", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",4},{3}]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"All Correct!\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or Number Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,",
             StyleBox["\[Placeholder]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "},{3}]"
            }],ExpressionUUID->"2e9f293d-643d-41a5-ad97-097a5d4f703c"],
            TextCell[
             Row[{"Subsets[{1,2,3,", 
               Style["\[Placeholder]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "},{3}]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing Braces Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "3,4,{3}]"
            }],ExpressionUUID->"84304c9d-c6f2-45c6-b450-ba3b98aeffa1"],
            TextCell[
             Row[{"Subsets[{1,2,", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "3,4,{3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",4,{3}]"
            }],ExpressionUUID->"0cb2ac14-2256-45b6-a649-317a056bf54d"],
            TextCell[
             Row[{"Subsets[{1,2,3", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",4,{3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             ",{3}]"
            }],ExpressionUUID->"ce1e5f48-326d-4750-856a-3d2d14a29afa"],
            TextCell[
             Row[{"Subsets[{1,2,3,4", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4,{",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "3}]"
            }],ExpressionUUID->"344f6fa0-1abb-47e0-93c0-83fc2c3ef980"],
            TextCell[
             Row[{"Subsets[{1,2,3,4,{", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4,{3",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "}]"
            }],ExpressionUUID->"0dc269b3-f43b-4529-aa76-290e3be17c8d"],
            TextCell[
             Row[{"Subsets[{1,2,3,4,{3", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4,{3}",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]"
            }],ExpressionUUID->"e6d952ce-fff3-4aaf-b7bd-a05e417a2efe"],
            TextCell[
             Row[{"Subsets[{1,2,3,4,{3}", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or Number Missed\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Opening Braces Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "{1,2,3,4},3}]"
            }],ExpressionUUID->"b9fe9ca8-17fd-4f7f-98a8-ed2b0bb0c2c3"],
            TextCell[
             Row[{"Subsets[", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "{1,2,3,4},3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "1,2,3,4},3}]"
            }],ExpressionUUID->"7c2aa7a6-122c-44a5-9238-b1d7e9e4e8cf"],
            TextCell[
             Row[{"Subsets[{", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], 
               "1,2,3,4},3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "2,3,4},3}]"
            }],ExpressionUUID->"670ab285-d794-42d5-b695-fb8e6b562b4d"],
            TextCell[
             Row[{"Subsets[{1,", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "2,3,4},3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "3,4},3}]"
            }],ExpressionUUID->"6e267419-3b05-4080-b002-f9a485e082a3"],
            TextCell[
             Row[{"Subsets[{1,2,", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "3,4},3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "4},3}]"
            }],ExpressionUUID->"2d04d61b-7b91-448a-9b29-3b1efecf44be"],
            TextCell[
             Row[{"Subsets[{1,2,3,", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "4},3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "},3}]"
            }],ExpressionUUID->"28e58bb2-7f7d-4f14-85c4-c26940846382"],
            TextCell[
             Row[{"Subsets[{1,2,3,4", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "},3}]"}]]]},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4},",
             StyleBox["{",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "3}]"
            }],ExpressionUUID->"2b869082-73ae-4d13-99f3-dc2b06386da2"],
            TextCell[
             Row[{"Subsets[{1,2,3,4},", 
               Style["{", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "3}]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Letter or Number Missed\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing Braces Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4},{3",
             StyleBox["}",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]],
             "]"
            }],ExpressionUUID->"bb882d1b-fa15-48c3-ab3e-f99c787911ea"],
            TextCell[
             Row[{"Subsets[{1,2,3,4},{3", 
               Style["}", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]},
     {
      TagBox[
       TagBox[GridBox[{
          {"\<\"Closing Bracket Missed\"\>"},
          {
           InterpretationBox[Cell[TextData[{
             "Subsets[{1,2,3,4},{3}",
             StyleBox["]",
              StripOnInput->False,
              LineColor->RGBColor[1, 0, 0],
              FrontFaceColor->RGBColor[1, 0, 0],
              BackFaceColor->RGBColor[1, 0, 0],
              GraphicsColor->RGBColor[1, 0, 0],
              FontSize->20,
              FontWeight->Bold,
              FontColor->RGBColor[1, 0, 0]]
            }],ExpressionUUID->"8004a5fa-6cfd-4fc8-99cc-db58a64d9d57"],
            TextCell[
             Row[{"Subsets[{1,2,3,4},{3}", 
               Style["]", 
                RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.70800525564198*^9, 
  3.7080166244433784`*^9},ExpressionUUID->"e44f58fa-f3bb-4fcc-9815-\
0d4419f39557"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Panel Version", "Chapter",
 CellChangeTimes->{{3.708010668833866*^9, 
  3.7080106760489473`*^9}},ExpressionUUID->"f1196f30-59fd-4e45-a7dd-\
49ee538aacab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Panel", "[", "\[IndentingNewLine]", 
  RowBox[{"Style", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Column", "[", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"InputField", "[", 
        RowBox[{
         RowBox[{"Dynamic", "[", "inpstr", "]"}], ",", "String", ",", 
         RowBox[{"ContinuousAction", "\[Rule]", "True"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"InputField", "[", 
        RowBox[{
         RowBox[{"Dynamic", "[", "inpint", "]"}], ",", 
         RowBox[{"ContinuousAction", "\[Rule]", "True"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Dynamic", "[", 
        RowBox[{"Quiet", "[", 
         RowBox[{"syntaxCorrector", "[", 
          RowBox[{"inpstr", ",", "True", ",", "inpint"}], "]"}], "]"}], "]"}],
        ",", "\[IndentingNewLine]", 
       RowBox[{"Dynamic", "[", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"mess", "=", 
            RowBox[{"messagePrinter", "[", "inpstr", "]"}]}], "}"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"ListQ", "[", "mess", "]"}], ",", "mess", ",", 
            "\"\<\>\""}], "]"}]}], "]"}], "]"}]}], "\[IndentingNewLine]", 
      "}"}], "\[IndentingNewLine]", "]"}], ",", 
    RowBox[{"Background", "\[Rule]", "White"}]}], "\[IndentingNewLine]", 
   "]"}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.708094087274889*^9, 
  3.7080941789476705`*^9}},ExpressionUUID->"b3cd7a7e-9ebd-47a6-8fbe-\
4601fa7a4823"],

Cell[BoxData[
 PanelBox[
  StyleBox[
   TagBox[GridBox[{
      {
       InputFieldBox[Dynamic[$CellContext`inpstr], String,
        ContinuousAction->True]},
      {
       InputFieldBox[Dynamic[$CellContext`inpint],
        ContinuousAction->True]},
      {
       DynamicBox[ToBoxes[
         Quiet[
          $CellContext`syntaxCorrector[$CellContext`inpstr, 
           True, $CellContext`inpint]], StandardForm],
        ImageSizeCache->{276., {4., 13.}}]},
      {
       DynamicBox[ToBoxes[
         With[{$CellContext`mess = \
$CellContext`messagePrinter[$CellContext`inpstr]}, 
          If[
           ListQ[$CellContext`mess], $CellContext`mess, ""]], StandardForm],
        ImageSizeCache->{0., {0., 9.}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Column"],
   StripOnInput->False,
   Background->GrayLevel[1]]]], "Output",
 CellChangeTimes->{{3.7080941494630013`*^9, 3.708094179385138*^9}, {
  3.708106795070195*^9, 
  3.7081068037535467`*^9}},ExpressionUUID->"5fa8c2b1-08e5-4580-be20-\
45c82bcb56b9"]
}, {2}]]
}, Closed]],

Cell[CellGroupData[{

Cell["Graphs", "Chapter",
 CellChangeTimes->{{3.708177679147855*^9, 3.7081776853698797`*^9}, 
   3.708209429570535*^9},ExpressionUUID->"dc17e1fb-0e88-48fd-a791-\
4bf93c1ae29a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<Fold[f,x,a,b,c,d}]\>\"", ",", 
     InterpretationBox[Cell[TextData[{
       "Fold[",
       StyleBox["{",
        StripOnInput->False,
        LineColor->RGBColor[1, 0, 0],
        FrontFaceColor->RGBColor[1, 0, 0],
        BackFaceColor->RGBColor[1, 0, 0],
        GraphicsColor->RGBColor[1, 0, 0],
        FontSize->20,
        FontWeight->Bold,
        FontColor->RGBColor[1, 0, 0]],
       "f,x,a,b,c,d}]"
      }],ExpressionUUID->"ff440cf3-e208-4534-83bc-dcc7d6087955"],
      TextCell[
       Row[{"Fold[", 
         Style["{", 
          RGBColor[1, 0, 0], FontSize -> 20, Bold], "f,x,a,b,c,d}]"}]]], ",", 
     
     InterpretationBox[Cell[TextData[{
       "Fold[f,",
       StyleBox["{",
        StripOnInput->False,
        LineColor->RGBColor[1, 0, 0],
        FrontFaceColor->RGBColor[1, 0, 0],
        BackFaceColor->RGBColor[1, 0, 0],
        GraphicsColor->RGBColor[1, 0, 0],
        FontSize->20,
        FontWeight->Bold,
        FontColor->RGBColor[1, 0, 0]],
       "x,a,b,c,d}]"
      }],ExpressionUUID->"e4e9f3bf-2666-406a-be7c-0ab7eb36e99f"],
      TextCell[
       Row[{"Fold[f,", 
         Style["{", 
          RGBColor[1, 0, 0], FontSize -> 20, Bold], "x,a,b,c,d}]"}]]], ",", 
     InterpretationBox[Cell[TextData[{
       "Fold[f,x,",
       StyleBox["{",
        StripOnInput->False,
        LineColor->RGBColor[1, 0, 0],
        FrontFaceColor->RGBColor[1, 0, 0],
        BackFaceColor->RGBColor[1, 0, 0],
        GraphicsColor->RGBColor[1, 0, 0],
        FontSize->20,
        FontWeight->Bold,
        FontColor->RGBColor[1, 0, 0]],
       "a,b,c,d}]"
      }],ExpressionUUID->"006c389e-926c-4210-8d98-6837468c7575"],
      TextCell[
       Row[{"Fold[f,x,", 
         Style["{", 
          RGBColor[1, 0, 0], FontSize -> 20, Bold], "a,b,c,d}]"}]]]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<Fold[f,x,a,b,c,d}]\>\"", "\[Rule]", 
      InterpretationBox[Cell[TextData[{
        "Fold[",
        StyleBox["{",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        "f,x,a,b,c,d}]"
       }],ExpressionUUID->"893cd843-0b89-4e03-a77b-182323da22d8"],
       TextCell[
        Row[{"Fold[", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "f,x,a,b,c,d}]"}]]]}], 
     ",", 
     RowBox[{"\"\<Fold[f,x,a,b,c,d}]\>\"", "\[Rule]", 
      InterpretationBox[Cell[TextData[{
        "Fold[f,",
        StyleBox["{",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        "x,a,b,c,d}]"
       }],ExpressionUUID->"557c9c7a-9ac8-4074-adfa-fa525868ac00"],
       TextCell[
        Row[{"Fold[f,", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "x,a,b,c,d}]"}]]]}], ",", 
     RowBox[{"\"\<Fold[f,x,a,b,c,d}]\>\"", "\[Rule]", 
      InterpretationBox[Cell[TextData[{
        "Fold[f,x,",
        StyleBox["{",
         StripOnInput->False,
         LineColor->RGBColor[1, 0, 0],
         FrontFaceColor->RGBColor[1, 0, 0],
         BackFaceColor->RGBColor[1, 0, 0],
         GraphicsColor->RGBColor[1, 0, 0],
         FontSize->20,
         FontWeight->Bold,
         FontColor->RGBColor[1, 0, 0]],
        "a,b,c,d}]"
       }],ExpressionUUID->"b8c3f2fe-85ca-4e5b-b564-d7c4c4ec2770"],
       TextCell[
        Row[{"Fold[f,x,", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "a,b,c,d}]"}]]]}]}], 
    "}"}], ",", 
   RowBox[{"VertexShapeFunction", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Fold[f,x,a,b,c,d}]\>\"", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Inset", "[", 
         RowBox[{
          RowBox[{"Framed", "[", "\"\<Fold[f,x,a,b,c,d}]\>\"", "]"}], ",", 
          "#"}], "]"}], "&"}], ")"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.7081808892934604`*^9},ExpressionUUID->"b2af409e-19a7-4f96-9821-\
3ebd0ff400ef"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"Fold[f,x,a,b,c,d}]", 
       TextCell[
        Row[{"Fold[", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "f,x,a,b,c,d}]"}]], 
       TextCell[
        Row[{"Fold[f,", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "x,a,b,c,d}]"}]], 
       TextCell[
        Row[{"Fold[f,x,", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "a,b,c,d}]"}]]}, {{{1, 
       2}, {1, 3}, {1, 4}}, Null}, {
      VertexShapeFunction -> {"Fold[f,x,a,b,c,d}]" -> (Inset[
           Framed["Fold[f,x,a,b,c,d}]"], #]& )}}]]}, 
    TagBox[GraphicsGroupBox[{{{
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
          ArrowBox[{{{0.7745966692414834, 0.7745966692414834}, {0., 0.}}, {{
           0.7745966692414834, 0.7745966692414834}, {0.7745966692414834, 
           0.}}, {{0.7745966692414834, 0.7745966692414834}, {
           1.5491933384829668`, 0.}}}, 0.018845521490452433`]}}}, {{
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], InsetBox[
           FrameBox["\<\"Fold[f,x,a,b,c,d}]\"\>",
            StripOnInput->False], {0.7745966692414834, 0.7745966692414834}], 
          DiskBox[{0., 0.}, 0.018845521490452433], 
          DiskBox[{0.7745966692414834, 0.}, 0.018845521490452433], 
          DiskBox[{1.5491933384829668, 0.}, 0.018845521490452433]}}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{
  3.708180890028984*^9},ExpressionUUID->"33dcf932-e4bd-44c8-89a5-\
046440653efe"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"VertexShapeFunction", "\[Rule]", 
  RowBox[{"{", 
   RowBox[{"\"\<Fold[f,x,a,b,c,d}]\>\"", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Inset", "[", 
       RowBox[{
        RowBox[{"Framed", "[", "\"\<Fold[f,x,a,b,c,d}]\>\"", "]"}], ",", 
        "#"}], "]"}], "&"}], ")"}]}], "}"}], 
  RowBox[{"(*", 
   RowBox[{"check", " ", "options", " ", "of", " ", "Framed"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7081808004225388`*^9, 3.7081808780214787`*^9}, {
  3.7081809102332797`*^9, 3.7081809203404484`*^9}, {3.7081850103497334`*^9, 
  3.708185012429216*^9}, {3.7081850643279696`*^9, 
  3.708185073595518*^9}},ExpressionUUID->"a199d87f-5e79-475c-b4ee-\
bfbdeeeaf695"],

Cell[CellGroupData[{

Cell["Example for Poster Session", "Subsubsection",
 CellChangeTimes->{{3.7081870323792305`*^9, 
  3.7081870436672354`*^9}},ExpressionUUID->"cedee528-c24e-4629-960c-\
1371fd150d4b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"input", "=", "\"\<Fold[f,x,{a,b,c}]\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"dropped", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringDrop", "[", 
      RowBox[{"input", ",", 
       RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", 
     RowBox[{"StringLength", "[", "input", "]"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"filtered", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"dropped", ",", 
     RowBox[{
      RowBox[{"Not", "[", 
       RowBox[{"messageAnalysis", "[", "#", "]"}], "]"}], "&"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"corrected", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"syntaxCorrectorWithoutNotation", "[", 
      RowBox[{"#", ",", "True", ",", "20"}], "]"}], "&"}], "/@", 
    "filtered"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"filtocor", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"filtered", "[", 
        RowBox[{"[", "#", "]"}], "]"}], "\[DirectedEdge]", 
       RowBox[{"corrected", "[", 
        RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", 
     RowBox[{"Length", "[", "filtered", "]"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"intofil", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"input", "\[DirectedEdge]", "filtered"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.708185446771778*^9, 3.708185450094136*^9}, {
   3.7081855250151873`*^9, 3.708185535518607*^9}, 3.708185680047398*^9, 
   3.7081857653647985`*^9, {3.7081858355254965`*^9, 3.708185845936865*^9}, {
   3.708185942528249*^9, 3.7081859740185475`*^9}, {3.7081864398023815`*^9, 
   3.7081864573728123`*^9}, {3.708186893297759*^9, 3.708186893802116*^9}, {
   3.7081943827095575`*^9, 3.7081943866703596`*^9}, {3.7082001271976123`*^9, 
   3.7082001326039762`*^9}, {3.7082032549908333`*^9, 3.708203255428285*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"af2f969e-c377-4c60-abae-4eed1436b5e8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Column", "[", "input", "]"}], "\[Rule]", 
  RowBox[{
   RowBox[{"Column", "[", "filtered", "]"}], "\[Rule]", 
   RowBox[{"TableForm", "[", "corrected", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.708196060652709*^9, 3.7081960905288534`*^9}, 
   3.7081996308017244`*^9, {3.7082001381352873`*^9, 
   3.708200152838569*^9}},ExpressionUUID->"a7ba9113-a639-423c-8e87-\
6a1d0a50d835"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Column", "[", "\<\"Fold[f,x,{a,b,c}]\"\>", "]"}], "\[Rule]", 
  RowBox[{
   TagBox[GridBox[{
      {"\<\"Foldf,x,{a,b,c}]\"\>"},
      {"\<\"Fold[f,x,a,b,c}]\"\>"},
      {"\<\"Fold[f,x,{a,b,c]\"\>"},
      {"\<\"Fold[f,x,{a,b,c}\"\>"}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Column"], "\[Rule]", 
   InterpretationBox[GridBox[{
      {
       InterpretationBox[Cell[TextData[{
         "F",
         StyleBox["[",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         "oldf,x,{a,b,c}]"
        }],ExpressionUUID->"1a2827d1-ee87-4d1f-9969-b885e813b589"],
        TextCell[
         Row[{"F", 
           Style["[", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], "oldf,x,{a,b,c}]"}]]], 
       InterpretationBox[Cell[TextData[{
         "Fo",
         StyleBox["[",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         "ldf,x,{a,b,c}]"
        }],ExpressionUUID->"c6fbf041-a7dc-4569-8992-557e3f2ccfc5"],
        TextCell[
         Row[{"Fo", 
           Style["[", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], "ldf,x,{a,b,c}]"}]]], 
       InterpretationBox[Cell[TextData[{
         "Fol",
         StyleBox["[",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         "df,x,{a,b,c}]"
        }],ExpressionUUID->"a3cdbbc2-928c-4092-91b3-33a2d9bc345e"],
        TextCell[
         Row[{"Fol", 
           Style["[", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], "df,x,{a,b,c}]"}]]], 
       InterpretationBox[Cell[TextData[{
         "Fold",
         StyleBox["[",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         "f,x,{a,b,c}]"
        }],ExpressionUUID->"54d0ff2a-e91d-42d4-93c1-a0f68c405b00"],
        TextCell[
         Row[{"Fold", 
           Style["[", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], "f,x,{a,b,c}]"}]]], 
       InterpretationBox[Cell[TextData[{
         "Foldf",
         StyleBox["[",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         ",x,{a,b,c}]"
        }],ExpressionUUID->"21d4bca8-9112-4649-bf12-ea204710c45e"],
        TextCell[
         Row[{"Foldf", 
           Style["[", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], 
           ",x,{a,b,c}]"}]]], "\<\"\"\>"},
      {
       InterpretationBox[Cell[TextData[{
         "Fold[",
         StyleBox["{",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         "f,x,a,b,c}]"
        }],ExpressionUUID->"18074631-1039-44a2-8edb-9ea93256370e"],
        TextCell[
         Row[{"Fold[", 
           Style["{", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], "f,x,a,b,c}]"}]]], 
       InterpretationBox[Cell[TextData[{
         "Fold[f",
         StyleBox["{",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         ",x,a,b,c}]"
        }],ExpressionUUID->"8f7bb33a-124f-47fd-8475-badcbaf0349b"],
        TextCell[
         Row[{"Fold[f", 
           Style["{", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], ",x,a,b,c}]"}]]], 
       InterpretationBox[Cell[TextData[{
         "Fold[f,",
         StyleBox["{",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         "x,a,b,c}]"
        }],ExpressionUUID->"f210e790-9ce7-4c37-94b1-fa783a3c1ab9"],
        TextCell[
         Row[{"Fold[f,", 
           Style["{", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], "x,a,b,c}]"}]]], 
       InterpretationBox[Cell[TextData[{
         "Fold[f,x",
         StyleBox["{",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         ",a,b,c}]"
        }],ExpressionUUID->"bb75a45a-8ae1-4187-be7b-89db2786e0bd"],
        TextCell[
         Row[{"Fold[f,x", 
           Style["{", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], ",a,b,c}]"}]]], 
       InterpretationBox[Cell[TextData[{
         "Fold[f,x,",
         StyleBox["{",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         "a,b,c}]"
        }],ExpressionUUID->"b3a760b2-4653-44eb-8bc3-cdad3f01761a"],
        TextCell[
         Row[{"Fold[f,x,", 
           Style["{", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], "a,b,c}]"}]]], 
       InterpretationBox[Cell[TextData[{
         "Fold[f,x,a",
         StyleBox["{",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         ",b,c}]"
        }],ExpressionUUID->"65f4f731-140c-4ef3-98d8-01ad26702f4e"],
        TextCell[
         Row[{"Fold[f,x,a", 
           Style["{", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], ",b,c}]"}]]]},
      {
       InterpretationBox[Cell[TextData[{
         "Fold[f,x,{a,b,",
         StyleBox["}",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         "c]"
        }],ExpressionUUID->"809d316e-131f-462e-940b-63726074e5d0"],
        TextCell[
         Row[{"Fold[f,x,{a,b,", 
           Style["}", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], "c]"}]]], 
       InterpretationBox[Cell[TextData[{
         "Fold[f,x,{a,b,c",
         StyleBox["}",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]],
         "]"
        }],ExpressionUUID->"76465863-4661-4ed7-88eb-425bd351de60"],
        TextCell[
         Row[{"Fold[f,x,{a,b,c", 
           Style["}", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], 
           "]"}]]], "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
      {
       InterpretationBox[Cell[TextData[{
         "Fold[f,x,{a,b,c}",
         StyleBox["]",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->20,
          FontWeight->Bold,
          FontColor->RGBColor[1, 0, 0]]
        }],ExpressionUUID->"2c16758b-1afc-4866-a144-aec160249416"],
        TextCell[
         Row[{"Fold[f,x,{a,b,c}", 
           Style["]", 
            RGBColor[1, 0, 0], FontSize -> 20, Bold], 
           ""}]]], "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>"}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[2.0999999999999996`]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    TableForm[{{
       TextCell[
        Row[{"F", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "oldf,x,{a,b,c}]"}]], 
       TextCell[
        Row[{"Fo", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "ldf,x,{a,b,c}]"}]], 
       TextCell[
        Row[{"Fol", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "df,x,{a,b,c}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "f,x,{a,b,c}]"}]], 
       TextCell[
        Row[{"Foldf", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",x,{a,b,c}]"}]]}, {
       TextCell[
        Row[{"Fold[", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "f,x,a,b,c}]"}]], 
       TextCell[
        Row[{"Fold[f", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",x,a,b,c}]"}]], 
       TextCell[
        Row[{"Fold[f,", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "x,a,b,c}]"}]], 
       TextCell[
        Row[{"Fold[f,x", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",a,b,c}]"}]], 
       TextCell[
        Row[{"Fold[f,x,", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "a,b,c}]"}]], 
       TextCell[
        Row[{"Fold[f,x,a", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",b,c}]"}]]}, {
       TextCell[
        Row[{"Fold[f,x,{a,b,", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "c]"}]], 
       TextCell[
        Row[{"Fold[f,x,{a,b,c", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]}, {
       TextCell[
        Row[{"Fold[f,x,{a,b,c}", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]}}]]}]}]], "Output",\

 CellChangeTimes->{{3.708200138510249*^9, 
  3.708200153119765*^9}},ExpressionUUID->"68d168c3-0c94-4541-bb56-\
8d8f1c0f3da3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"graph", "=", 
  RowBox[{"Rasterize", "[", 
   RowBox[{
    RowBox[{"Graph", "[", 
     RowBox[{
      RowBox[{"Flatten", "@", 
       RowBox[{"{", 
        RowBox[{"intofil", ",", "filtocor"}], "}"}]}], ",", 
      RowBox[{"GraphLayout", "\[Rule]", "\"\<SpringEmbedding\>\""}], ",", 
      RowBox[{"VertexLabels", "\[Rule]", 
       RowBox[{"Placed", "[", 
        RowBox[{"\"\<Name\>\"", ",", "Above"}], "]"}]}], ",", 
      RowBox[{"VertexLabelStyle", "\[Rule]", 
       RowBox[{"Directive", "[", 
        RowBox[{
         RowBox[{"FontSize", "->", "18"}], ",", 
         RowBox[{"Background", "\[Rule]", "White"}]}], "]"}]}], ",", 
      RowBox[{"ImageSize", "\[Rule]", "600"}]}], "]"}], ",", 
    RowBox[{"RasterSize", "\[Rule]", "1000"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "400"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.7082032908818455`*^9, {3.708203326397849*^9, 3.7082033443979845`*^9}, {
   3.708203501680913*^9, 3.7082035020716*^9}, {3.708203536118781*^9, 
   3.708203558587827*^9}},ExpressionUUID->"4317adfd-6a03-4558-b024-\
87518e7ba7e3"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
BXs81PuELvuI5PxngmqWbTLDt+2AdtPT05991ramrnFlpG7DlrbtO3Zt2rpj
VW1TTW3D5tZWkeeNtVP39Y8+mpvXXSyAwHGREY3YWUqoVI6QN0km8saDq/+l
F+zxUO+Du/QIkNvhiAgAXbEkd7cBeolY3tSyvqZ+/Vfd3/45eSX38U3/cG3j
xtr6ppXrfsVtKQDccpURf8qdJaVKxQgHIx9ye+RgCduwtzktQ7076uR2eGbx
5XLf0ISI7oeGz9MCGqi8dDq9cdMvGzb8Kv7d3wtCu/EYSFzY+pvf1qxt+L+T
/4/uYgEElLuM+PZVpU2El4+Qm9s9S66lF+zpUO+OumQYcjtcWX712li9ZX98
jCUXgUpaWlpqb2+P1Db9cfBvpqE9G91rGzdubm19/Pix7pIBvFNa7Cq6PdF8
mOzTzP847w7Id/HQdFq1vFjJn2Q3nB2m+HdKeb6d3C4/RiZFSzZX8EyzA2Zj
X5R1ydM9uR1lYzSL3tt3iiYzQMVMT0/XNzRHd3cpQrvx6DxwZPXaxqGhId0l
A3jHdewq7igiD+/y3F7UIeb908qV21V51tmzf2KR2+UHKXJwzGxk69xuPqRJ
dYrKpWWZ/i0gt6OcjG4V4jFzM6O7FqAqJBKJmtqGP/zpO8vcfuSv/6hZ29zZ
2am7ZADvuIxd5nlbFgAluV0xSCQaLVdutyzH/LnWud1+PJYfK6vcHlUcsoLt
SytX/uzkHwDI7SiXdGaOJjNAxfT29q6M1A0kLljmdvFo/mT7upZNyR9+LHik
rty5fX+2+MGyyFAraD3a2rpF/Dq39SjUXMUu2ZI8st83Dcp2Bik1t8uYFGSa
2i1FV8hze05szyvL9gSVD+THJHcwW6XnDJX7/A+/LfsagtyOMnryfIEmM0Bl
7NmzZ2VNg53QLh6tv47+d//9z8S/zVIe4oN539BE8eP46eniTwRnJm+YfiKg
rY12pf8ULFuPelVqiLlurai+OLvCfLJJzlayQdEsD0pSpGe5vaik7AadtarJ
W3RJNgfIbAdz4raz3K48WjaGUuyotF7lRBlyOzySbTIj/kuTGaB8YrHYz2vq
Y8Nn7eT2upbNO3fuXH712jRLX7x6rzh4i4dpSjc+m3v+MN3W0dEp08Ku331Y
vBd0p7dJ/LiNZgLis5WLg2bZenRdUwuTsiy5iF0WV6ZNQrrzy9vmkzw8zO15
FVjcNysfQdm8Xb1ikdVto6a1WjVjtBxL+UTpQVQFd3I7vCOywbHkJfG+IN7f
aTIDlMlfRr6vWdvQeeCIZWgfSFwQCb+3t7es9aQzc8VZeuZmxjR4x0dSxSm9
Z/BsOT4RiIBavC1RgGlhl689KN6LkC0yu/hyub17JHt89vWPHj89bXMfbbYe
FdF9fHy83DsSaO6WIFVmxOInFOdiF4Moiy15uo/jF+fObJc1b1fGbScTcyx3
z+7+u0zZiq9YyO3wmrFEI+uqA6WYf7EocuP1uw9zL4Ab94AfOznR2Lx+09Yd
lrk9ururbl1zcHPUo7l5068JTIP30dEp00v3uUnVq4dIvKbbMi3MV7cSHBo+
X7w7e/tOiaMnPmrJSqL1qIc05XbLzVYit8vn2Fu8Ki+xK1dKNb0HNH9qjie5
3fKH4uhpyteqW1QCXhDnfyNgXL72QHctgK8ZEe7M5A0R8AYSkyL7iUyoiIvG
x+FYLFZT2/C7rw8pQlRv/Pt/+mjtv3zxpQhduvfSd4yPRcWPc1O3ioP38dPT
pildxF3PPxGU+1YC47qK7CFO2vGR1MWr9wpGoPWoh8qY24uvrvsutzuaGv7h
RTZDe9FGTAUjt0sn5JPbUR6Z2WfGm5p4Z9FdC+A7iy+X98fHHCU6keqzd46I
KP7552/vB9zV0Wsan4z5xv/u33/0xb44yytUkv9vJbD55J7BsyLkG9PgaT3q
Ib/OkzG9Gu11bs/r7GI/yxZdby+piaaT3O7scCme57Jik+HJ7SibJ88XjGRy
dHSK5nJAAfvRvb17JHWl8OydTqe/+OLL1WsbN2xp+6r7W2MCQ//QWOeBI9t3
7Fq1Zt3WTz/9L0dPGN98Xb/7UMs+wlul30rQO3jGadoXf0v/dc8+R61H29ra
dB8q/7JqxK64wlrO+1LNr4N7m9uznx0iDu4Q/WljRfNkTJq3W4/iYp6M1X2p
lvvv6oL7+xepVmUit6MsRDIxplPSZAYoJv5RWF5ZFU+QXTBfWloaGhpqalm/
tr7po9XrfvbRWvHf2rqmhqb1nZ2dT58+fZOzvEJx8kcVMha5tnzs6x8dSEye
m7plzMty2nr04w2/0L2j/uUit3+4Sq1cIdRuH0j1MqNly+25NTnq7ZIdIK8J
5IqoehPyP3TYv115uKx3X37YLRe1NR+c3I7yo8kMIJN59HTXH6Q3Ttr5riqd
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

   "], {{0, 0}, {600., 520.8}}, {0, 255},
   ColorFunction->RGBColor],
  ImageSize->400,
  PlotRange->{{0, 600.}, {0, 520.8}}]], "Output",
 CellChangeTimes->{
  3.7082032589127007`*^9, 3.7082032917567997`*^9, {3.70820332741343*^9, 
   3.7082033454136367`*^9}, 3.708203502821554*^9, 
   3.7082035598065367`*^9},ExpressionUUID->"5f282c22-2e5d-4b62-8e1c-\
45d91c513fe7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"graph", "=", 
  RowBox[{"Rasterize", "[", 
   RowBox[{
    RowBox[{"Graph", "[", 
     RowBox[{
      RowBox[{"Flatten", "@", 
       RowBox[{"{", 
        RowBox[{"intofil", ",", "filtocor"}], "}"}]}], ",", 
      RowBox[{"GraphLayout", "\[Rule]", "\"\<BalloonEmbedding\>\""}], ",", 
      RowBox[{"VertexLabels", "\[Rule]", 
       RowBox[{"Placed", "[", 
        RowBox[{"\"\<Name\>\"", ",", "Above"}], "]"}]}], ",", 
      RowBox[{"VertexLabelStyle", "\[Rule]", 
       RowBox[{"Directive", "[", 
        RowBox[{
         RowBox[{"FontSize", "->", "17"}], ",", 
         RowBox[{"Background", "\[Rule]", "White"}]}], "]"}]}], ",", 
      RowBox[{"ImageSize", "\[Rule]", "600"}]}], "]"}], ",", 
    RowBox[{"RasterSize", "\[Rule]", "1000"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7081998994296136`*^9, 3.7081999123672504`*^9}, {
   3.7082001765106945`*^9, 3.7082001781513367`*^9}, {3.708200248386423*^9, 
   3.708200280543002*^9}, {3.7082003456687527`*^9, 3.7082005654054728`*^9}, {
   3.708202974284713*^9, 3.7082029919254713`*^9}, 3.7082030437698326`*^9, {
   3.7082030853639684`*^9, 3.708203119864397*^9}, {3.7082031713180113`*^9, 
   3.708203225709275*^9}, {3.7082034270083*^9, 
   3.7082034937902613`*^9}},ExpressionUUID->"8e8bf760-5c1e-4377-8da6-\
97e7e2f0d3a2"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
yvU/ARCi95A=
   "], {{0, 0}, {600., 582.}}, {0, 255},
   ColorFunction->RGBColor],
  ImageSize->{600., 582.},
  ImageSizeRaw->{400, 389},
  PlotRange->{{0, 600.}, {0, 582.}}]], "Output",
 CellChangeTimes->{
  3.7081999127422147`*^9, {3.708200160213591*^9, 3.7082001785731745`*^9}, {
   3.7082002489957886`*^9, 3.708200281011767*^9}, 3.7082003467780824`*^9, {
   3.7082003849191256`*^9, 3.708200533498839*^9}, 3.708200565749186*^9, {
   3.7082029848628974`*^9, 3.708202992534856*^9}, 3.7082030445979123`*^9, {
   3.7082030865671206`*^9, 3.7082031321613483`*^9}, {3.7082031720680227`*^9, 
   3.7082032263967285`*^9}, {3.7082034294301434`*^9, 
   3.708203494618353*^9}},ExpressionUUID->"f4009200-a1b9-400d-84cb-\
c1081474a80d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"graph", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"Flatten", "@", 
     RowBox[{"{", 
      RowBox[{"intofil", ",", "filtocor"}], "}"}]}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<Fold[Permute,{a,b},{{1,2},{2,1}}]\>\"", "\[Rule]", 
        RowBox[{"Placed", "[", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{"\"\<Fold[Permute,{a,b},{{1,2},{2,1}}]\>\"", ",", 
            RowBox[{"FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}], ",", 
            RowBox[{"FontSize", "\[Rule]", "12"}], ",", 
            RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], ",", 
          "Above"}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Fold[Permute,{a,b},{1,2},{2,1}}]\>\"", "\[Rule]", 
        RowBox[{"Placed", "[", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{"\"\<Fold[Permute,{a,b},{1,2},{2,1}}]\>\"", ",", 
            RowBox[{"FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}], ",", 
            RowBox[{"FontSize", "\[Rule]", "12"}], ",", 
            RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], ",", 
          "Above"}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], ",", 
    RowBox[{"GraphLayout", "\[Rule]", "\"\<RadialEmbedding\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7081858912799788`*^9, 3.7081858929051285`*^9}, {
   3.7081865037256517`*^9, 3.708186540380607*^9}, {3.708194351780653*^9, 
   3.7081943523110275`*^9}, 3.7081944122464743`*^9, {3.7081944513541646`*^9, 
   3.7081944693178673`*^9}, {3.7081946067001615`*^9, 3.708194631734889*^9}, {
   3.7081946688952065`*^9, 3.7081947090186157`*^9}, {3.708194750113717*^9, 
   3.7081947569596*^9}, {3.708194828322092*^9, 3.708194829830161*^9}, {
   3.708199621192267*^9, 3.708199652411351*^9}, {3.7081997471310563`*^9, 
   3.708199845147744*^9}, {3.7081999372737656`*^9, 3.708199965508439*^9}, {
   3.708200017024619*^9, 
   3.708200040009198*^9}},ExpressionUUID->"a1271621-011f-4cc3-a99e-\
49ef93ddf196"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Fold[Permute,{a,b},{{1,2},{2,1}}]", "FoldPermute,{a,b},{{1,2},{2,1}}]",
        "Fold[Permute,a,b},{{1,2},{2,1}}]", 
       "Fold[Permute,{ab},{{1,2},{2,1}}]", "Fold[Permute,{a,b,{{1,2},{2,1}}]",
        "Fold[Permute,{a,b}{{1,2},{2,1}}]", 
       "Fold[Permute,{a,b},{1,2},{2,1}}]", "Fold[Permute,{a,b},{{,2},{2,1}}]",
        "Fold[Permute,{a,b},{{12},{2,1}}]", 
       "Fold[Permute,{a,b},{{1,},{2,1}}]", "Fold[Permute,{a,b},{{1,2,{2,1}}]",
        "Fold[Permute,{a,b},{{1,2}{2,1}}]", 
       "Fold[Permute,{a,b},{{1,2},2,1}}]", "Fold[Permute,{a,b},{{1,2},{,1}}]",
        "Fold[Permute,{a,b},{{1,2},{21}}]", 
       "Fold[Permute,{a,b},{{1,2},{2,}}]", "Fold[Permute,{a,b},{{1,2},{2,1}]",
        "Fold[Permute,{a,b},{{1,2},{2,1}}", 
       TextCell[
        Row[{"F", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "oldPermute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fo", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "ldPermute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fol", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "dPermute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldP", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "ermute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPe", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "rmute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPer", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "mute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPerm", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "ute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPermu", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "te,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPermut", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "e,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPermute", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,a", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",b},{{1,2},{2,1}}]"}]], 
       
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{ab},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{ab},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{ab},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "b,{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b}{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b}{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b}{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "{a,b},{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "a,b},{1,2},{2,1}}]"}]], 
       
       TextCell[
        Row[{"Fold[Permute,{a", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",b},{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{12},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{12},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{12},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{1,},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{1,2}{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2}{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,2}{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2},2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,2},2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},2,", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},2,1", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{1,2},{,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2},{,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,2},{,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{1,2},{21}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2},{21}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,2},{21}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{1,2},{2,}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2},{2,}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,2},{2,}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},{", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "2,1}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},{2,1", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},{2,1}", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},{2,1}}", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]}, {{{1, 2}, {1, 
       3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {1, 7}, {1, 8}, {1, 9}, {1, 10}, {
       1, 11}, {1, 12}, {1, 13}, {1, 14}, {1, 15}, {1, 16}, {1, 17}, {1, 
       17}, {1, 18}, {2, 19}, {2, 20}, {2, 21}, {2, 22}, {2, 23}, {2, 24}, {2,
        25}, {2, 26}, {2, 27}, {2, 28}, {2, 29}, {3, 30}, {3, 31}, {3, 32}, {
       3, 33}, {4, 34}, {4, 35}, {4, 36}, {5, 37}, {5, 38}, {6, 39}, {6, 
       40}, {6, 41}, {7, 42}, {7, 43}, {7, 44}, {7, 45}, {7, 46}, {7, 47}, {7,
        48}, {7, 42}, {7, 43}, {7, 44}, {7, 45}, {7, 46}, {7, 47}, {7, 48}, {
       8, 49}, {8, 50}, {8, 51}, {9, 52}, {9, 53}, {9, 54}, {10, 55}, {10, 
       56}, {10, 57}, {11, 58}, {12, 59}, {12, 60}, {12, 61}, {13, 62}, {13, 
       63}, {13, 64}, {13, 65}, {13, 66}, {14, 67}, {14, 68}, {14, 69}, {15, 
       70}, {15, 71}, {15, 72}, {16, 73}, {16, 74}, {16, 75}, {17, 76}, {17, 
       77}, {17, 78}, {17, 76}, {17, 77}, {17, 78}, {18, 79}}, Null}, {
      GraphLayout -> "RadialEmbedding", 
       VertexLabels -> {"Fold[Permute,{a,b},{{1,2},{2,1}}]" -> Placed[
           Style[
           "Fold[Permute,{a,b},{{1,2},{2,1}}]", FontFamily -> 
            "Times New Roman", FontSize -> 12, Background -> GrayLevel[1]], 
           Above], "Fold[Permute,{a,b},{1,2},{2,1}}]" -> Placed[
           Style[
           "Fold[Permute,{a,b},{1,2},{2,1}}]", FontFamily -> 
            "Times New Roman", FontSize -> 12, Background -> GrayLevel[1]], 
           Above]}}]]}, 
    TagBox[GraphicsGroupBox[{{{
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.023294398090377973`],
           ArrowBox[{{1.9542550734682473`, 1.954903187381237}, {
           1.4296605233234683`, 2.7796529530476035`}}, 0.036418556521208165`],
           ArrowBox[{{1.9542550734682473`, 1.954903187381237}, {
           1.0029362603125067`, 2.1794118369791606`}}, 0.036418556521208165`],
           ArrowBox[{{1.9542550734682473`, 1.954903187381237}, {
           0.9848941651347929, 1.8294000105159873`}}, 0.036418556521208165`], 
          ArrowBox[{{1.9542550734682473`, 1.954903187381237}, {
           1.0488182344270056`, 1.586669907359816}}, 0.036418556521208165`], 
          ArrowBox[{{1.9542550734682473`, 1.954903187381237}, {
           1.1724509290011076`, 1.368222782303367}}, 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.9542550734682473`, 1.954903187381237}, {
           1.9058251655849143`, 1.4427093723529536`}, {1.5628307651897837`, 
           1.0592477687647603`}}], 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.9542550734682473`, 1.954903187381237}, {
           1.6112606730731123`, 1.5714415837929385`}, {1.5628307651897837`, 
           1.0592477687647603`}}], 0.036418556521208165`], 
          ArrowBox[{{1.9542550734682473`, 1.954903187381237}, {
           2.054757620985018, 0.9826322087178969}}, 0.036418556521208165`], 
          ArrowBox[{{1.9542550734682473`, 1.954903187381237}, {
           2.345679381746709, 1.0592477687647595`}}, 0.036418556521208165`], 
          ArrowBox[{{1.9542550734682473`, 1.954903187381237}, {
           2.599521815896583, 1.2207080844799347`}}, 0.036418556521208165`], 
          ArrowBox[{{1.9542550734682473`, 1.954903187381237}, {
           2.7360592179353858`, 1.3682227823033655`}}, 0.036418556521208165`],
           ArrowBox[{{1.9542550734682473`, 1.954903187381237}, {
           2.839535193925453, 1.5405473905934943`}}, 0.036418556521208165`], 
          ArrowBox[{{1.9542550734682473`, 1.954903187381237}, {
           2.931382610202371, 1.9297358481449578`}}, 0.036418556521208165`], 
          ArrowBox[{{1.9542550734682473`, 1.954903187381237}, {
           2.85969191250949, 2.323136467402656}}, 0.036418556521208165`], 
          ArrowBox[{{1.9542550734682473`, 1.954903187381237}, {
           2.7048210392105867`, 2.581052010807105}}, 0.036418556521208165`], 
          ArrowBox[{{1.9542550734682473`, 1.954903187381237}, {
           2.478849623613029, 2.7796529530476017`}}, 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.9542550734682473`, 1.954903187381237}, {
           1.9232862776777857`, 2.468448602913434}, {2.203183765815015, 
           2.900125978121525}}], 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.9542550734682473`, 1.954903187381237}, {
           2.2341525616054723`, 2.3865805625909786`}, {2.203183765815015, 
           2.900125978121525}}], 0.036418556521208165`], 
          ArrowBox[{{1.9542550734682473`, 1.954903187381237}, {
           2.0045730643597355`, 2.931058768116692}}, 0.036418556521208165`], 
          ArrowBox[{{1.4296605233234683`, 2.7796529530476035`}, {
           1.8536190916852797`, 3.9072143488521482`}}, 0.036418556521208165`],
           ArrowBox[{{1.4296605233234683`, 2.7796529530476035`}, {
           1.6534138945615406`, 3.8865193648625045`}}, 0.036418556521208165`],
           ArrowBox[{{1.4296605233234683`, 2.7796529530476035`}, {
           1.4563976887747192`, 3.8453487688618146`}}, 0.036418556521208165`],
           ArrowBox[{{1.4296605233234683`, 2.7796529530476035`}, {
           1.2646588951180409`, 3.7841389794097307`}}, 0.036418556521208165`],
           ArrowBox[{{1.4296605233234683`, 2.7796529530476035`}, {
           1.0802299925032817`, 3.7035388355016523`}}, 0.036418556521208165`],
           ArrowBox[{{1.4296605233234683`, 2.7796529530476035`}, {
           0.905065973178689, 3.6044027187139704`}}, 0.036418556521208165`], 
          ArrowBox[{{1.4296605233234683`, 2.7796529530476035`}, {
           0.7410236193248005, 3.4877814965468072`}}, 0.036418556521208165`], 
          ArrowBox[{{1.4296605233234683`, 2.7796529530476035`}, {
           0.5898418207014187, 3.3549113829670922`}}, 0.036418556521208165`], 
          ArrowBox[{{1.4296605233234683`, 2.7796529530476035`}, {
           0.4531231419835715, 3.207200834232977}}, 0.036418556521208165`], 
          ArrowBox[{{1.4296605233234683`, 2.7796529530476035`}, {
           0.3323168351772865, 3.0462156189071194`}}, 0.036418556521208165`], 
          ArrowBox[{{1.4296605233234683`, 2.7796529530476035`}, {
           0.22870347718779405`, 2.873662220320396}}, 0.036418556521208165`], 
          ArrowBox[{{1.0029362603125067`, 2.1794118369791606`}, {
           0.1433813953857641, 2.69136974742408}}, 0.036418556521208165`], 
          ArrowBox[{{1.0029362603125067`, 2.1794118369791606`}, {
           0.077255025063941, 2.5012705457799167`}}, 0.036418556521208165`], 
          ArrowBox[{{1.0029362603125067`, 2.1794118369791606`}, {
           0.031025322198048322`, 2.3053797142164703`}}, 
           0.036418556521208165`], 
          ArrowBox[{{1.0029362603125067`, 2.1794118369791606`}, {
           0.005182333139065687, 2.105773744280237}}, 0.036418556521208165`], 
          ArrowBox[{{0.9848941651347929, 1.8294000105159873`}, {0., 
           1.9045685089086837`}}, 0.036418556521208165`], 
          ArrowBox[{{0.9848941651347929, 1.8294000105159873`}, {
           0.015533256801338657`, 1.7038968336507367`}}, 
           0.036418556521208165`], 
          ArrowBox[{{0.9848941651347929, 1.8294000105159873`}, {
           0.05161744715676608, 1.5058858881853903`}}, 0.036418556521208165`],
           ArrowBox[{{1.0488182344270056`, 1.586669907359816}, {
           0.10787006967182133`, 1.312634637793923}}, 0.036418556521208165`], 
          ArrowBox[{{1.0488182344270056`, 1.586669907359816}, {
           0.18369483255383345`, 1.1261915938057563`}}, 
           0.036418556521208165`], 
          ArrowBox[{{1.1724509290011076`, 1.368222782303367}, {
           0.27828797445326514`, 0.948533098868753}}, 0.036418556521208165`], 
          ArrowBox[{{1.1724509290011076`, 1.368222782303367}, {
           0.3906467845339683, 0.7815423772254964}}, 0.036418556521208165`], 
          ArrowBox[{{1.1724509290011076`, 1.368222782303367}, {
           0.5195802314574942, 0.6269895720678238}}, 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.5628307651897837`, 
           1.0592477687647603`}, {1.2074571132433258`, 0.6250301903761748}, {
           0.6637215886115728, 0.4865129815786353}}], 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.5628307651897837`, 
           1.0592477687647603`}, {1.0190952405580318`, 0.9207305599671691}, {
           0.6637215886115728, 0.4865129815786353}}], 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.5628307651897837`, 
           1.0592477687647603`}, {1.306908285510889, 0.5885268038113229}, {
           0.8215429217522074, 0.3616016925635932}}], 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.5628307651897837`, 
           1.0592477687647603`}, {1.0774654014311107`, 0.8323226575167249}, {
           0.8215429217522074, 0.3616016925635932}}], 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.5628307651897837`, 
           1.0592477687647603`}, {1.4095856688005959`, 0.5624425584354228}, {
           0.9913712854867676, 0.2535797957605386}}], 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.5628307651897837`, 
           1.0592477687647603`}, {1.1446163818759592`, 0.750385006090036}, {
           0.9913712854867676, 0.2535797957605386}}], 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.5628307651897837`, 
           1.0592477687647603`}, {1.5144008573064505`, 0.5470539537374296}, {
           1.17140645691132, 0.16359235014828366`}}], 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.5628307651897837`, 
           1.0592477687647603`}, {1.2198363647946493`, 0.6757861651756619}, {
           1.17140645691132, 0.16359235014828366`}}], 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.5628307651897837`, 
           1.0592477687647603`}, {1.6202427839553328`, 0.5425241127560814}, {
           1.3597400184212725`, 0.09259324503656585}}], 
           0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.5628307651897837`, 
           1.0592477687647603`}, {1.302327999655725, 0.6093169010453209}, {
           1.3597400184212725`, 0.09259324503656585}}], 
           0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.5628307651897837`, 
           1.0592477687647603`}, {1.725989497994371, 0.5489010529319773}, {
           1.5543755874127188`, 0.04133508860207802}}], 
           0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.5628307651897837`, 
           1.0592477687647603`}, {1.39121685460813, 0.5516818044348702}, {
           1.5543755874127188`, 0.04133508860207802}}], 
           0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.5628307651897837`, 
           1.0592477687647603`}, {1.8305200579480638`, 0.5661171771136423}, {
           1.7532499784347055`, 0.010361230054557025`}}], 
           0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{1.5628307651897837`, 
           1.0592477687647603`}, {1.4855606856764283`, 0.5034918217055175}, {
           1.7532499784347055`, 0.010361230054557025`}}], 
           0.036418556521208165`], 
          ArrowBox[{{2.054757620985018, 0.9826322087178969}, {
           1.954255073468247, 0.}}, 0.036418556521208165`], 
          ArrowBox[{{2.054757620985018, 0.9826322087178969}, {
           2.1552601685017883`, 0.010361230054556803`}}, 
           0.036418556521208165`], 
          ArrowBox[{{2.054757620985018, 0.9826322087178969}, {
           2.354134559523775, 0.041335088602077796`}}, 0.036418556521208165`],
           ArrowBox[{{2.345679381746709, 1.0592477687647595`}, {
           2.5487701285152213`, 0.09259324503656563}}, 0.036418556521208165`],
           ArrowBox[{{2.345679381746709, 1.0592477687647595`}, {
           2.737103690025171, 0.16359235014828188`}}, 0.036418556521208165`], 
          ArrowBox[{{2.345679381746709, 1.0592477687647595`}, {
           2.9171388614497267`, 0.25357979576053835`}}, 
           0.036418556521208165`], 
          ArrowBox[{{2.599521815896583, 1.2207080844799347`}, {
           3.086967225184284, 0.36160169256359076`}}, 0.036418556521208165`], 
          ArrowBox[{{2.599521815896583, 1.2207080844799347`}, {
           3.2447885583249185`, 0.48651298157863265`}}, 
           0.036418556521208165`], 
          ArrowBox[{{2.599521815896583, 1.2207080844799347`}, {
           3.3889299154789994`, 0.6269895720678227}}, 0.036418556521208165`], 
          ArrowBox[{{2.7360592179353858`, 1.3682227823033655`}, {
           3.517863362402524, 0.7815423772254939}}, 0.036418556521208165`], 
          ArrowBox[{{2.839535193925453, 1.5405473905934943`}, {
           3.6302221724832267`, 0.9485330988687488}}, 0.036418556521208165`], 
          ArrowBox[{{2.839535193925453, 1.5405473905934943`}, {
           3.72481531438266, 1.1261915938057534`}}, 0.036418556521208165`], 
          ArrowBox[{{2.839535193925453, 1.5405473905934943`}, {
           3.8006400772646716`, 1.312634637793919}}, 0.036418556521208165`], 
          ArrowBox[{{2.931382610202371, 1.9297358481449578`}, {
           3.8568926997797273`, 1.5058858881853854`}}, 0.036418556521208165`],
           ArrowBox[{{2.931382610202371, 1.9297358481449578`}, {
           3.892976890135156, 1.7038968336507336`}}, 0.036418556521208165`], 
          ArrowBox[{{2.931382610202371, 1.9297358481449578`}, {
           3.9085101469364947`, 1.9045685089086786`}}, 0.036418556521208165`],
           ArrowBox[{{2.931382610202371, 1.9297358481449578`}, {
           3.9033278137974294`, 2.1057737442802353`}}, 0.036418556521208165`],
           ArrowBox[{{2.931382610202371, 1.9297358481449578`}, {
           3.877484824738447, 2.305379714216467}}, 0.036418556521208165`], 
          ArrowBox[{{2.85969191250949, 2.323136467402656}, {
           3.8312551218725552`, 2.501270545779912}}, 0.036418556521208165`], 
          ArrowBox[{{2.85969191250949, 2.323136467402656}, {
           3.7651287515507317`, 2.691369747424077}}, 0.036418556521208165`], 
          ArrowBox[{{2.85969191250949, 2.323136467402656}, {3.679806669748702,
            2.8736622203203934`}}, 0.036418556521208165`], 
          ArrowBox[{{2.7048210392105867`, 2.581052010807105}, {
           3.5761933117592113`, 3.046215618907115}}, 0.036418556521208165`], 
          ArrowBox[{{2.7048210392105867`, 2.581052010807105}, {
           3.455387004952925, 3.2072008342329745`}}, 0.036418556521208165`], 
          ArrowBox[{{2.7048210392105867`, 2.581052010807105}, {
           3.3186683262350796`, 3.3549113829670887`}}, 0.036418556521208165`],
           ArrowBox[{{2.478849623613029, 2.7796529530476017`}, {
           3.1674865276116995`, 3.487781496546803}}, 0.036418556521208165`], 
          ArrowBox[{{2.478849623613029, 2.7796529530476017`}, {
           3.00344417375781, 3.604402718713968}}, 0.036418556521208165`], 
          ArrowBox[{{2.478849623613029, 2.7796529530476017`}, {
           2.828280154433219, 3.703538835501649}}, 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{2.203183765815015, 2.900125978121525}, {
           2.278149750365315, 3.4145961694429565`}, {2.643851251818462, 
           3.784138979409727}}], 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{2.203183765815015, 2.900125978121525}, {
           2.568885267268161, 3.2696687881268285`}, {2.643851251818462, 
           3.784138979409727}}], 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{2.203183765815015, 2.900125978121525}, {
           2.172214970024553, 3.4136713936414718`}, {2.452112458161781, 
           3.8453487688618133`}}], 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{2.203183765815015, 2.900125978121525}, {
           2.4830812539522444`, 3.331803353320657}, {2.452112458161781, 
           3.8453487688618133`}}], 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{2.203183765815015, 2.900125978121525}, {
           2.066936743562822, 3.4018591995672907`}, {2.2550962523749614`, 
           3.886519364862503}}], 0.036418556521208165`], 
          ArrowBox[BezierCurveBox[{{2.203183765815015, 2.900125978121525}, {
           2.3913432746271615`, 3.3847861434122724`}, {2.2550962523749614`, 
           3.886519364862503}}], 0.036418556521208165`], 
          ArrowBox[{{2.0045730643597355`, 2.931058768116692}, {
           2.054891055251223, 3.907214348852148}}, 
           0.036418556521208165`]}}}, {{
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
          0.7]}], {
           DiskBox[{1.9542550734682473, 1.954903187381237}, 
            0.036418556521208165], InsetBox[
            StyleBox["\<\"Fold[Permute,{a,b},{{1,2},{2,1}}]\"\>",
             StripOnInput->False,
             FontFamily->"Times New Roman",
             FontSize->12,
             Background->GrayLevel[1]], 
            Offset[{0, 2}, {1.9542550734682473, 1.991321743902445}], 
            ImageScaled[{0.5, 0}],
            BaseStyle->"Graphics"]}, 
          DiskBox[{1.4296605233234683, 2.7796529530476035}, 
           0.036418556521208165], 
          DiskBox[{1.0029362603125067, 2.1794118369791606}, 
           0.036418556521208165], 
          DiskBox[{0.9848941651347929, 1.8294000105159873}, 
           0.036418556521208165], 
          DiskBox[{1.0488182344270056, 1.586669907359816}, 
           0.036418556521208165], 
          DiskBox[{1.1724509290011076, 1.368222782303367}, 
           0.036418556521208165], {
           DiskBox[{1.5628307651897837, 1.0592477687647603}, 
            0.036418556521208165], InsetBox[
            StyleBox["\<\"Fold[Permute,{a,b},{1,2},{2,1}}]\"\>",
             StripOnInput->False,
             FontFamily->"Times New Roman",
             FontSize->12,
             Background->GrayLevel[1]], 
            Offset[{0, 2}, {1.5628307651897837, 1.0956663252859684}], 
            ImageScaled[{0.5, 0}],
            BaseStyle->"Graphics"]}, 
          DiskBox[{2.054757620985018, 0.9826322087178969}, 
           0.036418556521208165], 
          DiskBox[{2.345679381746709, 1.0592477687647595}, 
           0.036418556521208165], 
          DiskBox[{2.599521815896583, 1.2207080844799347}, 
           0.036418556521208165], 
          DiskBox[{2.7360592179353858, 1.3682227823033655}, 
           0.036418556521208165], 
          DiskBox[{2.839535193925453, 1.5405473905934943}, 
           0.036418556521208165], 
          DiskBox[{2.931382610202371, 1.9297358481449578}, 
           0.036418556521208165], 
          DiskBox[{2.85969191250949, 2.323136467402656}, 
           0.036418556521208165], 
          DiskBox[{2.7048210392105867, 2.581052010807105}, 
           0.036418556521208165], 
          DiskBox[{2.478849623613029, 2.7796529530476017}, 
           0.036418556521208165], 
          DiskBox[{2.203183765815015, 2.900125978121525}, 
           0.036418556521208165], 
          DiskBox[{2.0045730643597355, 2.931058768116692}, 
           0.036418556521208165], 
          DiskBox[{1.8536190916852797, 3.9072143488521482}, 
           0.036418556521208165], 
          DiskBox[{1.6534138945615406, 3.8865193648625045}, 
           0.036418556521208165], 
          DiskBox[{1.4563976887747192, 3.8453487688618146}, 
           0.036418556521208165], 
          DiskBox[{1.2646588951180409, 3.7841389794097307}, 
           0.036418556521208165], 
          DiskBox[{1.0802299925032817, 3.7035388355016523}, 
           0.036418556521208165], 
          DiskBox[{0.905065973178689, 3.6044027187139704}, 
           0.036418556521208165], 
          DiskBox[{0.7410236193248005, 3.4877814965468072}, 
           0.036418556521208165], 
          DiskBox[{0.5898418207014187, 3.3549113829670922}, 
           0.036418556521208165], 
          DiskBox[{0.4531231419835715, 3.207200834232977}, 
           0.036418556521208165], 
          DiskBox[{0.3323168351772865, 3.0462156189071194}, 
           0.036418556521208165], 
          DiskBox[{0.22870347718779405, 2.873662220320396}, 
           0.036418556521208165], 
          DiskBox[{0.1433813953857641, 2.69136974742408}, 
           0.036418556521208165], 
          DiskBox[{0.077255025063941, 2.5012705457799167}, 
           0.036418556521208165], 
          DiskBox[{0.031025322198048322, 2.3053797142164703}, 
           0.036418556521208165], 
          DiskBox[{0.005182333139065687, 2.105773744280237}, 
           0.036418556521208165], 
          DiskBox[{0., 1.9045685089086837}, 0.036418556521208165], 
          DiskBox[{0.015533256801338657, 1.7038968336507367}, 
           0.036418556521208165], 
          DiskBox[{0.05161744715676608, 1.5058858881853903}, 
           0.036418556521208165], 
          DiskBox[{0.10787006967182133, 1.312634637793923}, 
           0.036418556521208165], 
          DiskBox[{0.18369483255383345, 1.1261915938057563}, 
           0.036418556521208165], 
          DiskBox[{0.27828797445326514, 0.948533098868753}, 
           0.036418556521208165], 
          DiskBox[{0.3906467845339683, 0.7815423772254964}, 
           0.036418556521208165], 
          DiskBox[{0.5195802314574942, 0.6269895720678238}, 
           0.036418556521208165], 
          DiskBox[{0.6637215886115728, 0.4865129815786353}, 
           0.036418556521208165], 
          DiskBox[{0.8215429217522074, 0.3616016925635932}, 
           0.036418556521208165], 
          DiskBox[{0.9913712854867676, 0.2535797957605386}, 
           0.036418556521208165], 
          DiskBox[{1.17140645691132, 0.16359235014828366}, 
           0.036418556521208165], 
          DiskBox[{1.3597400184212725, 0.09259324503656585}, 
           0.036418556521208165], 
          DiskBox[{1.5543755874127188, 0.04133508860207802}, 
           0.036418556521208165], 
          DiskBox[{1.7532499784347055, 0.010361230054557025}, 
           0.036418556521208165], 
          DiskBox[{1.954255073468247, 0.}, 0.036418556521208165], 
          DiskBox[{2.1552601685017883, 0.010361230054556803}, 
           0.036418556521208165], 
          DiskBox[{2.354134559523775, 0.041335088602077796}, 
           0.036418556521208165], 
          DiskBox[{2.5487701285152213, 0.09259324503656563}, 
           0.036418556521208165], 
          DiskBox[{2.737103690025171, 0.16359235014828188}, 
           0.036418556521208165], 
          DiskBox[{2.9171388614497267, 0.25357979576053835}, 
           0.036418556521208165], 
          DiskBox[{3.086967225184284, 0.36160169256359076}, 
           0.036418556521208165], 
          DiskBox[{3.2447885583249185, 0.48651298157863265}, 
           0.036418556521208165], 
          DiskBox[{3.3889299154789994, 0.6269895720678227}, 
           0.036418556521208165], 
          DiskBox[{3.517863362402524, 0.7815423772254939}, 
           0.036418556521208165], 
          DiskBox[{3.6302221724832267, 0.9485330988687488}, 
           0.036418556521208165], 
          DiskBox[{3.72481531438266, 1.1261915938057534}, 
           0.036418556521208165], 
          DiskBox[{3.8006400772646716, 1.312634637793919}, 
           0.036418556521208165], 
          DiskBox[{3.8568926997797273, 1.5058858881853854}, 
           0.036418556521208165], 
          DiskBox[{3.892976890135156, 1.7038968336507336}, 
           0.036418556521208165], 
          DiskBox[{3.9085101469364947, 1.9045685089086786}, 
           0.036418556521208165], 
          DiskBox[{3.9033278137974294, 2.1057737442802353}, 
           0.036418556521208165], 
          DiskBox[{3.877484824738447, 2.305379714216467}, 
           0.036418556521208165], 
          DiskBox[{3.8312551218725552, 2.501270545779912}, 
           0.036418556521208165], 
          DiskBox[{3.7651287515507317, 2.691369747424077}, 
           0.036418556521208165], 
          DiskBox[{3.679806669748702, 2.8736622203203934}, 
           0.036418556521208165], 
          DiskBox[{3.5761933117592113, 3.046215618907115}, 
           0.036418556521208165], 
          DiskBox[{3.455387004952925, 3.2072008342329745}, 
           0.036418556521208165], 
          DiskBox[{3.3186683262350796, 3.3549113829670887}, 
           0.036418556521208165], 
          DiskBox[{3.1674865276116995, 3.487781496546803}, 
           0.036418556521208165], 
          DiskBox[{3.00344417375781, 3.604402718713968}, 
           0.036418556521208165], 
          DiskBox[{2.828280154433219, 3.703538835501649}, 
           0.036418556521208165], 
          DiskBox[{2.643851251818462, 3.784138979409727}, 
           0.036418556521208165], 
          DiskBox[{2.452112458161781, 3.8453487688618133}, 
           0.036418556521208165], 
          DiskBox[{2.2550962523749614, 3.886519364862503}, 
           0.036418556521208165], 
          DiskBox[{2.054891055251223, 3.907214348852148}, 
           0.036418556521208165]}}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{
  3.708185893366439*^9, 3.708185962798603*^9, {3.708186494867361*^9, 
   3.7081865041869736`*^9}, 3.7081865408939533`*^9, {3.7081943327241583`*^9, 
   3.70819435292146*^9}, {3.7081943906641855`*^9, 3.708194412682764*^9}, {
   3.708194458737376*^9, 3.7081944698332453`*^9}, {3.7081946072055187`*^9, 
   3.7081946321912007`*^9}, {3.708194669520644*^9, 3.7081947096060295`*^9}, 
   3.708194757559988*^9, 3.708194830694775*^9, {3.70819962339536*^9, 
   3.708199653926938*^9}, {3.7081997540530167`*^9, 3.7081998149599066`*^9}, 
   3.708199845803986*^9, 3.7081999659459085`*^9, {3.7082000269309287`*^9, 
   3.7082000406029415`*^9}},ExpressionUUID->"27357664-89b9-4e82-a1ac-\
c1753be5f922"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"img1", "=", 
  RowBox[{"Rasterize", "[", 
   RowBox[{"graph", ",", 
    RowBox[{"RasterSize", "\[Rule]", "1000"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7081948324620247`*^9, 3.708194863426955*^9}, {
  3.7081949015209293`*^9, 
  3.708194918031616*^9}},ExpressionUUID->"ae914efa-b3e3-4bf8-9605-\
e5aeda0fbdd8"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJzsvY93FdW9/33Xev6S508ANAQJJ3AgP8g5sV8a/TZFDGppTGhNSwEhKgWt
sZcU0oCA4OFHFIioEUWpqE1rr+U2fqu5bVP10qWNy4d7q3nwodfVLLvw3rXO
8yH78r6bmXPm7JnZe8+e4fNaoysJ58zZZ2bP3u/92Z8f//c93/v6Pf/XP/zD
P/yF/vcZ/Xf15zLDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMD6mpqbGxsYG
Bwf7+/sHBgZGR0fpL7Ozs0m3i2EYhmEYhmGYq0xOTnZ1dbXP0dyyMr+ihf5f
LBbp146ODhLzSTeQYRiGYRiGYRLDBfs2fdzw8DDp86aW1rrFy+bV5eSj7pal
+aYW+tdNmzZdvHjRZsMELlwihmEYhmEY5obFEfv2lStXent7C4ViQ+MKUumr
Vnc/tLO0Z+TV42ff3X/ije27jq3t3UJ/X7Qk31YodHZ2zszM2GlY2ZlLxDAM
wzAMw9yYOGXfHhkZISVMH1qfa946cIDkuv8YPPjC8rbbFtQ3knTv7+833aSy
Y5eIYRiGYRiGuQFxyr49PT3d0dHRuKzp5sV50YZqx7GXJhqbv0atIrV87tw5
c00qO3aJGIZhGIZhmBsTp+zbdPKW1jbSwH39gwGiXRyP7TtFr8w3tZDUJ2lt
rlVOXSKGYRiGYRjmBsQ1+zY1pqFxBQngmqJdHGu6N9YtXkZNunDhgqEmuXaJ
GIZhGIZhmBsQp+zbpJBJ8ZIOX9u7RVG3bx04MH9hrlgsnjlzRnt7BE5dIoZh
GIZhGObGxCn79vj4OClw0r2bH96r2J6hIy/T61tXtg0PD2tvj8CpS8QwDMMw
DMMkRYLJwF2zb4+MjLSuLJAO/9GeE4rtOfbSBL1+eVOrIZdy1y5RRTifPMMw
DMMwjFESTwbumn17YmKCvvuC+kYVjxRxDB58Ya49hVKppL09ZfcukYfEuxDD
MAzDMEy2cSQZuGv27ZmZGfrW9Q3527vWK7Znw7Yh0vn0LhLY2ttTdu8SAUe6
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
V5xMN2wbosmX3jU+btCE6K9f4xG0pJYrOhLH96aGvIEGpsbQIsKv2zfsfB4e
1HC5j1DtKE5EKhqTlEiuBpY/nvT7FrCZOt4DLfTETpBc5omWfi7odn8Eh81P
d3aoYRiGYZgU0dXV1bisqT7XfPDUL1V2rptv7aTJlyZTo1XI955406MxPLlB
/MZDcZDA9iSfCQsCKuWoRpLWHqeLTy99ISt5mJcjKLQ4EakC6HYX9CGo5uNk
53OtlWqVgXeQZwFlP6mOh4rPi+USrm4ONQzDMAyTIkqlUluhcFN946rV3TUn
0/WbB+YvvBop1tfXZ65JCNKUD4/jN6ov+Y8NO5+PI5Mie0eLNu/YfzbUu2JG
pArc1O3C7i1bni2QoJ2/LC3B3CmAJaiYLslExeEAHBxqGIZhGCZdzM7OdnV1
LW9qnVeX27BtKGAm3b7r2M2L8435po6OjunpaXNN8qR5rGY+DciYTVoxsiYR
yScjqE243IcyY8aMSBX4K4S6QCJ+5gn61ZevdZ44SzATVNucsqzbHRxqGIZh
GCZ1iJCx3NImmk9Xre7272IfHvv1mu6N9K/1DflisTg6alaJVYw5vW/gWc/L
gsvKk6qPkE4kjrUWEayhbK0xI1IFJMAc1O2I0LSpD6FR4+QXioabux60gpDT
IslHTI+yCLg21DAMwzBMGimVSjSfNrW03lTfWJ9rbr/97vWbBx7aWaL/0/Ta
kC/MX5hbmm9uar6ak81o2XEoZ//x6aUv5FfKSdcrHiSJw3rwQvWJLDHR3que
1CV+RKoAup2kcpzz6AULGfqa1j4UmzX288bj+77z3ieWPzqAgMfEvm4vKw81
9BrTQw3DMAzDpJfJycmurq5CoUiT5qIleZpV59XlFtDc2nB1w7p1ZaGzs3Pn
8KGnzrxtNJwNxS79h0cO+asv+Q+Ry1H90ysGpSoC8axuq4dFOqbIxEc7kidc
YL9uaVm6g/ZFqXDcum/gWXecZOSiw/7D5n2REUNNW1uBBpZqQw3XSGUYhmGY
YGZnZ0dGRnp7e9uv0dyykv5Pk+zg4ODly5eFDNix/6w5Cyqcov2Hxwbuz/He
vePk/btOj559hzQbHRHcMxCUGs21A+7NKi/+4m9fxo9IFbip21Ey1ZMLyCjw
nvLszpgGWyeJxMNWI3hPyv6WBKCh5r77H5GHGgGGmqQaxjAMwzCpg2bVqamp
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
vWc2AXZtdHUY7Qb8sqRO0xL5WDbggOTHUJU3FbA1mYrFaTXRnpaHlGEYJj5T
U1NjY2ODg4P9/f0DAwOjo6P0l9nZJKPwqo3MAdI9QAaQ6oDjqFDFEaIjEZ+o
t468B8yhJHr/zx8/Fj+bSG8ogDA78cpvNc7d1bzNowVOwlAfIEfxRfRGjxoq
QmoImLJ17QqhN+rSq0iUZKHqqEaEr5RRxx4s0i3HhGKtR+sF951MAkS76d2Q
mjg4jTIMkz0mJye7urra52huWZlf0UL/LxaL9GtHRweNQkk1zGMk12JXIQ0m
x6uSkg9lRbTjfUrCBsY90gl9j5kVObIDAPbK42eo7qnimQ91HSozT0DFJf+Z
9ep2OIokKwkUwcaELsOj9phcVC9KUd4PPPjmls/01Iunz1wETUVoAExR4sdg
0W6uunRNnJ1GGYbJErOzs8PDwzSwNLW01i1eNq8uJx91tyzNN7XQv27atOni
RbN1RioCBVLtiDbv08jvCXqlBYL6aI9Zw2i2B3l6WrPl2Le3nzA3q0KXvvPe
J4hNo/VCzBmwmm6PlgAwoOISQHiyoUT0qQjWgyeSLoUpxKRGOzOevlSsgwQW
9lwQ/2tzOSMnfnTfwyRYtFccbSzg+DTKMExmuHLlSm9vb6FQbGhcQcPLqtXd
D+0s7Rl59fjZd/efeGP7rmNre7fQ3xctybcVCp2dnTMzM5ZbiP107dK9POe0
jAlLbBArqghr2ZVJgAmXks5NR1q6H+/ecVJXxKgHjyaBX0TMzfpqM2mEJDlI
IBl8zU1EUJalvHwaz2kOBPBq0TB6zyZAXqZUZBoUYElobrUORWqiQkQ1sNdG
n+747agp2uMPWRFwfxplGCYzjIyMFIvFuluW1ueatw4coHHGfwwefGF5220L
6htpzOnv77ffSH9ZJc9ByjZy/B3NU6+f/0BeGtDH1dyhxnZ2j/kqPHR+Ejnd
PzzZsGbXynv3GcpD6Elwh33zOPv1wXpPrEfUlZuiid6Qbrfg2KwXjQ3GIkuX
ERibaOYcTkwAxWhI3MJ3yKbFGPfC/cSPKqLd6KqqGqmYRhmGyQDT09MdHR2N
y5puXpwXxoFqx7GXJhqbv7ZoSb69vf3cuXOW24mAKRx9jz3bP3zmnfc+0aWZ
6Tzy6oA0T82APtM1mGQufvZXalLTur233PGTYu9+EysFf6oWWOEi7ykE6z14
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
MlWJGjcKewePwhynyN0xxYv0MuDq9R3fwS/z2rfM+dK3rrv54WuWPIg/5970
7ds27s+v2IXzl676/le++TgH2ytBcsqgCDb1pW8Ubt+4/yqB/1M/dJ9QJe6Q
g+du1nxpo4q3hACsjTFJGyPjvfcnrWuvypGQIggMk0CBRFHgQwborpIuGyMd
FDSOXrmimQkntgDbSN9ofPRGcwiho1UeJugQTLc8U1vZO8YI2PvEex9QL+rc
PNi+uiAi7XO/9G2QdhD4zy958PPN3/jbue1/c03LX3w6XZVuuyZzy43d316w
bAvO52B7hTC4DMrY2Njw8HBfXx+cjvnZ9sVL70x96e7b79l30+rCLXf/QNje
5CzlU+5HsPcZT6bok7cEvIo2BlNDTMNT7mGqNqYUDr/wyzuuml/r4XK/M4Oh
G8YvXMKkUCqYg0GtlG0SHCaOOd7l9YVw7BXl3qy8/AfDF4jtq0pEnZac0LHp
MYHqo8PIG13xEDHlDT79p9DcVzcNZG/fAbqO43NfeOCzjSv/w99W/e9/9Zn/
4//+x7/5+6p/+Fz1tXPr/vrvr/2rT1zzFx+/tuGmuzjYXjmoDEoun6+pXWhA
GRThjIiraGhshkuCbvPJf5rzf33sc3/3j3OvXXyb6GwOe6sNg1wQdkYTTQnt
vd0iRRtjatiZYLY2xhbiEdsafN6Lyog1QMKdtRw4QUmaJ3zV2K0nhr8+SMGN
ysttM3zEmV9fAIG3za2EjoEZDZQA05yVveP3HQMvrbj/R/j9tg37a27eMnfp
A39T1fq//eWnP/bpWVXVC6qqU/Ix97r6OTXpT3127h0rvhbfzIS64fipX298
uBjrMijwQfr7+4X4p7p2odpt5qc/WzX/P33q2mtq8995/KmoGxseaBs4xqDz
mTDmpH8rV/lv1cYYb5wToo0hKI/43p1Py0YeTD6OsUcGo1yAxsCoKlLh3T8+
Hq9tHeHHHGgLMFgi2wrdgPkak76thEas1OO/59++BP9L7vl33DfU0VP86qaB
jnV7/+Mna/7Pv/7s5+fUil2TG7YUthef2X/k9KMDxzZt3be8ex1en78g05Kb
FnJMTExEfcUmYMfAi25EFNpiampqetUgl69LL3boNtXX1f/TtTVfuummhHQb
qi01Y+5HDFtioZiVyv0WRRtjfNg5adoYa2qg//4/LsqGPe6ZrhmMsiAikMrC
0yPFkXjpQMK0Y3D8SRcd94q0BgPP5dTZtzGJ29YmQ4ffe/DneI7/8uAB8Urn
vYP5FbvmNtz615+6dlZ1qibVsL53l21+wr7dBxe1LJ1dkwZ17+npifpCYw+R
4RzULuqGeEexWMzn86Dl3G1kkCYT9tnhNHQAWikrV37G2hjjJ6BSqYHoRd6L
ykgmxN49RWYAUhojHWaY64YwleT+g/uxrE5zjF+YDrArWZXEcfvG/aDuX16z
97YN+79y1/a/+mTVNXNq59ZmRLDUoY5nuuGG+Qum63gePXo06uuLN2ijSux0
egLj4+NtbW3phVnuNjJoI79z7kfZlpYlUWZtjPFOinNqIOEVzqi/YjCMB5xZ
pR6ZSPkeC2oaZixCjhGx6YgL8NQw2cHgK/Kw26/mePzY5xd/4jNzqqpTK3v6
Zizl+dDOAzgzk20EZ4t1osLIQYt9MS0M19PT09jUwt1GAbFxh+xbmFbkVO3u
zTVrY4x3UmYsm/X8q+e4iDmDQcAEqiiERcr3WNjG0OybrMl0XghmaAjrVtbp
jB9zFyxqWToj+xLHss7V1VezoJw7xwu1HiGnV41pHSIw8Lr0Yu42Mij1lvO2
BTlVu/u9Qhi5iQo7szbG1vXD/Mv7yxgMBW++dVEpc4ChBIKqf+bh0NYT5RwI
xk8fpuLdSx9Mi8QeHvjYp2fNnZ9e3r3OJQFb37tr1rxUPp+PaZpxHSAXeo5j
MeLx8XEwcPBw7jaEP/7bv9MaisOGQQqwuK9xiU+mBDUJCTuzNiam8jkGI0LA
MMpzq7AeGFmau7qhxSjknMPx2szLkDEyMtLckquqTq29b4dLArZt71M4v6m5
pb+/P+rmxxIYpLJgyVotTn+g24CBc7eRQdTaYZMpBeTd66Mw4yQt7MzaGJbB
MBieAZsJrq6ogjGsNLck4dg9ucZfvLJoMgjFYrGpeZq3P7B9wCUB2/fkSZy/
KNuUkPQgvoMqadJyXtQtKhvcbRSQL4afpWI7sjjKZTIQRRtjfAoR1sZwUXIG
wxfAmIAJK4n1dv/4uM7ZU8NZZ6SlvbKEmgx9cPLkydbW1tk1aTe7C8XRt/vg
1cBprlAoRN38WMKa4Ud/DZ4C7jYKKPdjqTTsFy7+juI/brYFKdqYe7YfNj42
wtoY1sYwGP4Cjv9zJ96wpnzXNh1EOLELb4kRGJpgYmICBKymLnNjxwqXBGzV
xm0gbHjXyMhI1M2PH8C+FNKOI3aUjLuNDHqmpXI/vvf+JE0cbtJwKdoYOAXG
m1bWxrA2hsEICBhcx0+ft6Z813Z5K2h7iBviLRExQxN0dHSkF2ZrUg27D7zg
Ru3QcH07CBsI2IULmnqsOkOOsNERx9AidxsCGUBbHQsoNyUZdlP2grUxxjsp
rI1hMCIBxpqy3g0yDxurIXENev0Rhtdz4T9G5CgUCi253Jya9JKbO2ckYCvW
9s6aN727cOXKlVE3PH6AcbCtY1tujXsdwN1GgHbo2+Z+lMtMg707M1LWxsTR
gS0LrI1hMCLHmV9fILNMS6VHXvqVbhGDoGMaMD5kfuNIQpKMycnJjo6ORdmm
qurUqo3bHNjXpq375tZm0plsW1vb+Ph41A2PH+QsTPKxY+DFqJtWNrjbXPlo
7kfbtFqke8dpzjuAWBvD2hgGIyCMjY0NDw/39fX19PT09vYODQ3hFdjwqNsV
Jd586yLZ564P92mCvuq23SxQO4mbQBuvYlpKJrEQ2wxT9VlwsCU3d1qVD3uG
X17WuRr/ranL5PN5jPqomxxLKD6+HFmNumlewN2GcmrZrjNS8ByG0dnYsjbG
eCcFPrsB2himf7HD6OhoR0dH61U0NDZnFjfiJ6wx/mxra8PTjLqBEQPeNBXC
o+GJV7RKtBLouiRmH7r2U2ff9vGTGUGjUChgIGcbm+bUpGtSDa033rpibe+G
LQX8BCWry+RmzUvVZxoWZRvv+sYas0vVBwTYB1vSLo6YRt5cdhucg4nesG4j
53600nI526dDhQvWxiRBGyMTg5hqY5j+xQ7wp/r7+4V9rq5dWFWdko/q6+oz
2Ub8d82aNebtOSoXYOmww0rK9z3DJ/RZBAw01kGzFe6AznkyGVYIy5zL5UG0
5i/IgIlhdM8GH6ubFjk0Nefa29t/8pND33zkX9kp8wB5tct66GMfyoXoNpjE
HbqNkTVSqTCfVRkoRzAceClrY+Lb7V0CFJ12JXddLY4cOw+d6V8cMTU11d3d
jdm8Lr1YrIdu2FLYXnxm/5HTjw4c27R13/LudXgdFrslN22iJyYmom5y9AA3
PvLSr5Q9aDsGXtSHygZnPyl8hMuPY2AhyYCJLhaLGO+tH6KxqQUHiFlfX9/l
y5evfPh8f3D4VeM5hr9QUsgqR6xdof/nnYmuVZvkbiMgdxvDAINJwnVFDzl+
4ZKbVO1K2Jm1MebhlV/8lnoCnnUcxzjTv5gC83g+n4dXVZNqWN+7q1RNjUUt
S2fXpPHsjCyH5w2wS7DGynwN26VJyvfg1itJ7X/P9sO6ifwZbgACPzY2NjQ0
dOjpn+0bflH+Fx4ouXvGr+n7BTkAa3u4qcWjJ0QmWBFzpm4zOjpqJF0nEAVV
+PZ770+SUYVvW+rtctgEE4Tx4+jNty7SPJhAbQwGSExDWEz/4ojx8fG2trb0
wuzc2oxwshwy9KYbboDb1draevTo0agbrhEwhOF3Kynf8acOO1MCioHgkulj
YbKMj6sYDPRSazUZ8sswBfMeZDeQ963D3+m+/0ewAF+9d0AeelG30SOEXMR4
JiaDvDA8SnlowNCRnd8x8KKtIkIxuTjNePNIu3dZGxMvMP2LKeA9NTa1VFWn
3NSzfmjnAZyZyTbiWRu2BckXnDr7tpLyHYxIh5TvQWhm5GojpaYwhv4Qc67i
Y5JIgJ4vr6o4ADcHYwHTt9if+OZbF8V9+9Ezp8ijt83+rT9oP4vxEWOCnPtR
XjmVK9CVClbIS5xdCci7hZ4v51BibUy8wPQvpsAjqEsvXtSydManJo5lnaur
axfC5zp3znC1nmfAdCvp4DC6I0/5HoRmRq7u7bBkzNAZIppqZZVyzFD0YYek
GQwZmMoViQX4G0ZKtK3yADxx6gDG8zECHha5q/Lr+JPWUm1ziLE2JuoWBQtj
tDEEpn9xxPj4OB4BHsTy7nUuH9z63l2z5qXy+byRCQR8xIWLv1NSvsOyRZvy
PQjNDC6Tgg/wTXxpJyNMUJdQVmFsBdvowLywMiMoRi3H4jD64kV9ZSE3fom6
OSGBcj8qI4KKYOJWWNcrWRvD2pjYgelfTDEyMoJHUFWdWnvfDpcPbtvep3B+
U3NLf39/1M2PATD3KSnfRWg6wpTvvmtm5KCcDpJ+RlmgiBlmIuVf8jwl95m4
R5mCBg0xfbJLlQtwEvnpg5RG3aKQQPxczv1IEXhQeuuqE2tjjHdSTNLGEJj+
xRTFYrGpOYcH8cD2AZcPbt+TJ3H+omwTbyt2Dxg6a8r33T8+HlWMwnfNDD7B
YV5jaAvQM3k9SJl/5coyysqR8WvilYBcda0qspUFZa3Q6tMZCdrWgR5OC6Ok
erKNS7A2JuoWBQvztDEEpn8xhShjPbsm7WZXgjj6dh+86nDlCoVC1M2PGUCK
rCnfHymOREJ0fdfM0LKp7ToyQ08oJT6VlHfyBj3rkYQiMt5A0ciYrqTLEoiE
xJAF6MHRQABNLaUDZG2M8XbePG2MDKZ/McXExAQeXE1d5saOFS4f3KqN2/Cg
8a6RkZGomx9LYOBbU77Di49k6c1fzQzFJXB18Y00Jgqyxkn0AeUEuUS79cCD
jq8UJDiIuT6mmnDbfQ2aFKQIFHTh92w/LOgZaFupVO2sjTHeSTFSGyOD6V98
0dHRkV6YrUk17D7wgptVkobr2/Gg8eC44m2FgFlQ9MMi5XvIHr2Pmhm0nFIu
4NKMN+wGwKqEUVZ/5G16pY74VhQKCOKOWZ0g/SEzVfkwRhtQCrKeXzgp6Ply
qnb5ZNbGRN2iYGGwNkYB07+YolAotORyc2rSS27unPHBrVjbO2teKtvQ1NW9
IuqGGwLMEUrCPZHyPUzS66NmBm+kFMePFEdMWlU0EtZw+u4fH1fOsW6sth7o
P6ZObeUCQ8CW7OkPuaiQckTdtMBBDqzYgSvbMfxCdkwxlTBxxkcnWBtj3iyG
bgxf7LkTb9xx18ZsY1NZ9K+puWXlypVRX0HSMTk5CZ9rUbapqjq1auM2h6e2
aeu+ubWZdCa75Itf3PSd6eAwJnS43jxfVw4MIopU08IcDGaYSSP90sy89/4k
zf7xrRGZECjbD8Wh9DqlBpP1QG8B/zc+6ugStGUgdhUNFBMkP9+omxYs0OFp
lQG9XV43hCmj4SCHnbsSkPaWtTFmaGPQn9F1QdVgpfFAqaujb785/j/LpX9t
bW3j4+NRXxPjT9sTUvVZPDu4XdYVkz3DLy/rXI3/1tRl8vn80ND0fit5xkdP
wJ9w33jurgSYMkQRHDpEyvfQtOJ+aWZwIfQ5LKLQGUp531KPzJbe33Hf4IGj
p9ltV0DFUuPF62S3fcYlGMNAq07C1aIFJhgx6t5y2DkJ2zqSpo2BSyIvLMZ6
ARE0DB4HeixYeqkVNFyg8MI80L+or4/xJxQKBTw7sWJSk2povfHWFWt7N2wp
4CceZV0mN2teqj7TgHN6enqoxG2pBXT0FvQZkEDzFphCgEj5roiK8Uo4C5R+
aWbw9OkSlCwlDH1gK2bGfK2MXOtexbv7D6+4/4DxjM4DXvnFb8UtihHVsd2L
6uDHmQQl9yPxc/wpyLkSdsbvEdbOCwdJ08bgAmVtTLyqy8G/wGyLRwZrbBuH
sR6Y1uUL9Eb/GDpgdHS0o6Mjl8vjAc1fkMEThIc1G8+xbnpxpKk5197ebi2S
RVUqSh3oSBgF8P6Mt3X+QqR8V2gVBmY4cR5fNDNy3uMk5KOIHUiJbT2sC8Ty
jNDznSfXbD0UO3YaDqhGT1z6vFzy2PYwu5garSWB+ZDPRUOAtTHGa2NgwWRt
TFyG7ZWZkn2VOmxzH3mjfwwdMDk5WSwWu7u7Wz8KPNC+vr7Lly/bvsua7LfU
wZL4ciFSvitJI2FXQ7Atvmhm5DqDrKHSDXgipYaqtT6mTGlAZiiBJJ4sD2cZ
NJnGosM77EWlIxYX4g200AAb+8s3/1/ib4LbsDYm6hYFC3R+WZgKoxev9MVo
v+xkzXjgmTowB2/0j6EP8ATHxsaGhobghbl5XkTPXB7x8mojxx//7d9hQpXp
9cHdzwQdB/NFM0MrMnjo8bKKxkNeELEeyiIL1WCi7ZZEUNFJYrSsHDQofhuL
3u5m3jc14opOS6tIz7z8OoUpYLJYG8PamFhA3kPtfIA/uHym5dI/Rnwhh+Oc
DwwWDtB5A26yImDDYASlD9TgVK6ZkZMzmMoB4ghnd9ta2v75V8/J9d/llNdm
S6DLArm6UTdkZmAwvvnWRTpe/eVbqx8e/saWYbkbwFmLuplBgXI/bthxmKIi
QovI2pioGxUs4quNsQJ2eEbvG7TBeMeT4Q1uqHsSEt4GDRgZZZxilgEHC+7G
VqiZkeNaHJvVB86bU/CglR4Fy6/wc1kabbyKwCUEA8TPqBtSNojHbt33Z/Ni
VUyZAfRtQc477x0kVwUXe/j5X8p21fhezdqYWKyLlQIuB8N2dd/BO0tvUVF2
oTIYCuQsItbj7v7DBkslQwbsrZKdD9QatCogt1rRzPzg8KtlmQJZRhu7ejSm
wrrAevvG/Z2bB+lPN4mAiOzxYopAfOku8Te4YxSEsS67xA5jY2PDw8N9fX09
PT29vb1DQ0N4Zf+T0+Ttjs2Dy9bt+xNL33pwy56P1FQyPkTJ2pj4ElqR+4ji
aeu3/WuXHekyfrWI4QscqHv3hwuRrJPxCzBESjZO3Hy8ElAMQdHMlPUc0SRZ
QRpE8xhlgaYwUO6t+34G0i44myilB97isuAOrf5wmS1Mpl0fWrmo21IeaIcm
udWCusc6iavIkiG21zU0NmcWN+JnPp/Hz09+dl7DTXe1rnhUdPvb793/9W/9
OXmX8bov1sbEVxuDmRQeh8Ky7t/1UznkIpiAGXWjGOFALrtDx7qPJkUJjlsm
ELiTYMLKQIYpDiJ+omhmytobO37hkpKxgREhxPwliBmFzWWehsndTTxKLjdp
ds7AGUHJwGPnmdJqmsxnQHViSm8mJyf7+/tFVurq2oVV1Sn5qL6uHsd/+uQ1
n5qV/efVO29cVejoKRKjg4mLuvnBQtHGxNo1cwNjtDHWMJ080csv4vkav3rC
8B1W6g7jgDld3u8jioEavxYZGpSFM4qe+S7RrEQzI1d44WhAhBC+HgXZKCck
pYspC5SaJuFZgyg9ZryWp8ndsK6wxFFIMDU11d3dncvl69KLRRXIDVsK24vP
7D9y+tGBY5u27lvevW66/mPtws98ft5ffnLWF/+lnxid8fORrI25Z7v5ylUz
tDFWWax1YZ2UqA/ufibJRphRCdBz5NSFIoiBIQMCL3NL/A5LYvwiXWgQG1WU
lO+Yj3yPm3nWzFBolyoSMiIHBqZYCoHN9/YJFAiKo7TbLxw/fT6O6w4UjTQj
9FosFvP5fPV19TWphvW9u5S67eLo231wUcvS2TXpT/7TnKoFNyRQGwMeaPy0
a4A2xpqGotRGNkG38Fjj6Jgw9IFM3WUHUJQTknUd4JmYMri/+QXcSTAHJeU7
2LW/dMKzZoZSf+PtvJynCSjnj7fZHF2O+lu8os0+goKZMdJagAAIU4zBaIAF
Hh8fb2trSy/Mzq3NiBh7qWPfkyfTDTfMq134qc/OfezxwagbHixYGxO7EDTm
U3mloGumxHEwv8b7noxwgD4m+ID1X5gvlEK96HjxilPpj1Nn37amfPfRRfKs
mSGjivbEzqIaCRqMnhdBSGyT2PK4tOgQo633tHCGDhB1W3xAT09PY1NLVXVq
ZU+fA2kXx0M7D+DMTLYRVH9qairqtgcF1sbEyCEVmgQl5uamUAsvXjN8BKi7
Q+o/cDZlqwV4ZhzXs3TG6795x5ry3Ud5kgfNjFwtAk/c+BVb/UGp/yrZMkwM
ARNNjOZKv0CpNePSn6kMLg4zpN1g4HXpxYtals5I2sWxrHN1de3C1tbWc+cM
DEGzNiZGXELoEBSNKyZH3gjGiAQzzuBwkJVtF7A27D/6i/ELl6x7W/zaGuxB
MwMzRVEREJ4E0jytAG+LJvdKPofWX7xtcY01xNoW+n/UDXELctZil7jSFuPj
42Dg4OHLu9e55O3re3fNmpfK5/OHD8evVJYzWBsTl5VcoT1QMsKBAsVIbsdI
LGBnlLAwZhPWP/sL0DNrLilf0nJ60MzgS2lmSSDN0w3C86qwtD2eKU1AMQp2
+QLRmWNULJVEdGZoJ0ZGRsDAq6pTa+/b4ZK3b9v7FM5vam7p7++Puvl+Imna
GFygrI2Ji9LbqjcQtMf458UwDJjrFUk2J3v3HbYOvi9eUrmaGXwjNSOx+xk1
Ack8KhxuFMWFI2CG+sIlKFAWdUNc4c23LtJafNRt8QfFYrGpOQce/sD2AZe8
fd+TJ3H+omxTT09P1M33BwnUxjz/6jlZGxOLMLV1+ZupDiPusKZD4WTvvkMI
6pSU75UrlMrVzMg1dnljcoSgGF3lcXJasI4Lia0cmHDFJcelbizRBmMEtCdP
nmxtbZ1dk3azKZUSQl6Nt+cKhULUzfcBCdTGyOw3Fhn4rdvNMF0yvWGYAbGx
WinVxMnefYf1PndVvDu4XM0MRWi7YpVDzzBQVazKU4tgkFKPMp48CFD4OhaJ
WcjLwGMyZmvJxMQEeHtNXebGjhUuefuqjdvA8/GukZHYO5gJ1MbIwT39tTHW
9G7+JohgMDSBNSYsirMbM9foA+sah8jM6flWl6WZoUkH3hlvaogEGGs+BsmJ
xybkgVLR2Fj4KZT2s5L0QRqio6MjvTBbk2rYfeAFNyKZhuvbwfPB2y9ciPFe
DNbG6BztwQR6/PR569zKNIZhNqx6bDiqrKkIAtb9BaIqlreJoCzNDO3QwTey
zC8SiMnFr4woRA7htRk/Q1EhYP1lJ1QeFz8NW50vFAotudycmvSSmztn5O0r
1vbOmje9KXXlypVRN9w7WBujbR9GU+EXW9eymbowkgPr5mvwgaTlrAgH1tw+
oN9HXvqVBwvpXjOD12lrJJ6s8SEjDUG6dF8i5Hig5APGQj1SCWh1Sf8EtuRi
DB55Leq2+IzJycmOjo5F2aaq6tSqjdscSPumrfvm1mbSmWxbW9v4+HjUDfcI
1sZE3SJ7YNZD26x7x5iuMJKJdy99oGzEBi3Uf66MI0De5Iy4XR+mfPcQDHep
maECu8LKGR+k1Q3E6PyKCOFB0zKZzmvZlYNCCvovFRHzMVK/JHanpuqzoO5L
bu60Cmb2DL+8rHM1/ltTl8nn80NDNuW89QdrY/S0JyK6aM3VxhSFwYDfrQSE
dwy8aOQ0FDlsDRFeKbeYu0vNDL6OeIUZ5WBiBBKl+xiJJV/gm4/8q7Yr2pWD
zJHmzibtPnYoYx133PfQ1gX1i7ONTXNq0jWphtYbb12xtnfDlgJ+gsnXZXKz
5qXqMw2g9z09PVNTU1G3t2ywNkZDS2INc3mbKBkMswEqqIixMXD0j3fFEWKL
gbLwV26FCJeaGRg6+iLj9RVaAY+DRJg+fizJnwx2xETZF/TbqBsyA8i/MHLJ
HgQPVgWc9r++dqqjoyOXy4Ofz1+QAYGvqk7NBo2vm9bGNDXn2tvbY1ojlbUx
UbdIBdwoMnEVLkwzGAnBqbNvK5u1B4+8pqE/bgBEeh9lo025FZndaGZgCSnC
b3w0SSuQI+xj3BiDkfqMkXQREN0V/TnqhjjhwsXf0biLui3+AxOB6GbCYkxO
ThaLxe7u7taPAny+r6/v8uXLUbe3bMD8sjYm6hZ9BNY0DmIjmPHPhcHwBdZk
7+CHPHyCgEj5rvhKZW2Td6OZocR6BpM9DQGftyuA/ZX0NE1KGE6gFJqai09I
hG+YLwzHkAKe1g4GAj82NjY0NDQ6OhpHui4wfuESa2OibtSfYU2bLBKvmWfc
GIxAgSFjTfb+3Ik3eCgFBNguIQ+Q122Pnz7v5oa70czg2dE8ZfxysCagGli+
EwNiVhik/n5y5Hj30gfUjaNuS0lgxInQJayiSSYRPVa2+UYSWrKErI2JFvAm
rGUKMQlyakeGLxgbGxseHu7r6+vp6ent7R0aGsIrk5PmC64wsqzJ3kEmo26X
sTjz6wvKHmHccEw0bhY7ZtTMUPgXUzPLBUMASSl816JTbhn8NOxR0n5enV0S
0kUbs2dEDrObupoDKypfI2tjogI6mxIVFKsAvBacWKrpL0ZHRzs6OoSWr6Gx
ObO4ET/z+Tz+bGtrwx2OuoFhAKNMSfYO/52HWHAAdVHyc8LEgZbPuLg5o2aG
PhZPUKulUlMhHgfutu+fTJWYDNugSosU2sYHwGYpSGjGIFLC7EYG2xOujXmk
OKJDX33v/UklEigUcZzakammL4CP09/fj5uWbWyqrl1YVZ2Sj+rr6jPZRvx3
zZo1sS7r7B4YcQqZfHD3MzzcgsOFi79T3CWYu8EjrznHV501M/id/ovHZ1g8
TUPQ6onvk6bMHjUJo/kCkjFoGxkgz8IAjwnGRAmzGxlsT7g2RoelK+t0JqYn
zjjNVNMvTE1NdXd353L5uvRiUXJiw5bC9uIz+4+cfnTg2Kat+5Z3r8Pr8xdk
WnLTWbAmJiaibnJIwChThBz4k4decMDECq5uTfnufM8dNDO//8MfyaRrvvXP
ANCDCIKF0gZVPGJjWBatI2hLrijrhbYtdAmwWcWwmBdsT6A2Rn6s8L8ij61Z
l4/dBKASAqaaPqJYLObzeXg6NamG9b27bIs79+0+uKhl6eyaNO5nT09P1E0O
FRiJSsomDEwehsHBttazc+U4B80MnhT9y7z67FqBSvMEtB2MnGhjiBZN8Xra
E5Lf+5uWP2TAkZdX5UwNtidQGyM7KZFrY6zbtURqRx0UO5qAqaZfGB8fb2tr
Sy/Mzq3NCMen1LHvyZPphhvgCrW2th49ejTqhocNjEpO9h4mYJafO/GGsgHf
YTuPg2YGMxrFZPCZIV5EsoBHEOjSBm19xdM0Y+hRj426IfYgt+LU2bejbotH
OITZTfIBE6iNkaeGaLUx1vRoIrWj8YsdZYGppo+AR9PY1FJVnVrZ0+dwJ8Xx
0M4DODOTbcT9j2OV58px/PR5Jdn7E8+O8vAMDuDeuOeKx+SQPquUZoZCwTg4
9VZwEE8quOqfJCzZM3wioK8IE+J2BbGTt3K89/5krCPSzmH2WF+ajGRqY+Qn
GJU2xrYcCf7E/BL3ThUEmGr6CNyWuvTiRS1LZ7yT4ljWubq6diH8oHPnTAhT
eACGJOyGkuwd/j4P1UBx6uzbiloJFtK2XEUpzQz4P71o0t5GrUARWttqtpUD
nIQcZwOCirSKFHVDbEAukg4b/crFjGF2M4LtrI2JZN3Ntvw3pidtd5frAKaa
fmF8fBy3BTdnefc6lzdzfe+uWfNS+Xz+8GEdY0ShASP30MgZJdm78WYzcoBv
W1O+W8tDl9LMUDQexJ73FwcBDIGglRWU4STWousrkqxIw1QtGC+UMz92kqT3
3p+Ek64YCvOC7ayNCb8NGAvW1I7oaZHvh9UcTDV9xMjICG5LVXVq7X07XN7M
bXufwvlNzS39/f1RNz96YBRTfR+yn/HVgsYFMODWlO8wpwrBsNXM7Bk+QU9K
z82AsQbtZAx0CzCtvMTaUya5vobbpcn/0rmQ64zAAIcR+Pq3nzAs2M7amPB5
MvqSNbUjZhOO/7gBU00fUSwWm5pzuDkPbB9weTP3PXkS5y/KNvFWXwJGNLFB
igSyEiNogIdbU77jFZmNWzUzf/y3f6dAHB6T8fNd+Aiu+hKBGC9m8NhFgwno
nNoKUUi1G3dagvG+eeeRTTuPKIwrvsF21saEPOStYSLrRMNwBlNNH3Hy5MnW
1tbZNWk3OwXE0bf74FUnKFcoFKJuvl7ABKcU9YCFMX7tMnLY1qSDmSW+YdXM
fPC//kDb//HIYjp9awtypgKlfLTOpWGw2iVow4VuG6VpEzcsWNRtqQgY2mST
e77zpAHBdtbGhPntVlmmy1rehuHdSx+8+dZF5ShrBxNTTR8xMTGBm1lTl7mx
Y4XLm7lq4zbcfLxrZCTeJj0goD8rSQzAIQPao8cgwJDCpCsp32XZoaKZeWP8
XYoompGZRB9QgaRAJ1k8cZrQYxoTxv0R7ddtbY64Stz32ZELia7y7nsfkLce
x2A7a2PC1MZY0yCgAWiP8ffcFiAwbnZ507RrPb77w6N16UVMNf1CR0dHemG2
JtWw+8ALblYuGq5vx83HW7rv3WP71GAbbR+cODBV0RH3ScEBuDQloevVMG+y
nPTwAaP6/KvnSm3zVzQzh1/8Jf0p1wkaGxsbHh7u6+vr6enp7e0dGhrCK5OT
vCTqFngK4q4GnSaFNNgx3aBKrFIrv540SHpmp3QPcosw2IVnR+sImgTb3Zsa
1saEM3vaph3Gn3gxdo6ev6BsAB4OdF3cQG9UE7z9wgVjiaJnFAqFllxuTk16
yc2dM97MFWt7Z82b3imwcuVKkVDF86PEWDDedUVXtyZ7Z/YeAnDnbdPqKpoZ
/P4vDx4Qv8OwjI6Owra0XkVDY3NmcSN+5vN5/NnW1oYZNurLig0oYBt0b6eY
mG5SEzcgZqKVJSRvItbkUKYZ8nIGOowOwfayTA1rY0L4Utsyf+gtnGWCoMiA
3RyrtvwEd1UMN89UM+rr1hHw7mFAFmWbqqpTqzZuc7iTm7bum1ubSWeyMCzj
4+Pi7Rcu/m7G2ha2TzMhezpEaQZrsnetZmpTcebXF6xrnXgcP3lu9M8v3j90
6z0/vP2efbXNHfWZbLaxqbp2IcaCfFRfh/80Ykpds2YN+/5uQEwjaDqNKZ6e
bOzGlOiccOejbsifAT+L0j9GTm49A0SdlvXhj8v/QoeM1h/BhNvf3w9j4sbU
sDYmBG0M+vyhkTNWjaVu6rXIAc7mXi2DM3FX5e5aIdVkKBBbBlL1WdxPuELW
VYw9wy8v61yN/9bUZfL5/NCQWpUbtlHp9s6HwQoZW4gyDdZk7/GdGWMEWH7r
3qLHfvzyyof+9DjaVn7vU9fU/91nZl87d4EYAhu2FEQh5kcHjsGGLO9eh9fn
L8i05HLt7e0TExNRX5PuePfSB8Q0gv4uSuX0xLOjQX+XvxDBPa3kKKQtid3N
JFy4+Dtb/ZsATG6EVndqaqq7uzuXy9elF89oalqvX3LnfUViQbFe/nADxUnB
70Gv1onUjtacBsavaJQF3CV4u4NHXtv86BFlPaLUgZNtn13lVJMho1AoiAjA
nJp0Taqh9cZbV6zthUnBT9zeukxu1rxUfaYB5/T09NiWncVjsmY3tT0efOxo
Mj1ZUbJBvhVCvBF1uxIBzOZKLq/u+4Zu27j/tg37Fy7p+suPfx6kHT1/fe+u
UnvbF7UsnV2TxnzKaancQOiUQgjbyiHieG1Qpche1A35E/CkaF6O6Xoomq3z
fvNisQg2Un1dvQtTk/r4Z2ZXLbihK5HamOdOvBHo18FQKKmbu67uQYtpt/cd
uD/HT5/HLVKI+pq+YWd2h0nW+R5WTjUZMoTiLpfL46bB38ddhdcDojK9CzWT
bWqejjTOWLjqzbcuKvsxrcfqhw+KmCd6hZAch3OBmsBavoHrI4cG683PLn/g
rz5x7edm186tzYjAl8NOmXTDDRgaMClHjx6N+lJ0B7moITjptEFVHw48I9AV
daOXpAnXsH6rG/z+D38kXRx6gm6rmePj421tbemFWZemBgTmY5+e9bWeh5Om
jQnUSQFFUXTatjX7EgjcGTwI3BwH7cSDjx0t9S+MOJdhE1+oJoMwOTlZLBa7
u7tbPwrc5L6+vsuXL7v5EFhLPP1SOqg77hu06Qy7nzk0ciZesbIKYQ3/cq3k
0CAWPoR1qlpwwyc+Mwd2w01e2Yd2HsCZmWwj5l8OBTiDigqFkF8dNocIW1xc
YCosq48ihe5hHA2RnKp986NHNOS6PT09jU0tZZma+XUZs00NTLEsYsQTDO7B
2W53SvJeMwwZWGncAUVHqjg1eChgdMImULIp+diy91i5FsMXqslQgLs6NjY2
NDQEz8jbPXzv/Unb3cff3HrolV/8ds/wCVufDuPoB4dfPXX27YQMJav0Wi4Y
xAgUYtPBP3x+/rVzFyxqWTrjTCqOZZ2rq2sXwsKcO2e43LRCYFIQzns4+m1y
E3TIFuIGlOVeE90y+RExTapJsgf0Nz3VDmDgdenFbGoI6HLhaGNs04slc38Z
HCVYnieeHVVcGIWGYTQdP33eSkXIzJKDXGGcpHKqyfAdeKaKPgp0nf6LPoD+
U0pXAycOA1mrzMYBwRoHYKFdOBgfH8/l83Ovq1/evc7lZLq+d9eseal8Ps8L
eTOCVpTCcUXp66y7ETUEaXs0STRHdy+OO24oIzHmFz3jHjA1YODg4WxqBGgH
dFdg2phS5Tzi2MMrAUgULhmkwkHDjH8NHnkNpzkTD7JauKtJu42JAlxaJc27
9Rx0FTh3mDhs1TVwjdGjQG7N9o6VmAAnew8BIyMjmBarqlNr79vhcjLdtvep
q8WXW/r7+6Nuvu4gvXQ4GZjlDar6DxyyijqIUkhsH5fVChmYO8hmapvxgE0N
IQRtTKny2XER0VUOeK/g2OBUDhlgtuw9Bo6Be+L+/gulRDKXKhIIeHyU5t1h
SkVnQC8CS1dWteQxDittaixaJHtXSjUlWYAXNIrFYlNzDpPjA9sHXE6m+548
ifMXZZs4q8yMwEinCSKcb4xRGkPaH62DNaNNxOF4WD5CXrjXOQDIpkYgaG0M
RhM6szW1ow7ecdDANWL8giOV2l2I10XNepzpjXhjiDEbSRrw0OGsuZS+4DSQ
2FIlujY/egTDU9voSiUQumulVBN7uEFApJOdXZN2s1NMHH27D14NguUKhULU
zY8BSAAWTgA8RiF3CjlGPq7RAGFt9L9pCi5c/B1RFM09DjY1VwLWxqAzWDNR
4xWDpbagCqBAh0bOONS+xNCG2wL/yPhUoozggJ5W7tSAt5w6+zYGoO2KD+w2
uqV5+SRFzhOlVJPOAaU4YmJiApNpTV3mxo4VLifTVRu3YfLFu0ZGYpNyMELQ
TB1a16XQseYhd6E1lff7RAXSrMLGRt2WMvDe+5M0I+jf8oSbmkC1MW++dVFJ
ziZUpjqsZPkOXBTo0OCR1xw2lt6z/TBGxPHT5w32WRgxAnxqeI6leqzIJ2mS
X2nNN175Dm6GjI6OjvTCbE2qwVq7zXbluuH6dky+mEwvXOCnMDMwGGmpOpxv
jEvIXTQSwznqhlyh3Wp67ui0BVgfNRskMPI1CzdIrKkJThuDqdBaC9s8ZSno
N0g4mEAp/bAgPyDzoPRGeisMM4AZ2SGfJF40KZ+kNdm7h4ypDFsUCoWWXG5O
TXrJzZ0zTqYr1vbOmje9U2zlypVRNzw2EFN2CIVTCfqH3GGXiHNG2xIwn64P
d+1F2xL3QEciYQDoSlyMfDJNTUDaGMz+SnYUfLhJalLcKDg4mPcdqiBhFBwa
OfP6b96JyxBgMAjo4ei9zvkkYxRKKgVcphJbwKRvwHVFi8nJyY6OjkXZpqrq
1KqN2xxm0k1b982tnS7o1tbWNj4+HnXDYwNaMAptN4r+Ifd3L32gicCDNhDF
aBWPghjapmq3RdJMTRDaGJG6QQk7Y+o3QEGKSxMbS3HTHDaW4jaKjaVRt5fB
8AfO+SThjxuQTxLkR5EJ7Rk+EaPJS0OILWOp+izm0yU3d1pXsfcMv7ysczX+
W1OXyeVy6zc/zGbTPSiiG0LhVAKF3DWpaqSAihxFu5uSqh+GUxvLF9CTdZ/i
QBOgtVt3Dbbkci5NTT6fHxqySZscC/iujRHpGpQ9blv2HouRv2kFLgrtR5d2
2FiKSwalgR3jGB3DeIiiTg75JDEQ4mX2ZZw6+7ZyaZzsvRIUCgVQ92xj05ya
dE2qofXGW1es7d2wpYCfmF7B1mfNS9VnGnBOT0/PO//fZXCGzY8egZPIC5Qz
ArcozMKpAhRy1zMhOWW2RxeKsBnwpHT2bqygLbR4uHHxndH/8ZRFsAVtLsvU
TE1NRd18L/BXG2NN0SBm8Lh0AAXvvT+J4Y+h51wF6QeHX8Vp8aUoDEYlMDif
pDXZ+6GRM8wkvWF0dLSjoyOXy2PSnL8gg1m1qjo1G3Nr3fSCdVNzrr29nQoX
UgwZ9xwG1qSt0EGAlsvDDBnpHHJ/7sQbkatTZDWRhq6NFTTourQpMusMmAUY
ByKc1A/LMjXxgqKN2f3j45XMR9a0DEJaFrvIMxoM323P8AmHKkjw7GCy0LE5
/sZgEERRJ+d8krEr6oSLsiZ7ByuIxUSsGyYnJ4vFYnd3d+tHgUm2r6/v8uXL
8slKFWChseTbbgsKk4YpC9G5Bij5FBF6fOQ7aLt7VwZuFBFg34v1+AsRYFei
qeBs8jllmZq4QNbG4GFV4i/jcVtTOw4eeS1GszPuBjrqjoEXHTaWiipIr//m
Hd0MFIOhIUQ+yVKistjlk8RMYU32Hu0SfKyBWXVsbGxoaGh0dNRhDlW2CQun
CZMLL24qIAodWuFUAZr6dQu5U8Oi4iHgCUSx9OdCaCGRnzB3SZQLJcAuO/Wl
iJlLU6M/ZG3MPdsPe549QWJtUzvqH4XGI0bjxcbSUkQd1wImD+4RU5EPg6ED
RFEnh3yS+FdcijqhkcqqIuxnrLftaA7c8FLrniCoHH6XQeHHMIcS7bvULeRO
EYOoGgCjR0qGqNrgEjDRtJcn8rSZtkCXhmNYSq6MSUR/z6gS+KWNQZ9UUi6I
1I46Kz9x7Wj2E8+OOlRBwlWARRw/fT528h4GQ3+IfJKlBmBc8km+e+kDZYUR
V8TefUCQl+9tp2z0KLNnbZcgZUjIGdv0DLkLIhphFheycppbBnhb1FT8opXz
deVqcBiUrNTwF0dMN0+5BK6OQl7etDF4puC0SpoF/Klt3AMzLNr2g8OvOm8s
HTzyGk5j489ghANR1Mkhn6Qo6qSnVRGAf6Gs1uFP/Z2OOILE2w7HjoEXY7GT
LjhQ5sOQA7x6htwpFBDJt1MRWzDhSBrgHpRPAEROn0VPtOS5E284FK+kI9o8
n0FD3uPjQRvz+z/8EbdRWbJEn9RwjRhmBHYetsthYymG8xPPjqLxOi8QMBhJ
gMgnWcqz1jyfJMiSsnwAy8MRAN8xY8yNqGNiw+/gzCIuh58h82cKuWuy4wOs
LxIXhkA3RPNqNZSmUh+piZsAu2xso25vUEAflneHlauNwdthCRVt6iPFEa1W
f0QVJEzxDlWQxMZSnKlPTIDBYBAwcTjkk7xn+2FR1CnqZtoArVJCQ2iqPsEr
AwCj7bBmKh+YqrQSbIQJ2nwRMl2kkLsm4WVqTyRbLMlr0GoBwgpKdwN2pE+K
APB2lyMdp5kad61EGyNSOypMGK6QDmvBeF64NDgUDlWQcOFwUtA59emTDAZj
Roh8kphzbddJtc0niSYpyd6feHbU1JklfLx76QMHobs4Ep5dn+QZjxRHQv5q
ijDr4FmDG3RFJ6KgjQY6Szho26wmj0wBaJvzYMd/tV2ErRCetTFg5spShSh+
Ee1EiW9HZ8Ns7rCxFJeJdmICNfWZMhiJAgayQz5JUdRJH8ccHgdaqyR7x/St
c9gtRpDrwijHmocP6tMNIgTFKkOeAbUKuYMARLLucEVSK4Eyabvi9uZbF621
inQDOvDmXT8tNd419DUqh2dtDB6osk4tNuxH1QPx7DAGQcUddijAUIDMg9Lr
Fn9jMBh+QeSTLFXUSat8kmgqbKaS7F3b+TFeoGCmfHzzkUMr7j+AvsH+Ee3h
RQ8M+auJckTOqSjTdfiZRuj+ozeG/NUuAU5FgQWdC0I9d+KNOzYP3t1vQ/zC
79shwJs2BmPNmtoRty78ZcfxC5fwvfA1HKogwUTg2eFKk7wqymAkExcu/s4h
nyRex8QduZwPHgRt+6LVwITnPKkcYObK4kvn5sGvf+sJWn9J+Eorep1wGMMX
V9NqSOQhd9L5h98ZaL0jcvtji/fen6QQqLabOkHqKHp8Z+8BxbyHrwELAR60
Ma/84rfW1I7HT58PbdTji8TGUjwRh42leJRiY2k4rWIwGJpD5JMsVdSJ8klG
6N1jorQmezc74XDQUIoxgSnhEcuhKs2TeASNCKXm5EpHG3In1hfywCfPRU9u
ibtBDwjOr56LU6Cs8ugG5ZNL3YGaGhaqLVcbg/8+/+o5a2rHcCJC+HZ08iee
HXXYWIq24SrQSD1dVwaDoQ+c80liJo0wnyQsmKI/RHtYj+0ZlKu868Pdf3iy
8vpLkjUztCsz/NqXmoTcRU+ABxfy99IYj1wpZAWGg5yqXU/2SyluBP0TQVrq
VHighlHBsrQxYPiwddbUjkFHgd57f/KVX/x28MhrzlWQYHJxWsKXOxkMhjfA
zhw/fb5UUSfKJxk+r8M0pIQp0Eg2dN5AUzy5P3igsjApyZoZWkAPf7uHDiF3
EY0MuViqXH8qzO91CYpa65OqXYasjRF0lLou/iVeNGwdzb02Bs/riWdHlekM
c0dwkR90Zsyhe4ZPOFRBwkhHq06dfVuHPWUMBsMMOOeTFKYv/HySaJISuMCU
yqbPA8QeKOVF1sxckTZmhp+KkKKjUdUqvfJhsdSQxSrkM2q4A536g54ha6s2
RjlBUMRI2hYEFG0M6HGp5Q88LFkmRPNFEHPWm29dfO7EG/CeHDaWiipIr//m
ncSuZjIMw9jY2PDwcF9fX09PT29v79DQEF6ZnNQuspFMvHvpA4eiTiKfZJiy
c/BJTvZeIXC7bGdz1sxQ6Z+QY84CdPMjoYigNESHQvtS2g6Mn7qNYpgaGgsa
7qyx1cYoCHO7ZdBQtDGlSgzjPigbo/AumDsfIzy4pWiM2FhaiqjjSzFp4hnx
xlKzkUD6Ojo62tHR0XoVDY3NmcWN+JnP5/FnW1sb7kbUDWT8Gfrkk4TZhCth
Tfau27wfR7BmhlzU8KkahdwjyVhCex/CjNAS+dQtLIynT/qKUhQxKjhoY0yF
rI2BUbJ1bDF8FCKNqcqveQF3GNMfeqlDFSR8HSZB9BYNl2YYviOB9BX+SH9/
Py4w29hUXbuwqjolH9XX1WeyjfjvmjVrLlzQbqcSA3bJoagTLBvMbNC7R2GN
YZOtyd6NiS9FiCRrZog8hxl2JhArCN9dokqgoelVMFQpCKCVewj7Rv1ft5zn
M2pjDIMbbQwMlCKhvGf74crnAvRJfPIPDr/qvLF08MhrOE3DvQ+MgJBM+jo1
NdXd3Z3L5evSi3GZS27u3LClsL34zP4jpx8dOLZp677l3evw+vwFmZZcrr29
fWJiIuomM+wReT5JNECpKASLnSieGRASq5khMhlJ4U4qPxR+/Jm+OrRaCeQp
aJURHQSMiHEkvpsD3GhjTIKzNkYsvCqbsGC1KrH/cIvwmeiQDhtL4UdgeMLB
5xXeBCKx9LVYLObzeXglNamG9b27cL3Wo2/3wUUtS2fXpHHtPT09UTeZMTNg
8Q6NnCkVmoCtw6QTUFQNUy1mWMV6a5hTLl5IrGaGPMHwd0qCCURV/omkCKGx
QXIM9VGP4/6TBXukOKKPr5o0bQzuvByQUbQxYrFVoda4J95svqiChNvrUAVJ
bCzFmfp0CUYkSCZ9HR8fb2trSy/Mzq3NCCel1LHvyZPphhvgtrS2th49ejTq
hjPcIqp8kjDsyo4kGFvjQ1JBI4GaGbgn5P2F/+3kgYbseFL+jXBW/OHmR3iT
bQGLRAJpEEV9oqlJ08agB5bSxogFVmtqx7LsvKiCBEfVoQoSjB4+9rkTb3C5
EAYhsfQV3kdjU0tVdWplT5/DVYvjoZ0HcGYm24h7NTU1FXXbGWVDFHUqlU9y
x8CLz796zl+eAAOu7E6C+eWNQpUggZoZmtDDn7Vpf2jI5Z9o1ITzcMnF1mfX
J3lMIMn6yJWTpo0Bo7bVxuCJ2KZ2dLkIiLefOvv24JHXHDaWYp7CB+IbE7Kw
yCgXiaWvuIS69OJFLUtnvGpxLOtcXV27ED7LuXPaZfdluEfI+SRh/BX7HFDy
3oQgaZoZygGIqw7/2yMp/yT0IdbE/kGA8m2GLwcqBZIJ4Q5o4uazNkY8CPjO
ykKqSP87oz2HjRJVkEoFjsRyD8Y4KD3PDowZkUz6Oj4+jkvAhSzvXufywtf3
7po1L5XP5w8fjiCjMsN3UFEn240/MMiiqJMvMxTYl2yxhbU3e+4LFMnRzKCX
Ul7x8IklhVjDVESI6wVZCuG7iJ5pkq0FBod6tSZie2O0MS4TXNtqY/AslMXT
GVP+4r5h+IjScqW4Or4IHQ8fro8UiqE/EktfR0ZGcAlV1am19+1weeHb9j6F
85uaW/r7+6NuPsNnhJBPUuQckGdATvZeCZKjmaH1hfDdk/DLP2E4hCbOQYcR
nCqSjD1WgL9Rf9bEFTVDG+M+wbVVG3Pq7NvKgmmpNL94RWwsdaiChM9ExxYb
S8O9BwxzkFj6WiwWm5pzuJAHtg+4vPB9T57E+YuyTWZsy2XYQhR1KpVPUhR1
qiSfpMg/oJRq4mTv3pAQzQycSorOhf/tJAwIJ/xLW3HhiAX9XZRwUocsi3jK
tMlRh5i2GdoY9wmu33rrf8jamHu/+/Shn/1CkbXAwij+FO4JqD7e6LCxFDwf
gwidTRPVEyPuSCx9PXnyJEbr7Jq0G1W/OPp2H7zqsOQKhULUzWeEAZFPstTu
IZFP0psptuYigG3XJMIWOyRBMxNhFaSQa6fSZtgQuCslWoycUL33/iT14RAc
lhlhhjbGfYJrsPprquuXf3M3Lrbz3sFvbj20uu+gYu0pqxIeFozM4JHXnKsg
4TniNCMjCYxokVj6OjExgQuvqcvc2LHC5YWv2rgNNyrb0DQyMhJ18xmhQhR1
KpVPUhR18pBP0pqXANaek717gPGamQirIIVc/on24Qad3YX8kUhWMWT8/g9/
pLjujoEXI++6ZmhjrpSX4Dr1yc/Ovaa29Ytff2zZun2yTcYTwR2AZ4cxuGf4
hEMVJJggDM9TZ9+O48IEI0bwTF/xrrjT146OjvTCLEb07gMvuFllaLi+HTeq
obH57q1/XjoUB0brkZd+hQOTDsY4DvayTYXIJ1kq0iLySZb19K3J3kEk4jtX
RgWzNTMRVkG6ImU4CaH8E5HGoB1YEoFE6ynjaZLEAsQv2t0uZmhjBMpNcD2n
Jv0f//Y/Z9vX0OVv3fezoSOncEMcNpaKKkiYFCL3thjJATrbF774pVT59BW8
/cKFeAcGC4VCSy6H0brk5s4ZL3zF2t5Z86ZV/StXrrxydXIpVdFMOUSBM3EI
bi+GedRXz6gUoqhTqXyS92w/XFY+yfELl5TdTPjkyJfvYweDNTNRVUG6ImnO
Q8jxQhrjQPPV05YB+EHBfYsbkM8OixFtAkAztDEEDwmuPzer9m8/PfsLdz56
24b9OGwNO8wLLDMIAIdWGOEA3jQ62/Ovnjs0cgYkAYMUU9s3N/R6pq+xxuTk
ZEdHx6JsEwbsqo3bHK5609Z98NnTmSz8d3jx4u2wcg7yNmcmz7zdJFA+Sdvc
vJRP0s2kjI6hyOnB1jidb1kwVTMTVRUkAXIqgy7/RDw20G5P3kEIKwhumhF5
qnZjtDEEDwmuwW3+8uOfv3FFn2LDcUNgh2HDOZDCCBof/K/fY/RhPIJRwOpa
13rwCoxwhfQ11hDy/lR9Vmxasa447Bl+GcMZ/62py+Tz+aGhIfnt4AO0guz+
YAGzwQBpdMgnCUfPTT7JU2ffVlwATvZeFkzVzERSBUmAZOdB75qksRPcV+Du
UUr8CHUptGcBzYiQJ5ukjSF4TnD9d5+Z1XTzamE0YEPQ7TlswggO6F0idyjs
KobejCqOB3c/Qx2yQvoaaxQKBZEkak5NuibV0HrjrSvW9m7YUsBP3Iq6TA5j
uT7TgHN6enpsS8SWFXiPNrzDCA0inyQGo+0+JpFPEpOCwxSpJHvHiOZk72XB
PM1MJFWQBORU54GuXwjfJNB08RFu8iXQrlgc6KhRNcMwbQzBc4Lrmtr6tT2b
2cwyggN6F2Z/h8ShpQ68S7G9ldPX+EIUZcjl8rjA+QsyuAMYv7NxH+qmFxea
mnPt7e3ORabwIJTEILbHpp1P80JbAoGH7i2fJAapNdk7TjZD+BECDNPMUKA4
kt2ptIQRaKYXGhQBfT6lx+mKIqmmwJtvXaTAGoZzJG24YqI2hpDYBNeMWOD1
37zjcoPkjD515fQ1vpicnMRI7+7ubv0ocEP6+vouX77s5kPwLBySRE3bxq0H
RSgJLM6MhXtGWRD5JEsVdRL5JK1FnfCnNdm7G+7ksq632TBMMxOhMDuE8k9U
njW4XPEhp6O3At2Phj96ZiRtMFIbIyOxCa4ZcYF76g5z4Syu9oW+xhq4A+A2
YDjwYjxcr0Pg/c7eA8oroBDPnXiD5XPJxJtvXSwrnyQmVqVrwQEsNZzd1/VO
CIzRzEQbcqfFi4DWDck1CI7Q0iVEkhwAj09O1R5+A66Yq42RkeQE14y4wA11
h7lwb2wrpK8Jh0wSZJYOtqDk+hMHphKQNMMiHgyXEPkkSxV1wrAFhyF+Diav
JHtH55EXuN3X9Y57HtdyYYxmhjpA+CH3oJXhmMgCJZPkF6AnBPH5zkB/ox6I
XyLpfgZrYxR4q89iQIJrRlwAQnjfLqetkaCLvNUiTICEK5m98QjoX+BptrsS
cA7+xU8qmXCfTxL0Q3EA8SdedF/XuyU3LXubmJiI+qJDhRmaGTn3eMjcL+jy
T+je4tICWhAhlyfoYqy2oBkBAzz8KI3x2pgrV31zmFA4fXjQd9y1sam5JYEJ
rhmaAyPx+VfP0Sy/8btP25L2qER0DMw+FHi3ikJBwPD4bJUSMDt4b0zjgYzK
gQkIfaNUUSf0mSeeHT3289eVva7LV9zd2NTsrq53GtQ9mTuwDNDMRBhyp/JP
QWRBAePqCkzEosmuXvS98L1FI7UxItO1yKGnxMFgHpOc4JqhJ9BjD42cUcQY
93/vp9YYXSSBBQYB5FyYFIfMZjDjMD5WAo/Hh1kS8yMT+MRixnyS9+/66Vc3
Ddy+cf9X7tr+iX+qvnZuncu63vMXTC8KHz16NOpLjABx18xEGHKn8k+0gOgj
aAdHEMyWtvRi6vT9w51B6pRIUrWboY1BPxdVI/EcnTNdE+dJcoJrhlYAD4Rx
UzotuvHrv3mHxIE0pwdd247hErCcbkqEYzqGUbLKJPAo8dC5YFPCge5RqqjT
l75R+GRVw8c+Pausut6ZbGNbW5thaV1dIu6amQhD7hRh8H1PPS0w+a4VpPSP
mDpD1ofA76ZuFrINj7U2BuzllV/89shLvxK13UuxdGWiVLySJCe4ZugAdEhl
S1rX1UzstNuUIiFdHy2rxNABZRlMPEqQCquxwit4PaYBE4ZfsM0n+Yl/qv78
7Nqy6npX1y7EhHXuXHJrgcVXMxNhyJ3it74HrsUiCB6Evx97RdpRi1Hj+4c7
QE4ZEbKHFV9tDKiL+1KGM7reSU5wzYgQcNKVIBtMAfibwsyJt1vLKjFiCjz6
Hxx+1ZqdBgb5iWdHuYoTA7Mz6NPX79/7sU/PwmRUbl3vfD6f8DkrvpqZqELu
slDc308WPDOIYqlBZ7C0Bb6LTHfItVnjro35/R/+WKpQne3hnHmDE1wzQgOm
j+OnzyuqCYzBUuXOBW+PkVvNcI9TZ9+GO2YV9aF74InHa4mf4TtGRkYam5o9
1PVuam7p7++PuvkRI6aamQizGpLL4K/wgziYj595Raq1FFzFKCvee3+S5u4w
azzFWhsjwz11d595gxNcM4IDeizImCKTgBEAjXeIBcGMswTabODpv/KL31rl
UoJsPP/qORZHJRNc17tyxFEzExB/nhHEhH2UncB2BSRlCf8uyZwTzkJoKzjx
1cbYArdxww6bpLjyEf7+DgZDAWyXUtNcDPwgkm4x4gsYNIcqTvDvYhpjYXgD
1/X2BbHTzICnRRVyF8FkTFV+3SLSeforKZE3Avj4sQ7ADZFTtYdWjyPu2hgF
cLIwwd1x32Apxg4vO5KitwwGAeaFUuPSsfvHx+M++hiBQlRxsl1PhNEDt+cq
TkkA1/X2C7HTzNDYDznkTnfJL+5EeVf8jaBS+sfQArOUzRLEMpwFUGO0MQKY
tuQZbfXDB62zGxwizQcmw2zA7imB06/1/hhjn7slwz0wQYhsk1YTB++Pk8Ab
D291vRsam8feeDPqtmuHGGlmSLIScsid0g77VdePUr74uLhMW2jxM5wIBpWO
wjeGk4fZGG2M7YY+/Ln34CvWkBTHoxhRQfErhYd+aORMrJ1lRrQQVZysSeCp
ilPUDWQEgkKh0JLLlVvXe8W/3CmCBugw+AUcDJ0HVPDNty4mfGZUNDO4M9p6
vpGE3HE3BCX2K/0LJj5xFT4uMZMvEE46F0zo1GHCkXCYoY2x3dCHXi38ZRKD
xUW9xjAS6KWwJ0ovxZ94MeFzJcNHiCpO1iTwoooTKwMNQyV1vSlIaD227D0G
Po8TwBDAChJVyk3RzIBI6LkGGlXInfZ7+pJckeQlfmlLqNZSVzAFWBXIdQ9D
KFNuhjYGbcYkpSQ6xrXIHihtWA5T7MRgENBLD42cUXop+ZUMRhAQVZxsk8Dj
9UQxMbNRSV1vsA5rDyl14EzMrXuGT4DPg6KY3YVkzQx+0XPFKpKQO4WXfdFm
kFjUr2gquTMhpGGE50LZJHwvR2WFAdoY28rvthv6BG/H0ON0eYyQAX+f4gmy
X8lhT0ZoKFXF6Z7th7mKkxmopK435kelvptLDm82b78SB81MJCF3CoT6knFd
7M1Bd6r8owRC82VwH4hFh1CPNe7aGEw01lTGDhv6RCZ8np4YYQLDyraXcj9k
RAJQjlJVnDB1chWnuKOSut6KMsQNaU+IHdNfMxNJyJ2+tHKFpzBHMEG+NCy0
olS4cMoGAP8lUIcu7toYcCFrCo4nnh11Vkbhqlk/zAgNYEdK/MpNL2UwwoFI
Am9bxQmTHVdxii8qrOsNw2X16axHaBkz9IHOmhkKufteb9QBtDOiQqknbJH4
HPBSXxpGZi1QRTRYOhFRsPdA6WWstTEYKdYUHLiEePkdDINhm84IIw69lN1G
hoZAt0SPta3ihBe5ilN84bmu97uXPrDNKSofu370XxLYMXTWzFDDQlsEoVwf
FepDcFdpJbryVlH6R0y7gT4dKrmCLwo0yhFTbYwo8G3lQnCm9Bk1jITDNp0R
Oi26LvdShv7AfAeLalvFacfAi1zFKVHAs7ZWgqNjTd8wEbakbdLRVjMDF1s0
KYSdmAQx363a8pNK5jgqlupLGJlqLQWa/pESV8JHCM5Riqk2xjZp3uZHj3AK
DoY+gK8NS64sLm/Ze4x3QDPiCPRnTKC2EVeRBJ790IQAk6+tZmZN30eKGN6z
/fBzJ96IBaPwCxpqZuTMh6GF3CnfQiVBYEpNU3kGRboJ6LfBdUhykfAtwfmt
cdTG2CbNYy7E0Aowj9ao1O4fH0+a8pNhJN699AGMsG0VJ8zXbIqTAJgyawd4
6dR/B1G3vg5jmBzTp6FmhioNhRZyJ119JcFt0oFUblJCuAN0yV0VC/sdEDtt
jG30csfAi/q3nJEcYPBaN0eDzPBuPoZ5gH8Km1yqihNbZrOhLNbLwdXXf/OO
NXCx+dEjx0+fT4KqSjfNTPghd18Kp5KypXKnL2iRP1pI1DSgAHjstDG41dY0
15w0j6EV4GIrEgKwl0MjZzQfXAxG5XCu4sSG2mDIZVUVT+299ydhABW3TsQx
khB+10ozQwHn0BLLUPzKs89C6V8qnEODzmOPfk4P2pcttFbESxsDO6B49Bj1
mAg4esnQBLZbLe7Zfpg3RzMSCFHFySp+xogAhdNkpx7DX2CaFryl1AoLKKsy
j3d9uB/NbCOpj2YG30v6pXA8CPIUnjvxhrdPoITJFbaE+H8QEj4QALqx6ORB
PN8YaWNwh5U01xy9ZGgFdMUnnh1VYoyw0rw5mpFwUBUnhap1fVjFiQMvhgHG
EPO1M6OwDb/DfoLNGuzQ6aOZobBz0IkQBSovnCr4cCVKmytSraUgrhofSDQV
T9Z3DViMtDFWvYFI7ZgEXRwjFoDhtQq3eKtFfDE2NjY8PNzX19fT09Pb2zs0
NIRXJieZW1aKGas4aTsNMcoFOIybOVpkb1aCcl1Xk0sYHH7XRDNDJBAOVAhf
R0TOG3mjjlFJG0gkH0StJbJscC58j0XEQhuDAWurNzB4LDNiBzBzKwlJ+FaL
WJNeUf9dFI5saGzOLG7Ez3w+jz/b2tpwXVE30BCAn3MVJ4aMdy99YN0TIcLv
Ri7H6KCZQRuEhg0/Qwj7UzJzD2vQMAjivZVkgKFaS0GkfySPAJ3WdwKgvzZG
FKax6g04nxhDH9jW5MXINXKKcYlYk154Fv39/WhqtrGpunZhVXVKPqqvq89k
G/HfNWvWXLjAhsg3YLyUquKECZqrOCUNIvxu7Q87Bl7UIfm5v9BBM0NcOoSc
kFQ4yUPhVNK34I55bgBp7H2vtUS82vdU7fprY2DDcT+VTUxop4bOBSOZgKU9
fvq8tSYvhm2SCUbcSe/U1FR3d3cul69LL0aDl9zcuWFLYXvxmf1HTj86cGzT
1n3Lu9fh9fkLMi25XHt7+8TERNRNNg1gLLZVnDAdcBWnBGL8wiXrjmZYWvBM
w2Ij0Wpm5JyQIYRGxZXiZ7lvBBmuUB8SXPZLPDLqov5uZ9NcG2OrEIa5TrLe
gKEV4ORi1LBwywoDSG+xWMzn8/AvalIN63t3oeXWo2/3wUUtS2fXpHEVPT09
UTfZWGAueOLZUWuxHpEEnlddE4Xf/+GPx0+ft3pzOwZeNKknRKuZIdqJQRf0
99Lm9HKDsVR71DMxpn24/q4s4ELIu/ScKscWOmtj4FAoCmEuTMPQCrYVvh4p
jpg0cVSCuJPe8fHxtra29MLs3NqMcDdKHfuePJluuAEOSGtr69GjR6NuuOHA
1FCqihNe12oWYwQNEX5XegJ4JriNbrIBb4hWM0M7TYKO6IJ1d3naCUt1ATwP
fNr77OPEjWdEayWVCHgU6KyNsZaSFAphfVrISDgwWViT18HNTEKVEJcwgPTC
j2hsaqmqTq3s6XNovzge2nkAZ2ayjbjqqampqNueCGCmBmezreKE+YLXZJMD
cAMQdetaDKy0v6LiqBCVZobU40Fs2JQBRiq+aPOjR8p6I3lt3twZukAfay3h
Rsmp2v36WG21MdaNJ6wQZmgFq1PJFb5sYQDpRWPq0osXtSydsf3iWNa5urp2
IbyPc+f8zyTGcABGJRiabRUnzG4GJ/1mKABLt0ZURPg97iwiKs0MpUMJeoMq
TaxlTaYUf/b2fKm3+JX+EQ+FHhN+8esZaaiNsd3Thz/xYsIVwgx9YK0XsGrL
T8AKeBnIFnEnvePj42gMmrS8e53LS1jfu2vWvFQ+nz98uKIKIFeuhlbYEywX
ooqTbRJ4jFxMfHxLEwLbPUdCZxvrJVH0cFkUFI5mBnyY7mSgixdETcui0IIk
4+F6+EZK/+hjrSXyI8BgfeEGGmpjRGpHZXzhQZiX2YkRU6CLwp5Yt53CtrBT
WQrRkl5fMDIygsZUVafW3rfD5SVs2/sUzm9qbunv73f5LZh233zr4vHT52EG
QThhk8VqeDhpk02FqOIkT3by5MJJ4JMDEAlrN4AThz4Q3/A7+jYtLYWjmSHx
uY8BZCtg8Yiaun+XmJq9FUulXJd+pX8krwrPxRcDrps2xrb4O56XGWo0hgGw
7aLsVLpBOKQ3UBSLxabmHJr0wPYBl5ew78mTOH9Rtsm6wRZ9Cfwc0x8ML2w7
DJ1ViysfkdtnMyCqOFlrboq5hpPAJwTvvT8JhmZS+B2cUF78DUEzQ9qPIMqJ
EoRVxKNxPzA9UH0BSv/ol3SfdsjiA33RsWiljcEgsuZf5T19DH1gm310x8CL
OojKYgF/SW8kOHnyZGtr6+yatBt9vjj6dh+86nrk7ntoK2w4nD7MJtZUdTMe
Pi7aMgRmrOLENzwJOHX2basTh1fi2AFC1syEs0GVtPQuU7tgXIvzPRRsogSS
vuj2aUkCR+WRPa20MXj0tsXfWXbI0ARg5tZ1VXTR5IgWMBhxE3BU4kdXQnoL
hYKPl+MZExMTuISausyNHStcXsKqjdtwyXjXT5951ja7hcsj0IhWwjFjFaeo
G8gIHOgDg0deUxZSRRLR2Nn5MDUzlI4SE2JAX0Hs1+WCIxVaLTd75BVpBaHy
xFOv/+YdegqVW299tDG4vdYsHJzakaEPYPGUcFwys4/ieq2ZseV7goGsHCA8
sC3yMfCv/6Whsdkb6R0ZKXvFMyB0dHSkF2ZrUg27D7zgZr2g4fp2XDIugWq/
wp7bqqydj4cf/xnehduIKQCWk/MZBgHcVYcqTizXNB5//Ld/B0s0IPwemmYG
UwM5OwGpIyiq7zJ9IlWGKpctU5XVytM/os10WyrXyWuijbHSITQGUxILCxk6
ACYOQ16ZvhOefZRsmrcDJhemrHLSGzkKhUJLLjenJr3k5s4ZL2HF2t5Z86b1
+StXrlQ+5733J60bJUod67c9afs6+iS5SOAVsOe8TOkLcCdtqzjhFa7ilAQI
VaQi3MXTPzRyJi5DLDTNDOZKv+huKQg7iZ9ltafchQYSflRYawk9hMhDhXob
HbQxwpm1pnbkLBwMTSByhSlsavOjRzyXSzYJcoU+98eWvceI5/hFeiPE5OQk
vI9F2aaq6tSqjdsc2r9p6765tZl0JtvW1jY+Pm77acIk2kqs5eOub7ui93KP
hYXH80JnxhyE+59Yf7NCwF21reKEaYurOBkPjJrjp89bBVSgUnFRT4WjmSEL
htsVxOeXlcWdEsKU5V9T4poKdxKhz9DdwNxXyUdFro3BtYCcW1M7Mh1iaAIY
BPAcJcACc+FjmeO4g/bau2ePyt3zl/RGBSHUT9VncRVwQKxrB3uGX17WuRr/
ranL5PP5oaGhGT/TtjK7zBKvfLjLQOSH3DN8gvJDluVD4V1CtlThboWkAYTH
tooTOjlXcTIeYnjGNPwegmYG94fuSRABYaLibvwOMqRlPRra/VqJFh03Vk7V
Xkm0JFptDB4i7rk1tSPTIYYmgM2x7ozGHM3BNAIMIFxsGPxNO592ww9hZ0q5
5EGQ3vBRKBRwFdnGpjk16ZpUQ+uNt65Y27thSwE/cVF1mdysean6TAPO6enp
cV/stVRlduc5CB0VVh1vBIHErKFsGprxABvBWzAESDzPLLQUHKo4Pbj7Gdw9
/VkcwzNE2Q7r8MRkofnehxA0M1Rj1K+05zJAF91/OBlA9+4JnqxwyipMjCOn
avdsCqLVxtgGMGHxWBzI0ASwBtad0ei0PPleucoGwUNgjeUY+788eKBz86AD
CYS9mlH2FhDpDRmjo6MdHR25XB5Nnb8gg2uBrzEbV1Q3vUzQ1Jxrb2/3XC7K
WhrGwwI3LC3oBNj4oZEz6OczqnGszhfehZmIxPNJ247tAFHFydZF2rL3GFdx
MhsYVkRT6QCfB6vX+bkHqpmhMqNdfiRjsX44Da4ZTxaLCy7F8AIkia/E6aBF
AdwHz0uZEWpj8NSsa76JypvH0BlCVKyoFsXOaJ2tbggANxMxW6segI5vbBku
FbZ1v7U8UNIbGiYnJ4vFYnd3d+tHgUvr6+u7fPlyhZ8v56bzK82aKPaEKdtl
sSfbwDLehQkOnwACg09L8u4kUcXJ1ifCOOIqTgaj1OqYzuH3QDUzxH7dsOty
QdWXZmywmLzK2iRLVNmzx0GJ37sq2NYalTbGmulapHbkACZDB4iFTkWkDYOA
QZdM7oEbAiNzaOSMbflIisxgUOO+CTNiS+k95MYMmvSGCVzL2NjY0NAQ/BHf
W46eif7pMgeaZ2BCJ/H87h8f9yCeF/k/8XbRVZImnhdVnGwraokk8Mm0MEkA
TKg1s6uYVjT02oLTzOCTqf/7vnWRxGnO1Bo3nLxml59MIhzPuV/kZGveduZG
pY3BtStTP8w+BzAZmgD90Jp2DyYrLmkBfASJ1R2qdmLSAdmACVKMJCyzlZNU
6JUHSnoZFQL0m8TzmE0c/LtSTh+J59GdkpCpUlRxsoZhRRUn3thlKtCxD42c
UYJCeOggyRr6sAFpZojB+l7fmWLRzvtGKS2M+wVKsmnexiamSLqTHio9XYlI
G2MrOeDUjgxNYKvaSto+C1uxunLAiwGZhwF3YFaUN0DcQ966m0zAtmP4YJrD
FAN3GMzcwQcs5RhSpkp0OSMzVYoqTtYRJ6o4Jcr+JArWzSldV/MO6RZ+D0gz
Q4FxfGDln0agKqjOhJxOc8l+qaiTt+TzmCtpgGN69fAJIWtjRG0axShxpmuG
PrCqtrqStM/CjVgd3OnQyJnXf/OOywlFqPjwLmYdDCuEeB5TAInny0oc2vWh
eB59ksTzUV+TD3Cu4qRhMJZROeTNKXL4HS/qMwEFoZmRN6j6uLpEAhhngg3j
I05zqVeh/cUe0j+iSeT4wGqV6/WErI3B11lr02zZe4xXABmawFrLBt0VZMBs
1ZYHsXq5wI3lYc4oF0I8j5mRMlU6+JKlHEy8kTJVxnShB2PHoYqTPnSO4RdE
DgSrQcYreF0TTYLvmhnapOlvOnea0x2iTBS+djNPkYvhQdWD8ymdFNh7uSsp
YWpjRG1uxeTCnJoRFWHEHWINSFGWCtWWVguUPgJzPawuyIAHsTqDES0wcYhV
IZGpslzxvMhUib5NmSpjIZ4XSeAdqjjF4ioYZcE2/I4/NQm/+66ZoUiyjxvq
aWnAgXBS+SQ3y1iUudFD+keSA8EKlTtgKfFOV8DaGDxW29SOzAQYOgCOs3UN
yFTVFiwSBj7shrNYHbYI9MDsJQaGeYCLTeJ58AcP4nmcT+J5fI624nkRjOUq
TskB+uHx0+et/RndNfIMCf5qZjDv0PTkLcWKFRTGf+7EG6XOodE048Qnl/8u
d5Yk7wCud1kcGB1AHu/BaWOs1SS5Ng1DH6AfWitQYzhom0HXA8Q2QJHQw1ms
LlTBmiy/Mhg+AiOdMlXuGT7hIVPllr3HxBjBoVWmSkHnbKs44UWu4mQe0Pes
0xZo5KGRM9EyKx81M5RbBh/oy5oC7SF1SNhIa3Yzfhp5AeWmf5Sj5WXRDDx0
WQwQkDbGWk0yCSJhRlxg9Si7ru7pNmMNCKMMAxB+vbNYHXfguRNv6MNAGIyQ
gfFOmSqFeL4sMg9SQZkqhXg+Qt0CRj3aYFvFCS3kKk6GQfhr1pSh6MYRht99
1MzgveQy+xJNIjl6qRPEzcTPGT+KRllZsycley93HQHjmhyigLQx1m19ZouE
GfGC1aM0o7yXS7E6ToDF0EEVyWBoC8yMr//mHRLP25Jhh0OI5zHWSDwfZsAK
pgyeiNUOiCTwXMXJMKCjUmITuQdGVQHHL82MXInJW25zBRTFKnVbyE1w/hxa
Cygr/SMYPnFv99HyoLUxojCf4v3hT302PjOSDCEHtW47xQiKr0fJYnUGIzSI
TJUYSpSp0hrtdD5EpkqMR8pUGejkCL4EwmNbxQnt5+ROJgGdE86a9VmD0kci
+/RFMyNz3cqDzCQst+35uIG0OOX8OUSk3V8UXGkS5rkv6hSoNkakdlSYAwwU
mwWGDkD/hEFT+qcoJB07j5LF6gyGbhCZKoV4HnO6B/E83iLGrEiy6rt0zaGK
0+CR1zwzorGxseHh4b6+vp6ent7e3qGhIbwyORnvhcu4A2bfKgHFfIeuFXLo
xhfNDOVmxCVUGGEDzXaI3pMA3rnkE9VUdZ/+Ec0m+r1j4EWX7wpOG2Nb/53r
qjA0gW3q0dgVC2CxOoMRR2AwknjeQ6ZKDGoSz8Mp8CVTpajiZHUrQAxgYdzv
7hkdHe3o6Gi9iobG5sziRvzM5/P4s62tDWS+wnYyKgS6Ctip1VPbM3wizDnC
F80M6VrdR6ptgXtCHNX6X1K/OIe1KWjvkJdGBu4ADXxcvhvXIzhtjG0iDmO2
9THiDvRDa+pRjIW4eJQwbpipcQkOC/GbHz3CYnUGI14QS2YiUyU4gIdMlbAJ
lKny1Nm3vWWqFFWcrGt2+HDwPQeTMjk52d/fD36ebWyqrl1YVZ2Sj+rr6jPZ
Rvx3zZo1Fy7EKTxiKtBDrIW/0eUwcYQmEK1QMyOLTCrccis+Bz+t/6IUMQ75
n3HHxIXgp0suTTcfI8uN3x2QNgaMyJraERYg7tv6GGYAXrNipuLSPzFg4cJj
cDksssNzx1yPOZfF6gyGSRDieXAGEs87bFqxPYR4HqybxPMzfqlzFSeYI8Vs
Tk1NdXd353L5uvRisPQlN3du2FLYXnxm/5HTjw4c27R13/LudXh9/oJMSy7X
3t4+MTER2A1jlAGx9KzMLGJmDCf8XqFmBuOCaH8lUzlxV2uEGaNG/Mth4FAW
R2ctDYFS4qDZbmLaQWhj8CHW1I7oDEwhGDrAmshI89SjMFwiZ4VD9jmRaE6k
jGaxOoORNAjxPCZ0ylTpsLHF9sBb8EbKVGnLH37/hz86VHGiJPDFYjGfz1df
V1+Taljfuwt03Xr07T64qGXp7Jo0qHtPT0/oN4xREiI5g1WvJYoMBj2/VKiZ
offaqlxcgsi5NahOn+/QKnKl3ZBwUuZjwM64NTgIbQxccmtqR7Qqvok4GMYA
1gDzkTWRkZ6pRzEYMZrg7TpklsPgwhBG+1mszmAwbAEGLraoi0yV5YrnRabK
PcMnKFOlCGPCQJWq4nTPwwOLGlrSC7NzazMixl7q2PfkyXTDDfMXZFpbW48e
PRr1rWKoADW1bnMQm5SDVl161szIuztdasutIBG7NWBOy/SlaANlX8eZM34R
7YG19REU+KuNsU2dF9NEHAzzgCkGc5ZifMCHZxwmIcO9WB0tZ7E6g8HwBlAO
Es+DmXgQz+N8IZ7/0TOn9wz/fE3f8Fc3DYh/VS24ofq6+qrq1MqePgfSLo6H
dh7AmZlsY1tb29TUVNQ3hmEDQfCsPQQ+YKDhd8+aGfRtimB720qJAUI8QfmX
iKThk0u9l1zjGfNaoJ3uU7X7qI3B1eHTrKkdI6zDxWAQbLdFwwuOJFGtLVis
zmAwNAEMJmWq3DN8oqxMlbdt3P/FlY/d8LXdf/Hxa69bkFnUsnRG0i6OZZ2r
q2sXtra2njt3LuobwHACZivrfCrC7wHtC/OsmTk0coYcTG+ehXAZcLHK2wXd
LVUslbJE4u3On48LocHlLIP3URtjG8PEB+rDiBhJBmYfqwgTFiDyREYsVmcw
GPECzCZlqhTi+VK26yt3bf/EP84BD1/evc4lb1/fu2vWvFQ+nz98eObC8QTb
fDszlrBkVA7QSHh21vA7OkZAAVsPmhk5raLLzaEKqLasIkMlruv8rudfdXJC
wZ/lVO0OZ/qljYFjhfug+FzgSCyyZegAWHJFw4m+CsMeYaIYFqszGAyTIJQ2
x37++jPHzz7wvWc27Xy6+/4fta/eM6flzr/9h1lV1am19+1wydu37X0K5zc1
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
CsFGN2OqVHt7sSyAofZTqZRXxR4dHUWxS8sjdzcuNVnsZWs34zbxrv7+20nG
oLRRuwyEhO6xbtvPs56DKSetcUCokLzH8dsPfk/yXgI3hMDz8V/+igpPESIG
LYWc1XGmWGO8BXMllpc5ebZoweQLF1m4qgtHs6XgVjK5L37slYWr01QkC/k8
vYpU1YK6jcmLdosBsUMKASbThmVS7W0hfwHsFY2NjeHKaGmoqnPvW2bWCKru
bMBtotiq/V5pazBjdyM+1mx9w5qhXntQkB0dYsAXCh1oPzQl1GQDZ3UoKExm
3zz5nrj7+goykjdPJArO81IUb5WPbmeTO3nI01qMhZJ4G6mq5cq1m919Z1SW
IrFDCsFGzO8OYZcAdplUKlUXi00tDc+d35S12EtXtk2eftsnv7W1VfdqmB5i
Gqh1SlQdGNdQD0lX43w2p7MCt+yBIwZ8oeBAx4tWgG7ZwFkdf8IJmJBKL+1P
0IfwYJq/kxK5l9/36Cv3TKRwt+YqT1O/pvXdD274ZF8SXNbCdTyPVNUtkq75
XbJwCAFGzO+2Y68Ado2xsTHMOGZHayaVhJat3WxQ5nWbuqaVRcKRaH19/fDw
sPFlMXIdP30xk80QQ5vJ4qGisuUcgw6JbQgYUuAGO7OLAV9wAXSVVENyfSPm
rWggmEIaTFHFWb1QUKYRRl+R/wXJT/7+tbtJt+eUy5Fhk/sjm17jzs2ygcIP
kapadO2QkgRbCDYG5ndZhM0JhwSwC5BzfqgiipJj0qFdL9jZ+/aCpuX4a2l5
JB6P9/T0mL/4lWs3oWq0hkTbN0/HBUlXU9J4OrbuOUEK3FpyfjHgCwZAeJPq
NhM2SJu70aKSgTsZ/grJIc7qhQW+MjZ82XJB1u31P3qxeWIHImvXYcvJxp3H
2CJtuVQ+iVTVkskOKeZ3IcBkqvaScyknHBXAjpJKpVDyaHXN1NJwaagqcffi
pSvb1mxM4SdupDwSmzw9VBGpwjnJZNLaBq/Q1ZgMsnXR2jaC+UPyiQ7oLhLb
lHOeDjHgC1mBGFDOBDNNQm/+6SNIHXzpBgtDyzYegLp48+R7UhMKFE4jjJ92
SVn2upk7sfUSug5r12GTO4Zy7ntzzU6jxD+Rqrro2iFRYLQvWbQSgoputZct
D8zjggB2iMHBwcbGxlgsjuLNmBVB+TG/mIK7KL+9NFBTG2toaLBliyh09ahO
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
ETP/5CMvfOrgC0mVM0xHs1cxu7ANE5q9oVJHc9tPtKVrpLsXkTPDhpAMw2ih
bUENunE389vzFe2mNxxEMF/XMqsWMxlPuuypdTuci1IHzLFIxAvQoWTMZYoh
tW5H80s0ycUX+ZM//XPxl0Q7ESMukfE6oDw835wHNHsTm42a2+5ZBepOIXc7
XbqH5sywISTDMBmRXdnbHl86+aprAilf0U7DCvJ1DY1xyJzXFczXYibj6dDt
GUtT5XNwfD0oL7KviUSRxakGnurqv4JuCuH6RKtFmCFmbyd4q4zT3iyg2RvK
Qjcdi4iHugVIdxPltzYJ5sywISTDMFlA5mf8QaMzDRAOBttl0W4/NORZWVPW
aNsu0GIm4+nQ7RlLUz02cm9H9nsURRbdniL6LRu/p7BkhPN5dtUkF7OYCHer
gGZvwuFTYDr3L55uku5eIGeGDSEZhkmH3DeGHjQ8feu1ZWc7GUTezMWd4rFQ
w4XUXI2lcFrMZLzMBuyCjKWpHhu5x6LlHoWSRbfjrNTzo+RFonQrUMhYyF6i
q9eUNR1o9oaMs+gqGa21b0uXSXc5Z4YNIRmGASsrK+fOnZufn6/X63Nzc4uL
i/STtbWQoBBptqDrIyQidSzaA3R6kVcKchHtnjR0mjsBLMq/uPRTXe+pxUzG
k84tS3pS9kkEG7nHgLmt9hQyodvT1dlBeKvrXhRjigcBCd7qUQUsM2W/FKRp
c89yx0TGXLqOaW/btnSZdEfOjNxs1IdshmG6jOXl5cnJydothoZHS9uH6c9q
tUr/HB8fp55BfjF1GkHXR5Lx1Dd2RNWMC6Ldzh4lCNHoiufrMpPxpLuQRQhl
L01lI/cYcI+0Z5GhA0nxuyl2X0Kii9BviHiryzkofy2JH3otnlJATV0EXqjx
mxPVmFbnNSmW9+/OcXVDIyJnhppNoiGbYZhugubmCwsL9LCXh0f6Nm9b11eQ
j767tpbKw/S/+/btu3LlpiaXSylFt//subepe+wUzeOCaLezJziqwzQmz0P/
ZA/TadHt2UtTPcOO1h0NZI/2JwUzyiy/rr55kK8UIp3JEn4le19nIoEtKUhB
N1faY6eji8eFDl8vf9/659++b7f6kM0wTDdx48aNmZmZSqU6UNxOj/w99009
cqRxvPnqCxfefer064eOnto18xD9fNOW0lilMjExsbq6ihAK/YW6xE6R6wJH
wi+wCDAahjIxLmPtO3vijRbdDj2WZW5i2tG6c8GV0S54Mu7EiqmWuhrE8pb4
ZwordXyollVFdKR5zRZNzOuD2FlYjKebpLsYskdHK5sLg4pDdt6nzDCMTprN
ZrVapRl6f2HowNwJevaDx/zJ84NjOzb0F6kfuOdj99OAS11xLvmKGXEk3dFO
2qehdfDseSkAg2nGVAGRcZEx396oo3XnAt2ufYKZUbdDDao3Hl8JM6zU1SPe
WNzR0nto38U4Bdrz6EKheUHumrlrpHvSIbter+d9ygzDaKPVao2Pjxe3le/c
XBIT9qjj1EuXikMf2TRQGh0du3jxYt4nngZHRLvsAme0FsBQ3RlWCrLbBOna
Pl7LKZl2tO5QYBio/ZHJqNtT7L4E9YifIH6uKP5RCqFr20qcUl5lQSbq1oNY
MM5SIXcDsewkHrK3lGq1WocO2QzDBKGZ+PDI2Lq+wmx9PqYHEMfjT56lV5bK
w9Rv3LhxI+9zT4Yjot2zaGssNnaf1u3zhtKG7EveunIwZGvu1G9iwdG6E8Fl
0e46klG3E+KJVr9fyEvBkgrEv7p7P95Ei1+W9j3RkiKn2Rv9IAsbVSQ6jRzT
k7LQO0M2wzCh0OM8UNw+OLajbQ8gjp1Te/s2b6P5++XL+XggpMMd0W5tG0Fz
w7G4klp2KdKl2/E+GQsWoCQdtzC1SfadraLIrtuT7r4UmhKfdFcyLBLpClAj
UyWvfS4MTfB90DQf3zSXHe5AR0v3HhmyGYYJpdVq0eNMD/WumYcUO4EDcyfW
byxUq9WXX+6YmCSN0RDtNELlWEUr+/CYHrkMLX/DTEZLeFCXbtdSmupJkqwL
rJ414qxuT7pvb+geUoh4KzYeNDZd6zIpHCn1goQ60zF/a1GLtnSodO+RIZth
mCiWlpbocV7XV9j/6BOKncCx516h14+Mji0sLOR9+kpc+Z//CheyfEW7Z3el
GFWWerNJNZrJeFprHrVsBYXsZS1Gf12DofSh7Lo96e5LUXtIYTatGPFOGueP
J50jpUZsngCyBM1t9qRIJ0r3XhiyGYaJodlsjoxW6KF+7PhpxU7g1EuX6PWD
5ZGOKFF3SrTLlVmmF8TNuRpqNJPxpPPMHmnUVS3LRu5BxBzQnG5P/WAmzeGB
zvet72CdRTHgDMmnq5Fg4SAvZ1prm0DRLbNTla8CJhG6OjTTdP2QzTBMPJcu
XarVahv6iyoVLuKYP3n+1uS90mg08j79Njgl2j1JpVjwMTAnPjWayXhavUq0
lKZ6bOQehs8+URdaotawAFV5wKPWd2SLJ5WAc9I4f1tSOFLqxaYjpeyCm3u3
jK6Srr/R9H4tdPeQzTBMW1ZXV6kT6B8o3Tu5W7ET2HPwGHUa9FtLS06rGlm0
kzzIfXSwufOI0WQPjWYynlbdrqs01WMj9wBB+0QtaNHt0F0qE0m0t2BcHfM+
lfaDOL9GlYvYr+mIdxRJk4WygFpgo7vOKdJB0r2Lh2yGYRSZnJwsbiv3F4ZO
nn1DZcVt6O4J6jSoE3B592QanSG9aDDKfX8oeadvC0YlRosrNZrJeFp1u67S
VI+N3ANkT0SPf9ssuh16W0Xu0mQzqpEg4q0424U1iq6pMSLeedmQJpq5ZETu
EtW3uzVHB0n3rhyyGYZRp9FojFUqd/QX77lvqm0nsHv/3PqNNytcZmdn8z7x
SFwT7Z6UW2InuGTOzFCvmYwn6fYnTv8g+7uhNDWjlGIjdx/wCdS7AKHlbSF3
Fad+MZbviXK8ofQ0PmVJHSn1YjlXB0uQ1Evnvh7qdY50774hm2GYRKytrdH8
fbA8sq6vsOfgsZge4NDRU3duLhVL5fHx8VarlfeJ3yRYSeSgaJeTOS2cj1HN
qddMxpPOVksyucbcezZyl4Gk0avbtbwtssIUGzzy4YP/hdaoIlwhOzWmtZBc
tJZkHorliQPyr1xY2KI7jolkqHUAnaQL84uOHrIZhtGCKHUpbC1TP0BT+ODq
27Pn3to5tZf+t3+gVK1WFxc1L5enQ5SSyeOLg6Jdrnez41dgNMdDr5mMQKNu
x0J/dm98NnKXSZRDnuJtM04HMMlSeeTjXwzh2laNI86v1/PcZpJ5EMubt8oW
W3rtatMhS/c9R74t3wKxGJFX6YGPDh2yGYbRSKPRoH6gPDxyR3+xvzBUu/f+
3fvnHjnSoD+pWxgoVdZvLGwtDdFr6vW6I9sli0Vt5FdQvwrRTn/Jd1MPgFoz
a5uYG62p1GsmI9Co2zW6wbORuwxcCvWuPujS7chvUYkSow2HCkVq2OK+q2wM
hKySlOcdRlJHSr3Yd5JHnMER+6Yo6S7amJ01UxU6cchmGEYvy8vLk5OTlUqV
HvZNW0rUG9BsfQP1CQM3F9pGRisTExPubLhGAz22QKWulfpSxKlIuDpiA4LN
Aa0NglhnNzQI6jWTEWg8YVQdakkzYCN3AHGlN+9Xl25PlL4FkR81B8EL2pZn
6t19SZDUkVI7+Prff/vnFj6Ovi8qfE1vIa1IULoj81+lVVijs4ZshmFMsLa2
1mw2Z2ZmardDncP8/Py1a9fyPsH/AMvZdHztzA8cFO3U+eOsrI1HiCUaysnR
ayYjmP7QHlPLu4lrriVIzkbuQJc3vg9dup1k1bRydTPmIFG6XTaWiU/ewDKE
3mxwm74uQVB7rvcxjwHxDZU1DjtQ74HcezqrZ771FoabvPa0DaWDhmyGYYxC
vcHKysri4iLN6B189tHPi2Pq8JkDX33JKdHuSfIguy2hIh/8+jdY4jeR2hHj
fZ0FTLi0vJveTGw2chcgecNN3e5JVkJt0xja6nZPquOIb+rad18SyBOHXLIy
IFmtOTQin/DZc2/b+cS2YA3380fP7/7iN+QRx52TBI4P2QzD9DiIY+P49JfO
PnL8FXfElVxvZa2+DAYXhtwmkYSjV6UIbaxLt2ssTfXYyP1DoNv15k4gXp1d
H+JOtV1pUtHtcrJKzPOrccsAH4kcKbVjuicJQlcSFzwXD8xQ6Kwee+bi7OPf
9A03usICDMMwvQAkRPCgnp8GZRfqhpD4alPvmY6S6ZXEQK9ux1qMFsmBBIwe
N3JHypDe9oywdnaphvve1v9HRbd7t7uLx7wMrpJ6V7gSOVJqx/TKXSiyX27u
leB0AjTQIPE+eHDuHMMwjApyHCzmePbc2znuwYcRn7p9awOQhaxUrGXrvbZ6
dbve0lRP2huol43codt1+fYLMAfXMhMUPUNbqamo2z1pXS9mWmHIIdOTSnjs
+Mf6MF0pEwq+srU4fxCaqtM9xV6uMYc76wIMwzDOgjE3/iB1kVfUXd6/26bS
Q8qBORcIxPP1XtuYfXDSobE01bu1t5diILeLSbonqSJ6w/iYV8Y/d+hD2uou
RIBjJuBYhNKe0IJrnsseTEiK07KRsSJy55lj4OW9q9exYBpz5LU3FsMwTKcg
m3FFHTTK5Lt/B+JUlkNGFrzjxJCq163ak2o/db0hQqBahn4SbOKL97KRO9I2
9Op2LBJpeVtIzfhHD7pdpcYWqy1Rshzq2kStIgL+uaz15GJHKacn5fu40YS9
7dquI9swMQzDuAkkcehB8i/3hUsoB8vbc1gIjiWy2ksEQlu63lB7CBSB3J41
csfd15vWi7fV4lCErbLic64S6XbI8pgnWuVD04E8olzyRiws4YWCdb3ci8Hp
jqNAOPRwIRWfYRjGTTCABg8aN6mHz73/lHPvLaekWkiFNWQm4xnQ7eoliknf
sJeL0QxdAfG2uvxYVPbzTaTbPWn5JqrlowFrn6qjPjQXfWjfyF2ALWvb+udb
Ox9MJYKH3ooPhmGYriGq5yTJ6sguGIjMWN6gHOlDRgd3Q2YyngHdrr001fvQ
Hny6h43ctV9Sgd6qZASoY0K1SfeQkt3UQ7saQ7svCTAl17tTrSLodS0n6mBu
5c5MmVpLaNqMU9swMQzDOAIKxOSDpJQ7Fh8Iydrvxu3srmjITMaTdLvG64bE
YF0TGTgW5r52nxdCtGjPBoEy1PJuMFSPmV+k2EMKU/LQJHb0TiZCryiLzmWv
H1wry0XZ9Nhipmxts+m2RKXN9HLFOsMwTJCg9+OeI992qiCIzhBC0f4og482
uhWIITMZT9LtGkPZektTPTZy1x0YB4gn62pXbZtTCt0evw0TJgsmgsP5lkWj
ZMD+p8NriL6+UwHt0LQZ3oaJYRgGINQ5/WGJllPduCedofZtE9tizSzOkJmM
p3WzewBXCo3zux43csf0UO/b4u7rymRum9CVQrfLbxtaly0mNfSMpDvneHCJ
cjFyx6fbL8rGGl8uaw3xUOuSPd4t50YyDMPkxcrKyrlz5+bn5+v1+tzc3OLi
Iv1kbe0/9Jvs/UiqOEdT3yhIbyAkZT/qYmc/dHNmMp4Z3W7Cb7zHjdy1lyEI
1HdBUgSWlVHR73S6Xc7cCOaxq9TDpgaRZ5tW6sFPt59q/sGvf4Nljty9woLQ
6WFmETzDtkMbwzBMZ7G8vDw5OVm7xdDwaGn7MP1ZrVbpn+Pj49TjiZeJjpF6
b2ct+KBn7Gc+Y/nedFK9OTMZz4xux/q+xmWIHjdyN+SagpURjQ+4ENh0m0JP
NZ1u96Q89mCjMle1LcBjnst2cthhwX5RNibLzjoutq5cFWkzaBWKQxvDMEyn
sLa2trCwQJ1YeXikb/O2dX0F+ei7a2upPEz/u2/fvnd++rPpXDc/bQs0QMyO
iuaAkDC9SmtUlmjPRRdoL031etvI3cT0ypPasEaT8Hinx9S63ZMalW95y9B+
sgDLarkUaeJ65lKUjQqIXEzsFRFpM6+/taI4tF254tzyAcMwTCg3btyYmZmp
VKoDxe3Uld1z39QjRxrHm6++cOHdp06/fujoqV0zD9HPN20pjVUqW7eP/c3f
/TLvU45E3pU7l5xnjGimF5HNmcl4kiDUew1NnHMvG7lrT0QXIA1DoxkLblNo
XnQW3S5vwyTPB02s78jk2/CQepRLUbacKulgniT4t+trYx/52NhYRWVom5iY
WF1dzfuUGYZh2tNsNqvVat9dW/sLQwfmTlCfFjzmT54fHNuxob9I/Vu9Xs/7
lCNBUmsugSA7tu0Cc2YynoEMZ4GJ0lRPMnJ3YUcYmyDkq/c2QRPqjVSLxBKa
VgcfDej2dA0Dk2Vf8Nnc7kuCfHcQwLfLJUCBZ5mmRW5my3jdNbQxDMMIWq3W
+Ph4cVv5zs0lEYiIOk69dKk49JFNW0q1Wu3ixYt5n3gISPmO2QDdKHZs2wXm
zGQ8Y7odoVG9ZhTwDuq1fRIN3SZskqU3kozVluB2RSp7M8VAsjl0GybMawxt
kITrrzGhSB1ctLysXRA6cHMDhW4a2hiGYUC9Xh8eGVvXV5itz8f0bOJ4/Mmz
9MpSeZj6wxs3buR97rch+znnYs7mSfE30yY2Rs1kPJOCUOgrvbu042oYmsU4
CyYs2hu8mBXqvU2YVgfXwpBRn1oBQqLLU2YTifoyWJgw7fgailyUnUuYgno5
TJccXOrqmqGNYRhGhrqpgeL2wbEdbXs2ceyc2tu3eVutVrt82aFdljxp4M7L
thf5rhYc4/FZhtKB4qsIs4AqQr1KA0buuWw9nxdZ0sLjETNQvebnmLUFp1fI
qE+t2+XCFsyasb5jLmsOMedchCuWMPLawBQdhYPVJV0ztDEMw4BWq0XdFHVW
u2YeUuzcDsydWL+xUK1WX345z00qfUIFOta0+2IMNsdQQ4niwJxux1XSG8nP
d+v5vIBu197kDDnDo/zEV8yYXbd7UpYaZu5Gd031fWguOVo2YwWhyBb6vkZI
jTPHIHznDm0MwzAxLC0tUTe1rq+w/9EnFDu3Y8+9Qq8fGR1bWFjI67TFcAzh
R2MHorh5xZ0sr1mbTtw1F8g1NOPIPWcgF5B5oj3BGAJbb8VlVB67Ft0uZ8qh
cxCtwpzpCnK0cvF18Rwoysa9o0uNmAk1G/pnLmn/gg4d2hiGYeJpNpsjoxXq
rB47flqxczv10iV6/WB5JMfSezH600ApFBqyfPMKOnnW471ICzG0uGBOtxsq
TfUcyBmwjxa5Gwomhnpd/hAA92XO6/oieAypcxAmJ8hjMed5gocxF0dEF4qy
8eiJh5outVivyTF5pkOHNoZhmHguXbpUq9U29BdVKnfEMX/y/K2gRKXRaOR1
2hgoT37zzfeuXkdtlOlqUJVTspNfDUs9Q+9vTrcbKk31HMgZsA++svathaAG
tW9DgAwcOZKvcQKC9xc57Vg4MBeOxsOSl/fsdN5F2TQdw0oHNRhM+swFFtrS
oUMbwzBMPKurq9S59Q+U7p3crdi57Tl4jDpD+q2lpXxiKRB+4ph75qKhkKM6
lodOBC3NCdSMvnzxmHOezz1nwDKGjNY9k5nzSAiXE6U06nZ4QopsmReXfmp6
Qi3X2+biZO5CUTZWOvZ8+dvonE1M/BXpxKGNYRhGhcnJyeK2cn9h6OTZN1RW
EofunqDOkDq3vHaFxgCB4+DXvksj5vX3f53L+XjWl6pNm8l4hnW7od2CPDdy
BmwC3a7dQ8lc5jzOWU6i0JvwgxqKh4+//ObyLyxkTyGqn4tydqQo+48bFz9/
9EVf52zIqFaFjhvaGIZhVGg0GmOVyh39xXvum2rbue3eP7d+483KndnZ2bxO
GENk8CAlQIKNBmjLiaaWw7ymzWQ8k4nTXubNMWNwIWfAMkENrAWjDop4XrDg
or29IVvma2f+PRZtdCs0GMVrX/hQQS7KtpmXQp9FjzDdMrra8hqofNDP89pN
teOGNoZhGBXW1tYmJycHyyPr+gp7Dh6L6dkOHT115+ZSsVQeHx9vtVq5nC1G
qJiDXmBz429IDmtp1abNZDzDuh2a0ITTvgs5AzYxpNsxAzJxj4Iuo9rbG7Jl
PnXwhcl609AXAbJyzkWmok8wN5cPQt80JoqCQ3uJhCKdNbQxDMOoI0p4ClvL
1L/dc99UcFXx2XNv7ZzaS//bP1CqVquLi5pdndXB8n3U8fmvfMdyderzL//Y
J0JMY9pMxjOs2wmhqUxY5zmSM2ANcz6H5majmLjhzU20NyxLbf/k8anDZ0xv
aQpPlVw2a8Yltb9zKzrAqCOXNQhBBw1tDMMwiWg0GtS/lYdH7ugv9heGavfe
v3v/3CNHGvQndXcDpcr6jYWtpSF6Tb1ez3Eb6PgxgtSLXrvptqAkzWaczbSZ
jCfpKENjrrnS1F4zcqc2b0i3m3tnT9o2V8yyDc0TRbZM6f6v/vZnT1J70PjO
QfAV8tqv2XdJbYIFlKgFUMvnI9MpQxvDMExSlpeXJycnK5UqdWKbtpSol1vX
V9hAfd3AzQXEkdHKxMRE7hvJxSTJ0LBlX6chVdtaTMmCmYxnXrcbTfXpKSN3
oa5NiFLoQBMTUgTDRdq5IfsakS0z+sCTd338TybrTdO532JCndeEEUY9RjP5
23566GEzcTFIRwxtDMMwKVhbW2s2mzMzM7XboU5vfn7+2rVr+Z4exGTweOL0
D3IZK1H+Zm1gsmAm45k0GBRAp5nYUbGnjNzRArW/M9a2TMRvsVBFM3H6O2S8
if157/7006TbS/d/9R/+h9mHFJ6TuUwYaVaSrx0lHurgkbu/k+NDG8MwTEao
l1tZWVlcXFxeXnanT0Mc1Xc8e+7tXMYpiFubW5xbMJPxzOt2o6WpXi8ZuUO3
a38EEEE1VLiBx5neH4kWJua/s49/k3Q7HfOnzM7j0Krz2ieUnqbpXEtB6XND
jWVs9pDxuDm0MQzDdCUiJcB35LJHoQBiw+aWTxbMZDzzut0zWZrqSZoz90Cf
aWDoob2yAzXghvIu5OpUtGoTDq4//Mk/DOw8Srr9d2afMe0QiwljLvuEwo4y
rxx771azCc1m7PoZNMMwDCOD5Af5yHGPVE+aR9gshrVgJuNFbI6jF3Olqd7t
OQPa39wpkM2ivRHCCtLc1jlIoT/+Yas28SiRYvzogw3S7WPTT5KuNro2F7S4
tAl9NeTY5zJxENCMLCjd8+2rGYZhGMsgdxRHXjtoC5Bsb3lN3IKZjGdFt5te
OEDOQHcbuSPbxEQkWagvc3MfJH3hMDGJIzVL77z9949v/9QTppdgTBd0tyUX
I/cgNFfyLY/2QrEJwzAMA7AALaJJeSVwAuQn2Jw+2DGTEZjW7UZLUz0pZ6C7
jdyNZoZjccdQ0TeqU8emn5w6fGbaQHWtgKYe9z/8Z1s/8dVpY5W2AnyjvBZ6
cjRy90Fzf7nTzit3iGEYhrHPe1evo/O3vB1qKCRjZDcMa5+LQdlCNM+0bsc9
NZSLK+cMdLGRO3S7iWUFC8UUYr1g6yeOfWzvs+a0rqjeHf/Dr0/90Rmhac09
tpjs2PdRFyD7yHQyf1voucPJTPeGLyvDMAzjSeLE/naooWB933JVLDYDNRSj
lrGQBWRur08BZGcXCwZzDoqeFfMiMRUt7Dq2/fePm2sJqAJ45GvfNZ1ujZro
vDJV8uqdQiHpDssjc4USDMMwjFOIGkb726FGgZpKyxEtJPlbSBOaNm/ghgHd
0AK67Fhi4v1dAOlGJnQ7LqBRBfilk68Kn8bDT10w9BE0zxVfZOnSZWxwbCgC
YNrjtC15rQZGQecg1iC6e+WLYRim11hZWTl37tz8/Hy9Xp+bm1tcXKSfrK2t
iRrJXLZDDQUJHuZkRhSotbRgqmZBtyMebm4agmX6brWhQxq/iQCyqOg0PfFZ
+tFlodvN5bdjoeovfnwZGt5ctoxYSMpRNqP6hr54LicQRCx5iPOJ6urzPkeG
YRhGCbEPtdjAbmh4tLR9mP6sVqv0z/Hx8UN//ERe26GGgqC3hWQVH6LOy8Sm
9kGEHYRR3Q41ZSFpoVuN3GFgYugaiiZn1L/ovV9dF/7qO/Y0DAld3y7DWC8z
dNGQlpNXJQ68951KTaF5+qPHno/p6knM532ODMMwTBxra2sLCwvUaZeHR/o2
b1vXV5CPvru2lsrDmwulBx/ce+VKbgYyvpiVqHa0b4+A4KcdpwgLut10aarX
A0bu0O2GdkeysMRDoro68xTp9rs//bSh+DCMmISOpe9iNFsGyUs5mpaHdlN0
qfMqVhVd/aaBbduHIrt6Ggj27duXY1fPMAzDxHDjxo2ZmZlKpTpQ3E5d9z33
TT1ypHG8+eoLF9596vTrh46e2jXzEP1805bSWKUyMTGxurqay3nuOfJtJA/n
GMhC3qwdY0Oh203LXdMO4V63G7mb3tkWJeHmcplo6jFZb4r9TM3VQYuWhtw2
o9kyFrY/aEtwWZDaP81Tctn2olO6eoZhGCaGZrNZrVb77traXxg6MHeC+vDg
MX/y/ODYjg39RerP6/W6/ZNEpE4kWuSYOGrTTMaTdoM1+immS1O9bjdyN63b
cfXMtToRnR785MJHH2yYC+yj0gE/MZotIx4f0sl5pbj7ynCo9xBLDPaz+7wO
6eoZhmGYGFqt1vj4eHFb+c7NJRF4iTpOvXSpOPSRTVtKtVrt4sWLls9Tto5/
cvEHu794Nq+KM5tmMp4t3W6hNLW7jdwxrzQU2kX7NzfrEb6FOz739Y/tbZhL
+MGMG55URrNlLDTstmBicurFH6ETM3R5Y+iUrp5hGIaJoV6vD4+MresrzNbn
Y3pycTz+5Fl6Zak8TP3/jRs3bJ4n8ofF8Yd//O2Hn3j56Kkl+jkOO5byNs1k
PCkSbvRTLJSmet1u5G46JUOIW3NVFSIV5w8Onb7/4edF0pSJSTGmvXK6FLJl
Dj91Qe+HYp3Cpk6mKQl9Lvqlxe+9W//qS5/78rflHsz+qlOndPUMwzBMDNQt
DxS3D47taNuTi2Pn1N6+zdtqtdrly1Z3M0GJWcxhxzXCppmMZ0u3WyhN9brd
yF3oanOupAjbGlpjwqzq2PNL5pLQsBuRb+6G/Bm9ghbrIHaqyAEe26jDfsp9
p3T1DMMwTBStVou6Zeqcd808pNiZH5g7sX5joVqtvvyyQYeTIIjIRR12LCMs
m8l4kgAwnRFkoTTV62ojd9POP2cuvCMunaF1Jbgm/tXP/x9z2jLKMPNX/7Ym
WuC07h1O0eRsGk/RZ8FJJvSwvOtEB3X1DMMwTBRLS0vULa/rK+x/9AnFzvzY
c6/Q60dGxxYWFmyeKkRL6GEtfmvZTMaTdLvpPWrtfFAXG7mbdv7BpTNUiy02
06Tjg1//xtz0KsboHjktn537psa1M1jxWLZwwdcJPYxa8QfpoK6eYRiGiaLZ
bI6MVqhzfuz4acXO/NRLl+j1g+URy1YDyCoPHQFNa1pg2UzGs6jb7dTbdrGR
O/JYDL0/vE8NTXnkjCzMEbSnhSMjK9R4Bxqbmoeu8DhmCoasfmKIjzbYrKnv
oK6eYRiGieLSpUu1Wm1Df1GlUkkc8yfP3wrCVBqNhs1ThSgKHjadIiybyXhS
9oJp3Y7woOlIOKZgOVp8mMB0JYJv0yLtyOsF9FmYXumVl20NM3EZ6ZHX8tH0
JuK7GN28LOqjRTlM6GEt2uB1VFfPMAzDRLG6ukqdef9A6d7J3Yqd+Z6Dx6jz
p99aWrJaVwU7RN9hOYZm2UzGs6jbIahMb2WFCYLRGlj7oG2Yy6MWKdOGlirE
m0PcouHpTctpO/ugF+Bh1xXtt7ZoFaR15aqYNQQPm1umdlBXzzAMw8QwOTlZ
3FbuLwydPPuGysrp0N0T1PlTZ255F+zQgU+7a1xbLJvJeJJ8sjBTEIWBpjNv
ZSN3m6WCprEww5JT0LW/+fTttaikKn0/MfRBQWStqyUpHWk/eiteFYmqqbe8
3tQpXT3DMAwTQ6PRGKtU7ugv3nPfVNvOfPf+ufUbb1Yqzc7O2jxJUnfBUY9G
dsueJPbNZDxJDVpwuYQsNB2WhOVgLjrKELhT5vYRwHXTHqoNDYOjOlXvN1Ix
oofvq5bNmFBOntcST6gtpOVdDDqiq2cYhmHiWVtbm5ycHCyPrOsr7Dl4LKYn
P3T01J2bS8VSeXx8vNVq2TxJhP7kw77ks7BnZRCbut1a9j50lGVXbaOgptLc
nYKa1S75QtPOEabWK3cVDTPR8umV2dcX7KwlRXH9/Q/gconDjnUt6IiunmEY
hmmLKFkqbC1Tf37PfVPBVdRnz721c2ov/W//QKlarS4umt0DKEjQUS2XuJm1
yk0ZC2oQ2PyChmK5OWLhTmG+c+bCO3rfGVNjOaUcGU16b5OiYSZ9OqrRs9dc
0Fw73/YGKyoc2m9iW9zv6hmGYRgVGo0G9efl4ZE7+ov9haHavffv3j/3yJEG
/Und+0Cpsn5jYWtpiF5Tr9ftb3uNPRbFQSO+ifzetiBP1ZCBdig2dbu10lTP
pNNgXuAbmfMJR6aW9g0LomzVTYTc1Q0z5c2YMkansVRhOcotgxWEHIMPjnf1
DMMwjCLLy8uTk5OVSpU67U1bStSrr+srbKC+feDmgunIaGViYiKvjfOgXa0p
2FByCdnhu//sl/9i4eOspRPIRu6Wi4sNAWVodH8fURmt/QZhauzLwDERck9k
mIkJRcb0LcxJTWwCqwhdTNkXy9pucT5c7uoZhmEYddbW1prN5szMTO12qJOf
n5+/du1aXicmx6lyDJchtcOmzrS826O10lSv64zckQhhtPICk0e9NwilDcHp
ofaQO+674lfAI5BxhzWhmWm2mOM8US7Vse8nD5zt6hmGYZgUUK++srKyuLi4
vLzsQh8OMZlXhEog4sOHn7pg80Mt63abG0t1mZF7VKqJXgxl48Roae0h9xSG
mTi9LNavNku8Y8ATbdNONgrXunqGYRimC0BugOVtU77/9s+RSA8zGcsi0072
BYCWtpB23mVG7nZ0uyFLw/iNCfSG3M9ceGc6oZulvBlTajen0LZN52CzXEWA
DP9c6nQYhmEYxigi6dp+NsVXmkskLEXmQC5mMp513W45DbibjNwxszO9h6+J
GoR4T3W9Ifd0pdZ0ebEZU7rWAo968TXpn6L52W97qLe1vAMFwzAMw5hGeGiY
1kKhYGH95DffXPzeT6YlMxkacElIn7nwjukaVXOW3VEIhWbH6bqbjNxDLdBN
gKQRXW1PZS1JY8gduj1poFvejElR89Okm2bcCGujROWN//r3mInYmRH7EN8l
34wdhmEYhsnIysrKuXPn5ufn6/X63Nzc4uLimz/6r1/46rlcSskQDRbH54+e
f3D+3OET38NPLKhN+/51kIV2goFdY+SOXX1Nu2jC+0VXoJjEbdu1JHoAYcmY
8U5lWULCI0mqWyW3ChPDh4+/TPflqcX/8uiJ7+1+7Kz8XNtxagry7Lm3v/Gd
7/u6O+oA19asZgMyDMMwTAqEO5mwNRgaHi1tH6Y/q9XqYHm4Ur2bRjf7pwTD
9qjDQqTOvm5PHQ5NB1RoFxi520kxQmBfV4q7Yq0rNHPGBQU06RTzDnkzJvpL
cDof/AnmoVGHepq9Rqi7+/jHdxa3lX3dHf1zfHw8l+6OYRiGYVRYW1tbWFgQ
u4H0bd62rq8gH313bS2Vh+l/9+3bd+WK1RR3CIzQw47xuJ1qRxmbpanerTTj
rjFyh540/UF6LQ0VC0VhuZ+xjhgNLF2Tpo9GiouvidJ/BatWEXKPOixXuzvb
3TEMwzBMW27cuDEzM1OpVAeK28Xu248caRxvvvrChXefOv36oaOnds08RD/f
tKU0Vrm5Icjq6qq1c5P3fAkedsrZ7Ot25HtY26EGnuSdbuQu5LQFX269lobw
WW1rb4KQe5Y5HZp06hJv+cGU1wjEAlkwjSc+5G5ztuhyd8cwDMMwbWk2m9Vq
te+urf2FoQNzJ2j8Ch7zJ88Pju3Y0F+ksaxer1s7t5hI3Z4j37Yz3GcXOSmw
WZrqSfnVnW7kbk23682eUr/dWkLu2HsoS74NcnvoTIRQh+lNsBWhgQUPyybq
Lnd3DMMwDBNPq9UaHx8vbivfubkkgk5Rx6mXLhWHPrJpS6lWq128eNHO6SHy
HDysJWNDt9t01LFcmup9KB073chd1NhakIIa7TqFX5N6ek/2kLsu4x20Upoo
ffDr32DLsNCQO8qffYfNTUsd7+4YhmEYJp56vT48MraurzBbn48ZxcTx+JNn
6ZWl8jCNfTdu3LBzhlExOmvyMhfdbrk01ZP2ae1oI3dS0eJbWPgs7JSUcd0H
i0qKDSx7yF3XpIO+uLgIdBx7fgnu7qEhdyTV+w6bBqTud3cMwzAMEwMNSQPF
7YNjO9qOYuLYObW3b/O2Wq12+bIldYddGuXjzIV37Hy6Z9EVXMZyaaonWYh3
tJE7dLuFfTAR985oY0hTM/E+33/750k/OnXz0LVYIDZj2v3Fs6hUTRpyt1bE
4XVCd8cwDMMwUbRaLRqSaGDaNfOQ4kB2YO7E+o2FarX68suWVrdDx3qbTuO5
6HYkCFmwRgHw9+tcI3eUi1qwKNE1t4LZqXpRcPaQu/jEw09dSPG7Pr7x6k8+
I0Xak4bcrT1WHdHdMQzDMEwUS0tLNCSt6yvsf/QJxYHs2HOv0OtHRscWFhbs
nCSsNmL0gFG0m3UrgoRza5/YBUbuNnX7B7/+jZYVCpj5JJouZQy5i9aVJbec
zpY+Ohhmj5lfo3BVPqw1to7o7hiGYRgmimazOTJaoYHpseOnFQeyUy9dotcP
lkes2SxAieUSbPe0ViAmAkV/1r5vFxi5I0vfzv71WAzKkpaDZY5E1zxjyF2k
n6U2LKIp3mfDYuxtp9hwocFhzV61I7o7hmEYhoni0qVLtVptQ39RpUpLHPMn
z98KQFUajYadk0SFZl7Z13npdnxxC3vCgk43csdFs6PbEfTOcrlIPKcLfWcJ
uaOeNOkvgveuXseMI0vI3Vrz7ojujmEYhmGiWF1dpYGsf6B07+RuxYFsz8Fj
NPDRby0tWRKxvgCdHT3pC2AGdTuJedNnAstrm1krnW7kniJXPAvwGkpdKI1C
hidO/yDF76qH3FtXrsoSGgW8cpA/xcoOXXAx74g6grPdXJ5or0O6O4ZhGIaJ
YXJysrit3F8YOnn2DZVV46G7J2jgo4HM2g7gcNuwGWy/8MO/OfzUhTff/YXI
f5AVCClbkXJv2i8R6dM2S1O9Djdyx3ZIdqK4JHqFck6dKI4tkNLNzmJC7r7U
HeE2SdMx4X4D3U4zULrR1NSpwadbUaJfDxahxChzumiy1LezMiJwv7tjGIZh
mBgajcZYpXJHf/Ge+6baDmS798+t33izSmt2dtbaGco7qluzFoeaEoHQx55+
lY4vPfOqvMRvIe1cJCFb3lCyo43cLet273YBnOLXccLprnZUyJ3ejaS478XI
SKd2RY2ZmvShJ78798xrWp4v+iJRgffgdBvTjWmLO4t5ndDdMQzDMEwMa2tr
k5OTg+WRdX2FPQePxYxih46eunNzqVgqj4+Pt1ota2eI9HLLxZLxRhmpC/oS
Yb801etwI3fk+VirdsxYhoBZUmoT+GDInWadJNGDmU6YYkQdGU14YgLvvpA7
pht02FzWcb+7YxiGYZh4RLlWYWuZxrJ77psKriA/e+6tnVN76X/7B0rVanVx
0cZmlADpIpbDv0EfG/mwk/6NbG2bpaleJxu5Y3XGmm7PuJ0upmapw86+kDsd
UV4xvhJv36HFy927NXUKznljQu5aPlQdx7s7hmEYhmlLo9Ggsaw8PHJHf7G/
MFS79/7d++ceOdKgP2loGyhV1m8sbC0N0Wvq9br9Lb9JkNBhYQdMGTmvPnjY
mUTkUprqdbKRu8jinra4o27GFHfhJJkxFQoa+Mx335H3KfOljsspZ8FD472m
RzU47Q0NuZPC1/Wh6jje3TEMwzBMW5aXlycnJyuVKg1Ym7aUaERb11fYQOPa
wM3F4pHRysTERF6bBpIisi8gEecPPewEovMqTe1cI/dcNrdFckiKmLm4zhlj
3UID/+GXvz17u6e6b9EBU4zQQ3t9qC/wHgy509xKV5A/KS53dwzDMAyjwtra
WrPZnJmZqd0ODXDz8/PXrl2zdiYrKyvnzp2jD63X63Nzc7s+/ciPfvwTOj1r
JyCIyge2k9wuQGmqZf3coUbu0O10/tY+FMaGSVdhMm7FS9MrEtt0g0ifH/za
d6cOn/E11KA/TEyTNtHA6AyRwB9sS3/+g7/c9ZlDeMwXFxfpwbf2mLvT3TEM
wzBMFmhEowGUhtHl5WXL45eIg4kBdGh4tLR9mP7csnU7/XN8fJzEvM2TQXq5
70hhtZ2aXEpTvU42co+SrOZAck7Sa4WLTOI26YeS5hdzupgjmF0WleJudJrT
unJVbPOEkDsec3q08ZhXq9VcHvMcuzuGYRiG6VBo9FxYWBB5p32bt63rK8hH
311bS+Vh+t99+/ZZ81KGHvMd1moePWnu4LP1sxB+71Ajd/u63ftwz9O2CzG+
u4ZAfdCzUQUV6e4LcUeluJsufKYvLgLvP/qrv3ftMWcYhmEYJhE3btyYmZmp
VKoDxe3C5+GRI43jzVdfuPDuU6dfP3T01K6Zh+jnm7aUxio3U09XV1ftnFio
LrK5UwxCsii0FBKI9Lzpj+5QI3choS0nTocui/zkb/+pdeWq/DJqOd96bRnq
HfWkvpep01a6+wpDolLc7UzN/r71z9vHxh18zBmGYRiGUafZbFar1b67tvYX
hg7MnQh1VJ4/eX5wbMeG/iKN6fV63c6JBW0xLKeaozRV5BiQjBcpBxacIWHk
nlfxYDqEjk29gWk6EDnHfEpkpPimeGI/L7qVooIVBa1ZZHO8dA9eB9lwZtpu
1bN4zO907zFnGIZhGEaRVqs1Pj5e3Fa+c3NJBN9idh4vDn1k05abO49fvHjR
wrn99O+u+ESOhQQM+lCSfyT5xARBqLLP3NpJJyr/wRAwck8dELaPmNfYrB32
pApTah5011DV65te4WU0+yNhP/v4t3yneuV//muK1Zx46e7bTUneq9Rm3pfL
jznDMAzDMIrU6/XhkbF1fYXZ+nzbzccff/IsvbJUHiYNYMFaGY6INkWOvJsk
/YWE6IGv+jeysZOrAyN3a3bo2YFliuXPFcp59vFvfvHE96LyxqHbxfHA4TP7
jr744Pw5OmcI73RZSTHS3XcOwamonZJnlx9zhmEYhmEUoaF5oLh9cGxH29Fc
HDun9vZt3lar1S5ftpF37bPOsyOYg0HRXLQWpi2GfAJNYE23/+yX/0KfJQ6a
zX1h4eXgPqG+WZ5PtwePLIb5UdLd53Lj25jA2s5Hjj/mDMMwDMO0pdVq0dBM
A/SumYcUB/QDcyfWbyxUq1U7G6MgdXnaYnL79fc/iBd4vuQHcyDl4yd/+0/4
IWk/+Z/54ksOxwnjEtEcx5DPIT4r6gjufBT/+oxXNVS6B1OG5BR3OxtUuf+Y
MwzDMAzTlqWlJRqa1/UV9j/6hOKAfuy5V+j1I6NjCwsLFs4Q5ZnTdt0F5Wz2
4GEt+g1DG7jWk2gn4eeOrzvdoM9/5TsvLv1UFHuilJhELJ28uIyGbhxNGYIx
dvkIquKYFwd3FE1BqHT3rc7Iqzl2CiXcf8wZhmEYhmlLs9kcGa3QAP3Y8dOK
A/qply7R6wfLI9bsJiCEbDq3R7nH20kCkYE0JZlK2lhcDcsG6fHgBh1+6sKR
515/7OlX6199ae/8eVyuFBsbKfKTv/0nXbpdl4QOSndfu0WKu7X1o454zBmG
YRiGiefSpUu1Wm1Df1GlWk0c8yfP3wrEVRqNhp2TPHPhHaFzbDq3e9Ehd8sm
hzByP/nNt4Q7uv1ziAdnaFoShxKTLROc3RgNtgOfdPedBlLcrU2+OuIxZxiG
YRgmntXVVRrQ+wdK907uVhzQ9xw8RgKAfmtpyZLqELkilp3bveiQu2nNTF/z
zXd/QZMUcfzlT3/5heMvHfzaK1OHz+Ac6GoYPYdECF/0mIOUqrlPj8mWCQrj
KNcX7YXGsnQPNl3hlmltR62OeMwZhmEYhmnL5ORkcVu5vzB08uwbKqvnQ3dP
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
AAAAAAAAAAAAAAAAwKMD5p/LYw==
   "], {{0, 0}, {360., 359.28}}, {0, 255},
   ColorFunction->RGBColor],
  ImageSize->{360., 359.28},
  PlotRange->{{0, 360.}, {0, 359.28}}]], "Output",
 CellChangeTimes->{{3.7081948394599805`*^9, 3.708194864227517*^9}, {
  3.7081949044850245`*^9, 
  3.70819491868108*^9}},ExpressionUUID->"0f71a5e1-bf99-4460-93ff-\
0a0d9c8dbd85"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ImageDimensions", "[", "img1", "]"}]], "Input",
 CellChangeTimes->{{3.708195446554865*^9, 
  3.7081954591247654`*^9}},ExpressionUUID->"a757b219-fa30-4770-9e58-\
0f9593941bd3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"360", ",", "359"}], "}"}]], "Output",
 CellChangeTimes->{{3.7081954510700626`*^9, 
  3.7081954604296894`*^9}},ExpressionUUID->"3885d3c5-206f-48b3-acdb-\
c7a65739a107"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"img2", "=", 
   RowBox[{"Graphics", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"EdgeForm", "[", 
       RowBox[{"{", 
        RowBox[{"Black", ",", 
         RowBox[{"Thickness", "[", "0.001", "]"}]}], "}"}], "]"}], ",", 
      "\[IndentingNewLine]", "Blue", ",", 
      RowBox[{"Opacity", "[", "0.25", "]"}], ",", 
      RowBox[{"Disk", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"180", ",", "180"}], "}"}], ",", "40"}], "]"}], ",", 
      "\[IndentingNewLine]", "Red", ",", 
      RowBox[{"Opacity", "[", "0.25", "]"}], ",", 
      RowBox[{"Disk", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"180", ",", "180"}], "}"}], ",", "90"}], "]"}], ",", 
      "\[IndentingNewLine]", "Green", ",", 
      RowBox[{"Opacity", "[", "0.25", "]"}], ",", 
      RowBox[{"Disk", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"180", ",", "180"}], "}"}], ",", "175"}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", 
  RowBox[{"img1", ",", "img2"}], "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7081949069237504`*^9, 3.708194912462713*^9}, {
  3.7081953888990383`*^9, 3.7081953896015406`*^9}, {3.708195424071932*^9, 
  3.7081954737521276`*^9}, {3.7081958426323185`*^9, 
  3.7081959716336784`*^9}},ExpressionUUID->"81035c53-8b63-4e26-b2d1-\
513a2b3c5d02"],

Cell[BoxData[
 GraphicsBox[{RasterBox[CompressedData["
1:eJzsvY93FdW9/33Xev6S508ANAQJJ3AgP8g5sV8a/TZFDGppTGhNSwEhKgWt
sZcU0oCA4OFHFIioEUWpqE1rr+U2fqu5bVP10qWNy4d7q3nwodfVLLvw3rXO
8yH78r6bmXPm7JnZe8+e4fNaoysJ58zZZ2bP3u/92Z8f//c93/v6Pf/XP/zD
P/yF/vcZ/Xf15zLDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMD6mpqbGxsYG
Bwf7+/sHBgZGR0fpL7Ozs0m3i2EYhmEYhmGYq0xOTnZ1dbXP0dyyMr+ihf5f
LBbp146ODhLzSTeQYRiGYRiGYRLDBfs2fdzw8DDp86aW1rrFy+bV5eSj7pal
+aYW+tdNmzZdvHjRZsMELlwihmEYhmEY5obFEfv2lStXent7C4ViQ+MKUumr
Vnc/tLO0Z+TV42ff3X/ije27jq3t3UJ/X7Qk31YodHZ2zszM2GlY2ZlLxDAM
wzAMw9yYOGXfHhkZISVMH1qfa946cIDkuv8YPPjC8rbbFtQ3knTv7+833aSy
Y5eIYRiGYRiGuQFxyr49PT3d0dHRuKzp5sV50YZqx7GXJhqbv0atIrV87tw5
c00qO3aJGIZhGIZhmBsTp+zbdPKW1jbSwH39gwGiXRyP7TtFr8w3tZDUJ2lt
rlVOXSKGYRiGYRjmBsQ1+zY1pqFxBQngmqJdHGu6N9YtXkZNunDhgqEmuXaJ
GIZhGIZhmBsQp+zbpJBJ8ZIOX9u7RVG3bx04MH9hrlgsnjlzRnt7BE5dIoZh
GIZhGObGxCn79vj4OClw0r2bH96r2J6hIy/T61tXtg0PD2tvj8CpS8QwDMMw
DMMkRYLJwF2zb4+MjLSuLJAO/9GeE4rtOfbSBL1+eVOrIZdy1y5RRTifPMMw
DMMwjFESTwbumn17YmKCvvuC+kYVjxRxDB58Ya49hVKppL09ZfcukYfEuxDD
MAzDMEy2cSQZuGv27ZmZGfrW9Q3527vWK7Znw7Yh0vn0LhLY2ttTdu8SAUe6
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
V5xMN2wbosmX3jU+btCE6K9f4xG0pJYrOhLH96aGvIEGpsbQIsKv2zfsfB4e
1HC5j1DtKE5EKhqTlEiuBpY/nvT7FrCZOt4DLfTETpBc5omWfi7odn8Eh81P
d3aoYRiGYZgU0dXV1bisqT7XfPDUL1V2rptv7aTJlyZTo1XI955406MxPLlB
/MZDcZDA9iSfCQsCKuWoRpLWHqeLTy99ISt5mJcjKLQ4EakC6HYX9CGo5uNk
53OtlWqVgXeQZwFlP6mOh4rPi+USrm4ONQzDMAyTIkqlUluhcFN946rV3TUn
0/WbB+YvvBop1tfXZ65JCNKUD4/jN6ov+Y8NO5+PI5Mie0eLNu/YfzbUu2JG
pArc1O3C7i1bni2QoJ2/LC3B3CmAJaiYLslExeEAHBxqGIZhGCZdzM7OdnV1
LW9qnVeX27BtKGAm3b7r2M2L8435po6OjunpaXNN8qR5rGY+DciYTVoxsiYR
yScjqE243IcyY8aMSBX4K4S6QCJ+5gn61ZevdZ44SzATVNucsqzbHRxqGIZh
GCZ1iJCx3NImmk9Xre7272IfHvv1mu6N9K/1DflisTg6alaJVYw5vW/gWc/L
gsvKk6qPkE4kjrUWEayhbK0xI1IFJMAc1O2I0LSpD6FR4+QXioabux60gpDT
IslHTI+yCLg21DAMwzBMGimVSjSfNrW03lTfWJ9rbr/97vWbBx7aWaL/0/Ta
kC/MX5hbmm9uar6ak81o2XEoZ//x6aUv5FfKSdcrHiSJw3rwQvWJLDHR3que
1CV+RKoAup2kcpzz6AULGfqa1j4UmzX288bj+77z3ieWPzqAgMfEvm4vKw81
9BrTQw3DMAzDpJfJycmurq5CoUiT5qIleZpV59XlFtDc2nB1w7p1ZaGzs3Pn
8KGnzrxtNJwNxS79h0cO+asv+Q+Ry1H90ysGpSoC8axuq4dFOqbIxEc7kidc
YL9uaVm6g/ZFqXDcum/gWXecZOSiw/7D5n2REUNNW1uBBpZqQw3XSGUYhmGY
YGZnZ0dGRnp7e9uv0dyykv5Pk+zg4ODly5eFDNix/6w5Cyqcov2Hxwbuz/He
vePk/btOj559hzQbHRHcMxCUGs21A+7NKi/+4m9fxo9IFbip21Ey1ZMLyCjw
nvLszpgGWyeJxMNWI3hPyv6WBKCh5r77H5GHGgGGmqQaxjAMwzCpg2bVqamp
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
vWc2AXZtdHUY7Qb8sqRO0xL5WDbggOTHUJU3FbA1mYrFaTXRnpaHlGEYJj5T
U1NjY2ODg4P9/f0DAwOjo6P0l9nZJKPwqo3MAdI9QAaQ6oDjqFDFEaIjEZ+o
t468B8yhJHr/zx8/Fj+bSG8ogDA78cpvNc7d1bzNowVOwlAfIEfxRfRGjxoq
QmoImLJ17QqhN+rSq0iUZKHqqEaEr5RRxx4s0i3HhGKtR+sF951MAkS76d2Q
mjg4jTIMkz0mJye7urra52huWZlf0UL/LxaL9GtHRweNQkk1zGMk12JXIQ0m
x6uSkg9lRbTjfUrCBsY90gl9j5kVObIDAPbK42eo7qnimQ91HSozT0DFJf+Z
9ep2OIokKwkUwcaELsOj9phcVC9KUd4PPPjmls/01Iunz1wETUVoAExR4sdg
0W6uunRNnJ1GGYbJErOzs8PDwzSwNLW01i1eNq8uJx91tyzNN7XQv27atOni
RbN1RioCBVLtiDbv08jvCXqlBYL6aI9Zw2i2B3l6WrPl2Le3nzA3q0KXvvPe
J4hNo/VCzBmwmm6PlgAwoOISQHiyoUT0qQjWgyeSLoUpxKRGOzOevlSsgwQW
9lwQ/2tzOSMnfnTfwyRYtFccbSzg+DTKMExmuHLlSm9vb6FQbGhcQcPLqtXd
D+0s7Rl59fjZd/efeGP7rmNre7fQ3xctybcVCp2dnTMzM5ZbiP107dK9POe0
jAlLbBArqghr2ZVJgAmXks5NR1q6H+/ecVJXxKgHjyaBX0TMzfpqM2mEJDlI
IBl8zU1EUJalvHwaz2kOBPBq0TB6zyZAXqZUZBoUYElobrUORWqiQkQ1sNdG
n+747agp2uMPWRFwfxplGCYzjIyMFIvFuluW1ueatw4coHHGfwwefGF5220L
6htpzOnv77ffSH9ZJc9ByjZy/B3NU6+f/0BeGtDH1dyhxnZ2j/kqPHR+Ejnd
PzzZsGbXynv3GcpD6Elwh33zOPv1wXpPrEfUlZuiid6Qbrfg2KwXjQ3GIkuX
ERibaOYcTkwAxWhI3MJ3yKbFGPfC/cSPKqLd6KqqGqmYRhmGyQDT09MdHR2N
y5puXpwXxoFqx7GXJhqbv7ZoSb69vf3cuXOW24mAKRx9jz3bP3zmnfc+0aWZ
6Tzy6oA0T82APtM1mGQufvZXalLTur233PGTYu9+EysFf6oWWOEi7ykE6z14
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
MlWJGjcKewePwhynyN0xxYv0MuDq9R3fwS/z2rfM+dK3rrv54WuWPIg/5970
7ds27s+v2IXzl676/le++TgH2ytBcsqgCDb1pW8Ubt+4/yqB/1M/dJ9QJe6Q
g+du1nxpo4q3hACsjTFJGyPjvfcnrWuvypGQIggMk0CBRFHgQwborpIuGyMd
FDSOXrmimQkntgDbSN9ofPRGcwiho1UeJugQTLc8U1vZO8YI2PvEex9QL+rc
PNi+uiAi7XO/9G2QdhD4zy958PPN3/jbue1/c03LX3w6XZVuuyZzy43d316w
bAvO52B7hTC4DMrY2Njw8HBfXx+cjvnZ9sVL70x96e7b79l30+rCLXf/QNje
5CzlU+5HsPcZT6bok7cEvIo2BlNDTMNT7mGqNqYUDr/wyzuuml/r4XK/M4Oh
G8YvXMKkUCqYg0GtlG0SHCaOOd7l9YVw7BXl3qy8/AfDF4jtq0pEnZac0LHp
MYHqo8PIG13xEDHlDT79p9DcVzcNZG/fAbqO43NfeOCzjSv/w99W/e9/9Zn/
4//+x7/5+6p/+Fz1tXPr/vrvr/2rT1zzFx+/tuGmuzjYXjmoDEoun6+pXWhA
GRThjIiraGhshkuCbvPJf5rzf33sc3/3j3OvXXyb6GwOe6sNg1wQdkYTTQnt
vd0iRRtjatiZYLY2xhbiEdsafN6Lyog1QMKdtRw4QUmaJ3zV2K0nhr8+SMGN
ysttM3zEmV9fAIG3za2EjoEZDZQA05yVveP3HQMvrbj/R/j9tg37a27eMnfp
A39T1fq//eWnP/bpWVXVC6qqU/Ix97r6OTXpT3127h0rvhbfzIS64fipX298
uBjrMijwQfr7+4X4p7p2odpt5qc/WzX/P33q2mtq8995/KmoGxseaBs4xqDz
mTDmpH8rV/lv1cYYb5wToo0hKI/43p1Py0YeTD6OsUcGo1yAxsCoKlLh3T8+
Hq9tHeHHHGgLMFgi2wrdgPkak76thEas1OO/59++BP9L7vl33DfU0VP86qaB
jnV7/+Mna/7Pv/7s5+fUil2TG7YUthef2X/k9KMDxzZt3be8ex1en78g05Kb
FnJMTExEfcUmYMfAi25EFNpiampqetUgl69LL3boNtXX1f/TtTVfuummhHQb
qi01Y+5HDFtioZiVyv0WRRtjfNg5adoYa2qg//4/LsqGPe6ZrhmMsiAikMrC
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
Tk1NdXd353L5uvRisPQlN3du2FLYXnxm/5HTjw4c27R13/LudXh9/oJMSy7X
3t4+MTER2A1jlAGx9KzMLGJmDCf8XqFmBuOCaH8lUzlxV2uEGaNG/Mth4FAW
R2ctDYFS4qDZbmLaQWhj8CHW1I7oDEwhGDrAmshI89SjMFwiZ4VD9jmRaE6k
jGaxOoORNAjxPCZ0ylTpsLHF9sBb8EbKVGnLH37/hz86VHGiJPDFYjGfz1df
V1+Taljfuwt03Xr07T64qGXp7Jo0qHtPT0/oN4xREiI5g1WvJYoMBj2/VKiZ
offaqlxcgsi5NahOn+/QKnKl3ZBwUuZjwM64NTgIbQxccmtqR7Qqvok4GMYA
1gDzkTWRkZ6pRzEYMZrg7TpklsPgwhBG+1mszmAwbAEGLraoi0yV5YrnRabK
PcMnKFOlCGPCQJWq4nTPwwOLGlrSC7NzazMixl7q2PfkyXTDDfMXZFpbW48e
PRr1rWKoADW1bnMQm5SDVl161szIuztdasutIBG7NWBOy/SlaANlX8eZM34R
7YG19REU+KuNsU2dF9NEHAzzgCkGc5ZifMCHZxwmIcO9WB0tZ7E6g8HwBlAO
Es+DmXgQz+N8IZ7/0TOn9wz/fE3f8Fc3DYh/VS24ofq6+qrq1MqePgfSLo6H
dh7AmZlsY1tb29TUVNQ3hmEDQfCsPQQ+YKDhd8+aGfRtimB720qJAUI8QfmX
iKThk0u9l1zjGfNaoJ3uU7X7qI3B1eHTrKkdI6zDxWAQbLdFwwuOJFGtLVis
zmAwNAEMJmWq3DN8oqxMlbdt3P/FlY/d8LXdf/Hxa69bkFnUsnRG0i6OZZ2r
q2sXtra2njt3LuobwHACZivrfCrC7wHtC/OsmTk0coYcTG+ehXAZcLHK2wXd
LVUslbJE4u3On48LocHlLIP3URtjG8PEB+rDiBhJBmYfqwgTFiDyREYsVmcw
GPECzCZlqhTi+VK26yt3bf/EP84BD1/evc4lb1/fu2vWvFQ+nz98eObC8QTb
fDszlrBkVA7QSHh21vA7OkZAAVsPmhk5raLLzaEKqLasIkMlruv8rudfdXJC
wZ/lVO0OZ/qljYFjhfug+FzgSCyyZegAWHJFw4m+CsMeYaIYFqszGAyTIJQ2
x37++jPHzz7wvWc27Xy6+/4fta/eM6flzr/9h1lV1am19+1wydu37X0K5zc1
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
CsFGN2OqVHt7sSyAofZTqZRXxR4dHUWxS8sjdzcuNVnsZWs34zbxrv7+20nG
oLRRuwyEhO6xbtvPs56DKSetcUCokLzH8dsPfk/yXgI3hMDz8V/+igpPESIG
LYWc1XGmWGO8BXMllpc5ebZoweQLF1m4qgtHs6XgVjK5L37slYWr01QkC/k8
vYpU1YK6jcmLdosBsUMKASbThmVS7W0hfwHsFY2NjeHKaGmoqnPvW2bWCKru
bMBtotiq/V5pazBjdyM+1mx9w5qhXntQkB0dYsAXCh1oPzQl1GQDZ3UoKExm
3zz5nrj7+goykjdPJArO81IUb5WPbmeTO3nI01qMhZJ4G6mq5cq1m919Z1SW
IrFDCsFGzO8OYZcAdplUKlUXi00tDc+d35S12EtXtk2eftsnv7W1VfdqmB5i
Gqh1SlQdGNdQD0lX43w2p7MCt+yBIwZ8oeBAx4tWgG7ZwFkdf8IJmJBKL+1P
0IfwYJq/kxK5l9/36Cv3TKRwt+YqT1O/pvXdD274ZF8SXNbCdTyPVNUtkq75
XbJwCAFGzO+2Y68Ado2xsTHMOGZHayaVhJat3WxQ5nWbuqaVRcKRaH19/fDw
sPFlMXIdP30xk80QQ5vJ4qGisuUcgw6JbQgYUuAGO7OLAV9wAXSVVENyfSPm
rWggmEIaTFHFWb1QUKYRRl+R/wXJT/7+tbtJt+eUy5Fhk/sjm17jzs2ygcIP
kapadO2QkgRbCDYG5ndZhM0JhwSwC5BzfqgiipJj0qFdL9jZ+/aCpuX4a2l5
JB6P9/T0mL/4lWs3oWq0hkTbN0/HBUlXU9J4OrbuOUEK3FpyfjHgCwZAeJPq
NhM2SJu70aKSgTsZ/grJIc7qhQW+MjZ82XJB1u31P3qxeWIHImvXYcvJxp3H
2CJtuVQ+iVTVkskOKeZ3IcBkqvaScyknHBXAjpJKpVDyaHXN1NJwaagqcffi
pSvb1mxM4SdupDwSmzw9VBGpwjnJZNLaBq/Q1ZgMsnXR2jaC+UPyiQ7oLhLb
lHOeDjHgC1mBGFDOBDNNQm/+6SNIHXzpBgtDyzYegLp48+R7UhMKFE4jjJ92
SVn2upk7sfUSug5r12GTO4Zy7ntzzU6jxD+Rqrro2iFRYLQvWbQSgoputZct
D8zjggB2iMHBwcbGxlgsjuLNmBVB+TG/mIK7KL+9NFBTG2toaLBliyh09ahO
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
ETP/5CMvfOrgC0mVM0xHs1cxu7ANE5q9oVJHc9tPtKVrpLsXkTPDhpAMw2ih
bUENunE389vzFe2mNxxEMF/XMqsWMxlPuuypdTuci1IHzLFIxAvQoWTMZYoh
tW5H80s0ycUX+ZM//XPxl0Q7ESMukfE6oDw835wHNHsTm42a2+5ZBepOIXc7
XbqH5sywISTDMBmRXdnbHl86+aprAilf0U7DCvJ1DY1xyJzXFczXYibj6dDt
GUtT5XNwfD0oL7KviUSRxakGnurqv4JuCuH6RKtFmCFmbyd4q4zT3iyg2RvK
Qjcdi4iHugVIdxPltzYJ5sywISTDMFlA5mf8QaMzDRAOBttl0W4/NORZWVPW
aNsu0GIm4+nQ7RlLUz02cm9H9nsURRbdniL6LRu/p7BkhPN5dtUkF7OYCHer
gGZvwuFTYDr3L55uku5eIGeGDSEZhkmH3DeGHjQ8feu1ZWc7GUTezMWd4rFQ
w4XUXI2lcFrMZLzMBuyCjKWpHhu5x6LlHoWSRbfjrNTzo+RFonQrUMhYyF6i
q9eUNR1o9oaMs+gqGa21b0uXSXc5Z4YNIRmGASsrK+fOnZufn6/X63Nzc4uL
i/STtbWQoBBptqDrIyQidSzaA3R6kVcKchHtnjR0mjsBLMq/uPRTXe+pxUzG
k84tS3pS9kkEG7nHgLmt9hQyodvT1dlBeKvrXhRjigcBCd7qUQUsM2W/FKRp
c89yx0TGXLqOaW/btnSZdEfOjNxs1IdshmG6jOXl5cnJydothoZHS9uH6c9q
tUr/HB8fp55BfjF1GkHXR5Lx1Dd2RNWMC6Ldzh4lCNHoiufrMpPxpLuQRQhl
L01lI/cYcI+0Z5GhA0nxuyl2X0Kii9BviHiryzkofy2JH3otnlJATV0EXqjx
mxPVmFbnNSmW9+/OcXVDIyJnhppNoiGbYZhugubmCwsL9LCXh0f6Nm9b11eQ
j767tpbKw/S/+/btu3LlpiaXSylFt//subepe+wUzeOCaLezJziqwzQmz0P/
ZA/TadHt2UtTPcOO1h0NZI/2JwUzyiy/rr55kK8UIp3JEn4le19nIoEtKUhB
N1faY6eji8eFDl8vf9/659++b7f6kM0wTDdx48aNmZmZSqU6UNxOj/w99009
cqRxvPnqCxfefer064eOnto18xD9fNOW0lilMjExsbq6ihAK/YW6xE6R6wJH
wi+wCDAahjIxLmPtO3vijRbdDj2WZW5i2tG6c8GV0S54Mu7EiqmWuhrE8pb4
ZwordXyollVFdKR5zRZNzOuD2FlYjKebpLsYskdHK5sLg4pDdt6nzDCMTprN
ZrVapRl6f2HowNwJevaDx/zJ84NjOzb0F6kfuOdj99OAS11xLvmKGXEk3dFO
2qehdfDseSkAg2nGVAGRcZEx396oo3XnAt2ufYKZUbdDDao3Hl8JM6zU1SPe
WNzR0nto38U4Bdrz6EKheUHumrlrpHvSIbter+d9ygzDaKPVao2Pjxe3le/c
XBIT9qjj1EuXikMf2TRQGh0du3jxYt4nngZHRLvsAme0FsBQ3RlWCrLbBOna
Pl7LKZl2tO5QYBio/ZHJqNtT7L4E9YifIH6uKP5RCqFr20qcUl5lQSbq1oNY
MM5SIXcDsewkHrK3lGq1WocO2QzDBKGZ+PDI2Lq+wmx9PqYHEMfjT56lV5bK
w9Rv3LhxI+9zT4Yjot2zaGssNnaf1u3zhtKG7EveunIwZGvu1G9iwdG6E8Fl
0e46klG3E+KJVr9fyEvBkgrEv7p7P95Ei1+W9j3RkiKn2Rv9IAsbVSQ6jRzT
k7LQO0M2wzCh0OM8UNw+OLajbQ8gjp1Te/s2b6P5++XL+XggpMMd0W5tG0Fz
w7G4klp2KdKl2/E+GQsWoCQdtzC1SfadraLIrtuT7r4UmhKfdFcyLBLpClAj
UyWvfS4MTfB90DQf3zSXHe5AR0v3HhmyGYYJpdVq0eNMD/WumYcUO4EDcyfW
byxUq9WXX+6YmCSN0RDtNELlWEUr+/CYHrkMLX/DTEZLeFCXbtdSmupJkqwL
rJ414qxuT7pvb+geUoh4KzYeNDZd6zIpHCn1goQ60zF/a1GLtnSodO+RIZth
mCiWlpbocV7XV9j/6BOKncCx516h14+Mji0sLOR9+kpc+Z//CheyfEW7Z3el
GFWWerNJNZrJeFprHrVsBYXsZS1Gf12DofSh7Lo96e5LUXtIYTatGPFOGueP
J50jpUZsngCyBM1t9qRIJ0r3XhiyGYaJodlsjoxW6KF+7PhpxU7g1EuX6PWD
5ZGOKFF3SrTLlVmmF8TNuRpqNJPxpPPMHmnUVS3LRu5BxBzQnG5P/WAmzeGB
zvet72CdRTHgDMmnq5Fg4SAvZ1prm0DRLbNTla8CJhG6OjTTdP2QzTBMPJcu
XarVahv6iyoVLuKYP3n+1uS90mg08j79Njgl2j1JpVjwMTAnPjWayXhavUq0
lKZ6bOQehs8+URdaotawAFV5wKPWd2SLJ5WAc9I4f1tSOFLqxaYjpeyCm3u3
jK6Srr/R9H4tdPeQzTBMW1ZXV6kT6B8o3Tu5W7ET2HPwGHUa9FtLS06rGlm0
kzzIfXSwufOI0WQPjWYynlbdrqs01WMj9wBB+0QtaNHt0F0qE0m0t2BcHfM+
lfaDOL9GlYvYr+mIdxRJk4WygFpgo7vOKdJB0r2Lh2yGYRSZnJwsbiv3F4ZO
nn1DZcVt6O4J6jSoE3B592QanSG9aDDKfX8oeadvC0YlRosrNZrJeFp1u67S
VI+N3ANkT0SPf9ssuh16W0Xu0mQzqpEg4q0424U1iq6pMSLeedmQJpq5ZETu
EtW3uzVHB0n3rhyyGYZRp9FojFUqd/QX77lvqm0nsHv/3PqNNytcZmdn8z7x
SFwT7Z6UW2InuGTOzFCvmYwn6fYnTv8g+7uhNDWjlGIjdx/wCdS7AKHlbSF3
Fad+MZbviXK8ofQ0PmVJHSn1YjlXB0uQ1Evnvh7qdY50774hm2GYRKytrdH8
fbA8sq6vsOfgsZge4NDRU3duLhVL5fHx8VarlfeJ3yRYSeSgaJeTOS2cj1HN
qddMxpPOVksyucbcezZyl4Gk0avbtbwtssIUGzzy4YP/hdaoIlwhOzWmtZBc
tJZkHorliQPyr1xY2KI7jolkqHUAnaQL84uOHrIZhtGCKHUpbC1TP0BT+ODq
27Pn3to5tZf+t3+gVK1WFxc1L5enQ5SSyeOLg6Jdrnez41dgNMdDr5mMQKNu
x0J/dm98NnKXSZRDnuJtM04HMMlSeeTjXwzh2laNI86v1/PcZpJ5EMubt8oW
W3rtatMhS/c9R74t3wKxGJFX6YGPDh2yGYbRSKPRoH6gPDxyR3+xvzBUu/f+
3fvnHjnSoD+pWxgoVdZvLGwtDdFr6vW6I9sli0Vt5FdQvwrRTn/Jd1MPgFoz
a5uYG62p1GsmI9Co2zW6wbORuwxcCvWuPujS7chvUYkSow2HCkVq2OK+q2wM
hKySlOcdRlJHSr3Yd5JHnMER+6Yo6S7amJ01UxU6cchmGEYvy8vLk5OTlUqV
HvZNW0rUG9BsfQP1CQM3F9pGRisTExPubLhGAz22QKWulfpSxKlIuDpiA4LN
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
1bN4zO907zFnGIZhGEaRVqs1Pj5e3Fa+c3NJBN9idh4vDn1k05abO49fvHjR
wrn99O+u+ESOhQQM+lCSfyT5xARBqLLP3NpJJyr/wRAwck8dELaPmNfYrB32
pApTah5011DV65te4WU0+yNhP/v4t3yneuV//muK1Zx46e7bTUneq9Rm3pfL
jznDMAzDMIrU6/XhkbF1fYXZ+nzbzccff/IsvbJUHiYNYMFaGY6INkWOvJsk
/YWE6IGv+jeysZOrAyN3a3bo2YFliuXPFcp59vFvfvHE96LyxqHbxfHA4TP7
jr744Pw5OmcI73RZSTHS3XcOwamonZJnlx9zhmEYhmEUoaF5oLh9cGxH29Fc
HDun9vZt3lar1S5ftpF37bPOsyOYg0HRXLQWpi2GfAJNYE23/+yX/0KfJQ6a
zX1h4eXgPqG+WZ5PtwePLIb5UdLd53Lj25jA2s5Hjj/mDMMwDMO0pdVq0dBM
A/SumYcUB/QDcyfWbyxUq1U7G6MgdXnaYnL79fc/iBd4vuQHcyDl4yd/+0/4
IWk/+Z/54ksOxwnjEtEcx5DPIT4r6gjufBT/+oxXNVS6B1OG5BR3OxtUuf+Y
MwzDMAzTlqWlJRqa1/UV9j/6hOKAfuy5V+j1I6NjCwsLFs4Q5ZnTdt0F5Wz2
4GEt+g1DG7jWk2gn4eeOrzvdoM9/5TsvLv1UFHuilJhELJ28uIyGbhxNGYIx
dvkIquKYFwd3FE1BqHT3rc7Iqzl2CiXcf8wZhmEYhmlLs9kcGa3QAP3Y8dOK
A/qply7R6wfLI9bsJiCEbDq3R7nH20kCkYE0JZlK2lhcDcsG6fHgBh1+6sKR
515/7OlX6199ae/8eVyuFBsbKfKTv/0nXbpdl4QOSndfu0WKu7X1o454zBmG
YRiGiefSpUu1Wm1Df1GlWk0c8yfP3wrEVRqNhp2TPHPhHaFzbDq3e9Ehd8sm
hzByP/nNt4Q7uv1ziAdnaFoShxKTLROc3RgNtgOfdPedBlLcrU2+OuIxZxiG
YRgmntXVVRrQ+wdK907uVhzQ9xw8RgKAfmtpyZLqELkilp3bveiQu2nNTF/z
zXd/QZMUcfzlT3/5heMvHfzaK1OHz+Ac6GoYPYdECF/0mIOUqrlPj8mWCQrj
KNcX7YXGsnQPNl3hlmltR62OeMwZhmEYhmnL5ORkcVu5vzB08uwbKqvnQ3dP
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
AAAAAAAAAAAAAAAAwKMD5p/LYw==
    "], {{0, 0}, {360., 359.28}}, {0, 255},
    ColorFunction->RGBColor], {{
     {RGBColor[0, 0, 1], Opacity[0.25], EdgeForm[{GrayLevel[0], Thickness[
      0.001]}], DiskBox[{180, 180}, 40], {
       {RGBColor[1, 0, 0], Opacity[0.25], DiskBox[{180, 180}, 90]}}, {
       {RGBColor[0, 1, 0], Opacity[0.25], DiskBox[{180, 180}, 175]}}}}}},
  ImageSize->{360., 359.28},
  PlotRange->{{0, 360.}, {0, 359.28}}]], "Output",
 CellChangeTimes->{{3.7081949127558746`*^9, 3.708194921969406*^9}, {
  3.7081953898627205`*^9, 3.7081954740703487`*^9}, {3.7081958442754917`*^9, 
  3.7081958572336674`*^9}, {3.7081958893624053`*^9, 
  3.708195971932886*^9}},ExpressionUUID->"6045c41c-3eed-47bc-95ce-\
76655d1f3db5"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"img2", "=", 
   RowBox[{"Graphics", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"EdgeForm", "[", 
       RowBox[{"{", 
        RowBox[{"Black", ",", 
         RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}], "]"}], ",", "Red", 
      ",", 
      RowBox[{"Opacity", "[", "0.25", "]"}], ",", 
      RowBox[{"Disk", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"50", ",", "50"}], "}"}], ",", "10"}], "]"}]}], "}"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7081951308212833`*^9, 3.7081952106067944`*^9}, {
  3.7081952535271854`*^9, 3.708195264530963*^9}, {3.70819538041403*^9, 
  3.708195417186068*^9}},ExpressionUUID->"dabd8c98-a909-4f0a-b3ea-\
892aa6e669f0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"Flatten", "@", 
    RowBox[{"{", 
     RowBox[{"intofil", ",", "filtocor"}], "}"}]}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "Tooltip"}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7081858912799788`*^9, 3.7081858929051285`*^9}, {
  3.7081865037256517`*^9, 
  3.708186540380607*^9}},ExpressionUUID->"ed9710e4-cced-498a-906d-\
4c6a59a3d5a7"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Fold[Permute,{a,b},{{1,2},{2,1}}]", "FoldPermute,{a,b},{{1,2},{2,1}}]",
        "Fold[Permute,a,b},{{1,2},{2,1}}]", 
       "Fold[Permute,{ab},{{1,2},{2,1}}]", "Fold[Permute,{a,b,{{1,2},{2,1}}]",
        "Fold[Permute,{a,b}{{1,2},{2,1}}]", 
       "Fold[Permute,{a,b},{1,2},{2,1}}]", "Fold[Permute,{a,b},{{,2},{2,1}}]",
        "Fold[Permute,{a,b},{{12},{2,1}}]", 
       "Fold[Permute,{a,b},{{1,},{2,1}}]", "Fold[Permute,{a,b},{{1,2,{2,1}}]",
        "Fold[Permute,{a,b},{{1,2}{2,1}}]", 
       "Fold[Permute,{a,b},{{1,2},2,1}}]", "Fold[Permute,{a,b},{{1,2},{,1}}]",
        "Fold[Permute,{a,b},{{1,2},{21}}]", 
       "Fold[Permute,{a,b},{{1,2},{2,}}]", "Fold[Permute,{a,b},{{1,2},{2,1}]",
        "Fold[Permute,{a,b},{{1,2},{2,1}}", 
       TextCell[
        Row[{"F", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "oldPermute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fo", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "ldPermute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fol", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "dPermute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldP", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "ermute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPe", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "rmute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPer", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "mute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPerm", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "ute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPermu", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "te,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPermut", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "e,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPermute", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,a", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",b},{{1,2},{2,1}}]"}]], 
       
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{ab},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{ab},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{ab},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "b,{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b}{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b}{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b}{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "{a,b},{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "a,b},{1,2},{2,1}}]"}]], 
       
       TextCell[
        Row[{"Fold[Permute,{a", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",b},{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{12},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{12},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{12},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{1,},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{1,2}{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2}{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,2}{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2},2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,2},2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},2,", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},2,1", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{1,2},{,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2},{,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,2},{,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{1,2},{21}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2},{21}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,2},{21}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{1,2},{2,}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2},{2,}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,2},{2,}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},{", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "2,1}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},{2,1", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},{2,1}", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},{2,1}}", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]}, {{{1, 2}, {1, 
       3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {1, 7}, {1, 8}, {1, 9}, {1, 10}, {
       1, 11}, {1, 12}, {1, 13}, {1, 14}, {1, 15}, {1, 16}, {1, 17}, {1, 
       17}, {1, 18}, {2, 19}, {2, 20}, {2, 21}, {2, 22}, {2, 23}, {2, 24}, {2,
        25}, {2, 26}, {2, 27}, {2, 28}, {2, 29}, {3, 30}, {3, 31}, {3, 32}, {
       3, 33}, {4, 34}, {4, 35}, {4, 36}, {5, 37}, {5, 38}, {6, 39}, {6, 
       40}, {6, 41}, {7, 42}, {7, 43}, {7, 44}, {7, 45}, {7, 46}, {7, 47}, {7,
        48}, {7, 42}, {7, 43}, {7, 44}, {7, 45}, {7, 46}, {7, 47}, {7, 48}, {
       8, 49}, {8, 50}, {8, 51}, {9, 52}, {9, 53}, {9, 54}, {10, 55}, {10, 
       56}, {10, 57}, {11, 58}, {12, 59}, {12, 60}, {12, 61}, {13, 62}, {13, 
       63}, {13, 64}, {13, 65}, {13, 66}, {14, 67}, {14, 68}, {14, 69}, {15, 
       70}, {15, 71}, {15, 72}, {16, 73}, {16, 74}, {16, 75}, {17, 76}, {17, 
       77}, {17, 78}, {17, 76}, {17, 77}, {17, 78}, {18, 79}}, Null}, {
      VertexLabels -> {
         Placed["Name", Tooltip]}}]]}, 
    TagBox[GraphicsGroupBox[{{{{
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.0202865640651874], 
           ArrowBox[{{2.455156498282025, 2.465557797635123}, {
            4.979073546299636, 2.6700007401421666`}}, 0.04810696373613041], 
           ArrowBox[{{2.455156498282025, 2.465557797635123}, {
            1.2028022878513804`, 1.1733778686972671`}}, 0.04810696373613041], 
           ArrowBox[{{2.455156498282025, 2.465557797635123}, {
            1.221433220769156, 1.8588240629247683`}}, 0.04810696373613041], 
           ArrowBox[{{2.455156498282025, 2.465557797635123}, {
            2.3836219651702417`, 3.1202567162241346`}}, 0.04810696373613041], 
           ArrowBox[{{2.455156498282025, 2.465557797635123}, {
            1.9238357207022847`, 1.1316891493720413`}}, 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.455156498282025, 2.465557797635123}, {
            2.033138837114058, 3.5523295353927797`}, {2.3385697762162585`, 
            4.677444488529635}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.455156498282025, 2.465557797635123}, {
            2.7605874373842236`, 3.590672750772019}, {2.3385697762162585`, 
            4.677444488529635}}], 0.04810696373613041], 
           ArrowBox[{{2.455156498282025, 2.465557797635123}, {
            3.087882858720395, 3.7004885810098735`}}, 0.04810696373613041], 
           ArrowBox[{{2.455156498282025, 2.465557797635123}, {
            2.9364155786224764`, 1.187940569619117}}, 0.04810696373613041], 
           ArrowBox[{{2.455156498282025, 2.465557797635123}, {
            0.9241809792080413, 2.3232433538127535`}}, 0.04810696373613041], 
           ArrowBox[{{2.455156498282025, 2.465557797635123}, {
            2.9808398544298615`, 2.0650433341332257`}}, 0.04810696373613041], 
           ArrowBox[{{2.455156498282025, 2.465557797635123}, {
            1.216002063254127, 3.3639882109818604`}}, 0.04810696373613041], 
           ArrowBox[{{2.455156498282025, 2.465557797635123}, {
            3.771110903550237, 1.131226157779968}}, 0.04810696373613041], 
           ArrowBox[{{2.455156498282025, 2.465557797635123}, {
            3.4771193141755603`, 3.2181843037690454`}}, 0.04810696373613041], 
           ArrowBox[{{2.455156498282025, 2.465557797635123}, {
            2.4373261821882592`, 0.9284671675389724}}, 0.04810696373613041], 
           ArrowBox[{{2.455156498282025, 2.465557797635123}, {
            1.6992998338388494`, 3.678115884215651}}, 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.455156498282025, 2.465557797635123}, {
            1.686094421737915, 2.4267467800642364`}, {1.0441253130519672`, 
            2.8519978072898646`}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.455156498282025, 2.465557797635123}, {
            1.8131873895960713`, 2.890808824861739}, {1.0441253130519672`, 
            2.8519978072898646`}}], 0.04810696373613041], 
           ArrowBox[{{2.455156498282025, 2.465557797635123}, {
            3.1315731498624393`, 2.5067351094718267`}}, 0.04810696373613041], 
           ArrowBox[{{4.979073546299636, 2.6700007401421666`}, {
            5.640633411257147, 2.762914115981149}}, 0.04810696373613041], 
           ArrowBox[{{4.979073546299636, 2.6700007401421666`}, {
            5.371226194043853, 3.346036224186691}}, 0.04810696373613041], 
           ArrowBox[{{4.979073546299636, 2.6700007401421666`}, {
            5.838289960034524, 2.348309740703028}}, 0.04810696373613041], 
           ArrowBox[{{4.979073546299636, 2.6700007401421666`}, {
            5.680226940360697, 2.1342689552802425`}}, 0.04810696373613041], 
           ArrowBox[{{4.979073546299636, 2.6700007401421666`}, {
            5.398543796744468, 2.1003298752449537`}}, 0.04810696373613041], 
           ArrowBox[{{4.979073546299636, 2.6700007401421666`}, {
            5.506796705270757, 2.4390807894383024`}}, 0.04810696373613041], 
           ArrowBox[{{4.979073546299636, 2.6700007401421666`}, {
            5.667964239795078, 3.278813431980084}}, 0.04810696373613041], 
           ArrowBox[{{4.979073546299636, 2.6700007401421666`}, {
            5.928426763342836, 2.837084907301009}}, 0.04810696373613041], 
           ArrowBox[{{4.979073546299636, 2.6700007401421666`}, {
            5.906006816969359, 2.5835042313035808`}}, 0.04810696373613041], 
           ArrowBox[{{4.979073546299636, 2.6700007401421666`}, {
            5.8001877831214514`, 3.0615531744247897`}}, 0.04810696373613041], 
           ArrowBox[{{4.979073546299636, 2.6700007401421666`}, {
            5.434227252634811, 3.0361846752324553`}}, 0.04810696373613041], 
           ArrowBox[{{1.2028022878513804`, 1.1733778686972671`}, {
            0.5092286598633953, 0.5245868351498157}}, 0.04810696373613041], 
           ArrowBox[{{1.2028022878513804`, 1.1733778686972671`}, {
            0.7195432169346963, 0.6351405099648759}}, 0.04810696373613041], 
           ArrowBox[{{1.2028022878513804`, 1.1733778686972671`}, {
            0.8298008290550969, 0.37136949549888554`}}, 0.04810696373613041], 
           ArrowBox[{{1.2028022878513804`, 1.1733778686972671`}, {
            0.41767353667152607`, 0.816663034004635}}, 0.04810696373613041], 
           ArrowBox[{{1.221433220769156, 1.8588240629247683`}, {
            0.6955750922112522, 1.3808010304209526`}}, 0.04810696373613041], 
           ArrowBox[{{1.221433220769156, 1.8588240629247683`}, {
            0.573385676523813, 1.7286973574877007`}}, 0.04810696373613041], 
           ArrowBox[{{1.221433220769156, 1.8588240629247683`}, {
            0.41137859551038014`, 1.5260687599592682`}}, 0.04810696373613041],
            ArrowBox[{{2.3836219651702417`, 3.1202567162241346`}, {
            2.4454267736919717`, 3.6700895166155596`}}, 0.04810696373613041], 
           ArrowBox[{{2.3836219651702417`, 3.1202567162241346`}, {
            2.0910391561625468`, 3.397685521272157}}, 0.04810696373613041], 
           ArrowBox[{{1.9238357207022847`, 1.1316891493720413`}, {
            1.6006885212902706`, 0.28850519860509527`}}, 0.04810696373613041],
            ArrowBox[{{1.9238357207022847`, 1.1316891493720413`}, {
            1.8368725649677464`, 0.4107007364119162}}, 0.04810696373613041], 
           ArrowBox[{{1.9238357207022847`, 1.1316891493720413`}, {
            1.504445542094924, 0.559901887051679}}, 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.3385697762162585`, 
            4.677444488529635}, {2.197819658060222, 5.151276613167185}, {
            2.365794107939095, 5.616155158857377}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.3385697762162585`, 
            4.677444488529635}, {2.5065442260951323`, 5.142323034251151}, {
            2.365794107939095, 5.616155158857377}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.3385697762162585`, 
            4.677444488529635}, {1.9547654619313615`, 4.925557329009747}, {
            1.793154377287892, 5.353047200897608}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.3385697762162585`, 
            4.677444488529635}, {2.1769586915728105`, 5.104934360409412}, {
            1.793154377287892, 5.353047200897608}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.3385697762162585`, 
            4.677444488529635}, {2.06586745769551, 5.093476697268827}, {
            2.0933404743354584`, 5.590160285261039}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.3385697762162585`, 
            4.677444488529635}, {2.3660427928562022`, 5.1741280765177535`}, {
            2.0933404743354584`, 5.590160285261039}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.3385697762162585`, 
            4.677444488529635}, {2.3490120853997554`, 5.1556763899346185`}, {
            2.6412760133050144`, 5.534353811642646}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.3385697762162585`, 
            4.677444488529635}, {2.6308337041215255`, 5.056121910273459}, {
            2.6412760133050144`, 5.534353811642646}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.3385697762162585`, 
            4.677444488529635}, {2.2581657908627872`, 5.016585519375013}, {
            2.39475866289331, 5.3372470651451245`}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.3385697762162585`, 
            4.677444488529635}, {2.475162648246782, 4.998106034364183}, {
            2.39475866289331, 5.3372470651451245`}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.3385697762162585`, 
            4.677444488529635}, {2.4591125675069327`, 5.070726199873615}, {
            2.789560938747385, 5.315685263840761}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.3385697762162585`, 
            4.677444488529635}, {2.6690181474567107`, 4.922403552412656}, {
            2.789560938747385, 5.315685263840761}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.3385697762162585`, 
            4.677444488529635}, {2.081037507057497, 4.953370133958691}, {
            2.0375573350369147`, 5.328293200922742}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{2.3385697762162585`, 
            4.677444488529635}, {2.2950896041956765`, 5.052367555437559}, {
            2.0375573350369147`, 5.328293200922742}}], 0.04810696373613041], 
           ArrowBox[{{3.087882858720395, 3.7004885810098735`}, {
            3.449457273311835, 4.447244355353284}}, 0.04810696373613041], 
           ArrowBox[{{3.087882858720395, 3.7004885810098735`}, {
            3.6156244554055736`, 4.2445021327199965`}}, 0.04810696373613041], 
           ArrowBox[{{3.087882858720395, 3.7004885810098735`}, {
            3.1777115046192996`, 4.35993218130929}}, 0.04810696373613041], 
           ArrowBox[{{2.9364155786224764`, 1.187940569619117}, {
            3.219616937505344, 0.3729283554982521}}, 0.04810696373613041], 
           ArrowBox[{{2.9364155786224764`, 1.187940569619117}, {
            3.345640463567641, 0.6348126183634875}}, 0.04810696373613041], 
           ArrowBox[{{2.9364155786224764`, 1.187940569619117}, {
            2.9851851145685098`, 0.5089935044022007}}, 0.04810696373613041], 
           ArrowBox[{{0.9241809792080413, 2.3232433538127535`}, {
            0.1712572185376966, 2.44116937526593}}, 0.04810696373613041], 
           ArrowBox[{{0.9241809792080413, 2.3232433538127535`}, {
            0.1572705533915908, 2.059377711473984}}, 0.04810696373613041], 
           ArrowBox[{{0.9241809792080413, 2.3232433538127535`}, {0., 
            2.2621963243544023`}}, 0.04810696373613041], 
           ArrowBox[{{2.9808398544298615`, 2.0650433341332257`}, {
            3.4847059664717683`, 1.8171168176954207`}}, 0.04810696373613041], 
           ArrowBox[{{1.216002063254127, 3.3639882109818604`}, {
            0.5121784322069138, 3.6742679634998385`}}, 0.04810696373613041], 
           ArrowBox[{{1.216002063254127, 3.3639882109818604`}, {
            0.4633580555129799, 3.9225974709307128`}}, 0.04810696373613041], 
           ArrowBox[{{1.216002063254127, 3.3639882109818604`}, {
            0.7137671125742844, 3.962867669881536}}, 0.04810696373613041], 
           ArrowBox[{{3.771110903550237, 1.131226157779968}, {
            4.241021330681377, 0.6312298548488304}}, 0.04810696373613041], 
           ArrowBox[{{3.771110903550237, 1.131226157779968}, {
            4.517047187182023, 0.631422856049173}}, 0.04810696373613041], 
           ArrowBox[{{3.771110903550237, 1.131226157779968}, {4.4642164264297,
             0.9287114965136622}}, 0.04810696373613041], 
           ArrowBox[{{3.771110903550237, 1.131226157779968}, {
            4.287512292560503, 0.36738193548106235`}}, 0.04810696373613041], 
           ArrowBox[{{3.771110903550237, 1.131226157779968}, {
            4.007766143329869, 0.3451714478162935}}, 0.04810696373613041], 
           ArrowBox[{{3.4771193141755603`, 3.2181843037690454`}, {
            3.8510364783341773`, 3.7884472078396985`}}, 0.04810696373613041], 
           ArrowBox[{{3.4771193141755603`, 3.2181843037690454`}, {
            4.08325133714783, 3.3670025632562113`}}, 0.04810696373613041], 
           ArrowBox[{{3.4771193141755603`, 3.2181843037690454`}, {
            4.100051320509163, 3.6747104233169496`}}, 0.04810696373613041], 
           ArrowBox[{{2.4373261821882592`, 0.9284671675389724}, {
            2.6326423552578073`, 0.14187404814464388`}}, 0.04810696373613041],
            ArrowBox[{{2.4373261821882592`, 0.9284671675389724}, {
            2.41462161781355, 0.}}, 0.04810696373613041], 
           ArrowBox[{{2.4373261821882592`, 0.9284671675389724}, {
            2.2575332553782053`, 0.1826564534690469}}, 0.04810696373613041], 
           ArrowBox[{{1.6992998338388494`, 3.678115884215651}, {
            1.2321991687914244`, 4.417428017141436}}, 0.04810696373613041], 
           ArrowBox[{{1.6992998338388494`, 3.678115884215651}, {
            1.1700021080332783`, 4.157270071165028}}, 0.04810696373613041], 
           ArrowBox[{{1.6992998338388494`, 3.678115884215651}, {
            1.5122142000300316`, 4.36600692611143}}, 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{1.0441253130519672`, 
            2.8519978072898646`}, {0.5678346067668056, 2.8154767861815913`}, {
            0.16284380873641568`, 3.068792943155376}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{1.0441253130519672`, 
            2.8519978072898646`}, {0.6391345150215758, 3.1053139642736145`}, {
            0.16284380873641568`, 3.068792943155376}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{1.0441253130519672`, 
            2.8519978072898646`}, {0.6451256431121782, 2.9467347571554967`}, {
            0.3802474757594232, 3.2598088422205027`}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{1.0441253130519672`, 
            2.8519978072898646`}, {0.7792471456992139, 3.1650718923609302`}, {
            0.3802474757594232, 3.2598088422205027`}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{1.0441253130519672`, 
            2.8519978072898646`}, {0.6878166508832357, 2.7623599519353745`}, {
            0.3478579210011117, 2.9017115569737726`}}], 0.04810696373613041], 
           ArrowBox[BezierCurveBox[{{1.0441253130519672`, 
            2.8519978072898646`}, {0.7041665831698414, 2.9913494123151647`}, {
            0.3478579210011117, 2.9017115569737726`}}], 0.04810696373613041], 
           ArrowBox[{{3.1315731498624393`, 2.5067351094718267`}, {
            3.700718162366088, 2.501039166386201}}, 
            0.04810696373613041]}}}}, {{{
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.455156498282025, 2.465557797635123}, 
              0.04810696373613041],
             "\"Fold[Permute,{a,b},{{1,2},{2,1}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{a,b},{{1,2},{2,1}}]", "Tooltip"]& ], 
           
           TagBox[
            
            TooltipBox[
             DiskBox[{4.979073546299636, 2.6700007401421666}, 
              0.04810696373613041],
             "\"FoldPermute,{a,b},{{1,2},{2,1}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "FoldPermute,{a,b},{{1,2},{2,1}}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{1.2028022878513804, 1.1733778686972671}, 
              0.04810696373613041],
             "\"Fold[Permute,a,b},{{1,2},{2,1}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,a,b},{{1,2},{2,1}}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{1.221433220769156, 1.8588240629247683}, 
              0.04810696373613041],
             "\"Fold[Permute,{ab},{{1,2},{2,1}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{ab},{{1,2},{2,1}}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.3836219651702417, 3.1202567162241346}, 
              0.04810696373613041],
             "\"Fold[Permute,{a,b,{{1,2},{2,1}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{a,b,{{1,2},{2,1}}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{1.9238357207022847, 1.1316891493720413}, 
              0.04810696373613041],
             "\"Fold[Permute,{a,b}{{1,2},{2,1}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{a,b}{{1,2},{2,1}}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.3385697762162585, 4.677444488529635}, 
              0.04810696373613041],
             "\"Fold[Permute,{a,b},{1,2},{2,1}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{a,b},{1,2},{2,1}}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{3.087882858720395, 3.7004885810098735}, 
              0.04810696373613041],
             "\"Fold[Permute,{a,b},{{,2},{2,1}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{a,b},{{,2},{2,1}}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.9364155786224764, 1.187940569619117}, 
              0.04810696373613041],
             "\"Fold[Permute,{a,b},{{12},{2,1}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{a,b},{{12},{2,1}}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.9241809792080413, 2.3232433538127535}, 
              0.04810696373613041],
             "\"Fold[Permute,{a,b},{{1,},{2,1}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{a,b},{{1,},{2,1}}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.9808398544298615, 2.0650433341332257}, 
              0.04810696373613041],
             "\"Fold[Permute,{a,b},{{1,2,{2,1}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{a,b},{{1,2,{2,1}}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{1.216002063254127, 3.3639882109818604}, 
              0.04810696373613041],
             "\"Fold[Permute,{a,b},{{1,2}{2,1}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{a,b},{{1,2}{2,1}}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{3.771110903550237, 1.131226157779968}, 
              0.04810696373613041],
             "\"Fold[Permute,{a,b},{{1,2},2,1}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{a,b},{{1,2},2,1}}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{3.4771193141755603, 3.2181843037690454}, 
              0.04810696373613041],
             "\"Fold[Permute,{a,b},{{1,2},{,1}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{a,b},{{1,2},{,1}}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.4373261821882592, 0.9284671675389724}, 
              0.04810696373613041],
             "\"Fold[Permute,{a,b},{{1,2},{21}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{a,b},{{1,2},{21}}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{1.6992998338388494, 3.678115884215651}, 
              0.04810696373613041],
             "\"Fold[Permute,{a,b},{{1,2},{2,}}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{a,b},{{1,2},{2,}}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{1.0441253130519672, 2.8519978072898646}, 
              0.04810696373613041],
             "\"Fold[Permute,{a,b},{{1,2},{2,1}]\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{a,b},{{1,2},{2,1}]", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{3.1315731498624393, 2.5067351094718267}, 
              0.04810696373613041],
             "\"Fold[Permute,{a,b},{{1,2},{2,1}}\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "Fold[Permute,{a,b},{{1,2},{2,1}}", "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{5.640633411257147, 2.762914115981149}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"F", 
                 StyleBox["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "oldPermute,{a,b},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"F", 
                 Style["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "oldPermute,{a,b},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"F", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "oldPermute,{a,b},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{5.371226194043853, 3.346036224186691}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fo", 
                 StyleBox["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "ldPermute,{a,b},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fo", 
                 Style["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "ldPermute,{a,b},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fo", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "ldPermute,{a,b},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{5.838289960034524, 2.348309740703028}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fol", 
                 StyleBox["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "dPermute,{a,b},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fol", 
                 Style["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "dPermute,{a,b},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fol", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "dPermute,{a,b},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{5.680226940360697, 2.1342689552802425}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold", 
                 StyleBox["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "Permute,{a,b},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold", 
                 Style["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "Permute,{a,b},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{5.398543796744468, 2.1003298752449537}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"FoldP", 
                 StyleBox["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "ermute,{a,b},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"FoldP", 
                 Style["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "ermute,{a,b},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"FoldP", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "ermute,{a,b},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{5.506796705270757, 2.4390807894383024}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"FoldPe", 
                 StyleBox["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "rmute,{a,b},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"FoldPe", 
                 Style["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "rmute,{a,b},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"FoldPe", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "rmute,{a,b},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{5.667964239795078, 3.278813431980084}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"FoldPer", 
                 StyleBox["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "mute,{a,b},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"FoldPer", 
                 Style["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "mute,{a,b},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"FoldPer", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "mute,{a,b},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{5.928426763342836, 2.837084907301009}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"FoldPerm", 
                 StyleBox["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "ute,{a,b},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"FoldPerm", 
                 Style["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "ute,{a,b},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"FoldPerm", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "ute,{a,b},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{5.906006816969359, 2.5835042313035808}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"FoldPermu", 
                 StyleBox["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "te,{a,b},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"FoldPermu", 
                 Style["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "te,{a,b},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"FoldPermu", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "te,{a,b},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{5.8001877831214514, 3.0615531744247897}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"FoldPermut", 
                 StyleBox["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "e,{a,b},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"FoldPermut", 
                 Style["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "e,{a,b},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"FoldPermut", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "e,{a,b},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{5.434227252634811, 3.0361846752324553}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"FoldPermute", 
                 StyleBox["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",{a,b},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"FoldPermute", 
                 Style["[", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",{a,b},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"FoldPermute", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{a,b},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.5092286598633953, 0.5245868351498157}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "Permute,a,b},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "Permute,a,b},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,a,b},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.7195432169346963, 0.6351405099648759}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",a,b},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",a,b},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",a,b},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.8298008290550969, 0.37136949549888554}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "a,b},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute,", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "a,b},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "a,b},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.41767353667152607, 0.816663034004635}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,a", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",b},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute,a", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",b},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,a", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",b},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.6955750922112522, 1.3808010304209526}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "[Permute,{ab},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "[Permute,{ab},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "[Permute,{ab},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.573385676523813, 1.7286973574877007}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "Permute,{ab},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "Permute,{ab},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{ab},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.41137859551038014, 1.5260687599592682}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",{ab},{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",{ab},{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{ab},{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.4454267736919717, 3.6700895166155596}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,{a,", 
                 StyleBox["}", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "b,{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute,{a,", 
                 Style["}", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "b,{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,{a,", 
                Style["}", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "b,{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.0910391561625468, 3.397685521272157}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,{a,b", 
                 StyleBox["}", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute,{a,b", 
                 Style["}", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,{a,b", 
                Style["}", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{1.6006885212902706, 0.28850519860509527}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "[Permute,{a,b}{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "[Permute,{a,b}{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "[Permute,{a,b}{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{1.8368725649677464, 0.4107007364119162}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "Permute,{a,b}{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "Permute,{a,b}{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b}{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{1.504445542094924, 0.559901887051679}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",{a,b}{{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",{a,b}{{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{a,b}{{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.365794107939095, 5.616155158857377}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "Permute,{a,b},{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "Permute,{a,b},{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{1.793154377287892, 5.353047200897608}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",{a,b},{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",{a,b},{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{a,b},{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.0933404743354584, 5.590160285261039}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "{a,b},{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute,", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "{a,b},{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "{a,b},{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.6412760133050144, 5.534353811642646}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,{", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "a,b},{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute,{", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "a,b},{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,{", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "a,b},{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.39475866289331, 5.3372470651451245}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,{a", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",b},{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute,{a", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",b},{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,{a", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",b},{1,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.789560938747385, 5.315685263840761}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,{a,b},", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "{1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute,{a,b},", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "{1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,{a,b},", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], "{1,2},{2,1}}]"}]],
              "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.0375573350369147, 5.328293200922742}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,{a,b},{", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "1,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute,{a,b},{", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "1,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,{a,b},{", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], "1,2},{2,1}}]"}]], 
             "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{3.449457273311835, 4.447244355353284}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "[Permute,{a,b},{{,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "[Permute,{a,b},{{,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "[Permute,{a,b},{{,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{3.6156244554055736, 4.2445021327199965}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "Permute,{a,b},{{,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "Permute,{a,b},{{,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{{,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{3.1777115046192996, 4.35993218130929}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",{a,b},{{,2},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",{a,b},{{,2},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{a,b},{{,2},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{3.219616937505344, 0.3729283554982521}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "[Permute,{a,b},{{12},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "[Permute,{a,b},{{12},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "[Permute,{a,b},{{12},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{3.345640463567641, 0.6348126183634875}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "Permute,{a,b},{{12},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "Permute,{a,b},{{12},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{{12},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.9851851145685098, 0.5089935044022007}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",{a,b},{{12},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",{a,b},{{12},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{a,b},{{12},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.1712572185376966, 2.44116937526593}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "[Permute,{a,b},{{1,},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "[Permute,{a,b},{{1,},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "[Permute,{a,b},{{1,},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.1572705533915908, 2.059377711473984}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "Permute,{a,b},{{1,},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "Permute,{a,b},{{1,},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{{1,},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[DiskBox[{0., 2.2621963243544023}, 0.04810696373613041],
             
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",{a,b},{{1,},{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",{a,b},{{1,},{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{a,b},{{1,},{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{3.4847059664717683, 1.8171168176954207}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,{a,b},{{1,2", 
                 StyleBox["}", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute,{a,b},{{1,2", 
                 Style["}", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2", 
                Style["}", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{2,1}}]"}]], 
             "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.5121784322069138, 3.6742679634998385}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "[Permute,{a,b},{{1,2}{2,1}}]"}]], 
              TextCell[
               Row[{"Fold", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "[Permute,{a,b},{{1,2}{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "[Permute,{a,b},{{1,2}{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.4633580555129799, 3.9225974709307128}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "Permute,{a,b},{{1,2}{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "Permute,{a,b},{{1,2}{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{{1,2}{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.7137671125742844, 3.962867669881536}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",{a,b},{{1,2}{2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",{a,b},{{1,2}{2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{a,b},{{1,2}{2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{4.241021330681377, 0.6312298548488304}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "Permute,{a,b},{{1,2},2,1}}]"}]], 
              TextCell[
               Row[{"Fold[", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "Permute,{a,b},{{1,2},2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{{1,2},2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{4.517047187182023, 0.631422856049173}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",{a,b},{{1,2},2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",{a,b},{{1,2},2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{a,b},{{1,2},2,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{4.4642164264297, 0.9287114965136622}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,{a,b},{{1,2},", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "2,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute,{a,b},{{1,2},", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], "2,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2},", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], "2,1}}]"}]], 
             "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{4.287512292560503, 0.36738193548106235}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,{a,b},{{1,2},2,", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute,{a,b},{{1,2},2,", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], "1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2},2,", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], "1}}]"}]], 
             "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{4.007766143329869, 0.3451714478162935}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,{a,b},{{1,2},2,1", 
                 StyleBox["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "}}]"}]], 
              TextCell[
               Row[{"Fold[Permute,{a,b},{{1,2},2,1", 
                 Style["{", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], "}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2},2,1", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], "}}]"}]], 
             "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{3.8510364783341773, 3.7884472078396985}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "[Permute,{a,b},{{1,2},{,1}}]"}]], 
              TextCell[
               Row[{"Fold", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "[Permute,{a,b},{{1,2},{,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "[Permute,{a,b},{{1,2},{,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{4.08325133714783, 3.3670025632562113}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "Permute,{a,b},{{1,2},{,1}}]"}]], 
              TextCell[
               Row[{"Fold[", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "Permute,{a,b},{{1,2},{,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{{1,2},{,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{4.100051320509163, 3.6747104233169496}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",{a,b},{{1,2},{,1}}]"}]], 
              TextCell[
               Row[{"Fold[Permute", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",{a,b},{{1,2},{,1}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{a,b},{{1,2},{,1}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.6326423552578073, 0.14187404814464388}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "[Permute,{a,b},{{1,2},{21}}]"}]], 
              TextCell[
               Row[{"Fold", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "[Permute,{a,b},{{1,2},{21}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "[Permute,{a,b},{{1,2},{21}}]"}]], "Tooltip"]& ], 
           TagBox[
            TooltipBox[DiskBox[{2.41462161781355, 0.}, 0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "Permute,{a,b},{{1,2},{21}}]"}]], 
              TextCell[
               Row[{"Fold[", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "Permute,{a,b},{{1,2},{21}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{{1,2},{21}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{2.2575332553782053, 0.1826564534690469}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",{a,b},{{1,2},{21}}]"}]], 
              TextCell[
               Row[{"Fold[Permute", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",{a,b},{{1,2},{21}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{a,b},{{1,2},{21}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{1.2321991687914244, 4.417428017141436}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "[Permute,{a,b},{{1,2},{2,}}]"}]], 
              TextCell[
               Row[{"Fold", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "[Permute,{a,b},{{1,2},{2,}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "[Permute,{a,b},{{1,2},{2,}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{1.1700021080332783, 4.157270071165028}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "Permute,{a,b},{{1,2},{2,}}]"}]], 
              TextCell[
               Row[{"Fold[", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 "Permute,{a,b},{{1,2},{2,}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{{1,2},{2,}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{1.5122142000300316, 4.36600692611143}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute", 
                 StyleBox["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ",{a,b},{{1,2},{2,}}]"}]], 
              TextCell[
               Row[{"Fold[Permute", 
                 Style["\[Placeholder]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                 ",{a,b},{{1,2},{2,}}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{a,b},{{1,2},{2,}}]"}]], "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.16284380873641568, 3.068792943155376}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,{a,b},{{1,2},{", 
                 StyleBox["}", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "2,1}]"}]], 
              TextCell[
               Row[{"Fold[Permute,{a,b},{{1,2},{", 
                 Style["}", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], "2,1}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2},{", 
                Style["}", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], "2,1}]"}]], 
             "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.3802474757594232, 3.2598088422205027}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,{a,b},{{1,2},{2,1", 
                 StyleBox["}", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "}]"}]], 
              TextCell[
               Row[{"Fold[Permute,{a,b},{{1,2},{2,1", 
                 Style["}", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], "}]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2},{2,1", 
                Style["}", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], "}]"}]], 
             "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{0.3478579210011117, 2.9017115569737726}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,{a,b},{{1,2},{2,1}", 
                 StyleBox["}", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], "]"}]], 
              TextCell[
               Row[{"Fold[Permute,{a,b},{{1,2},{2,1}", 
                 Style["}", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2},{2,1}", 
                Style["}", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]], 
             "Tooltip"]& ], 
           TagBox[
            
            TooltipBox[
             DiskBox[{3.700718162366088, 2.501039166386201}, 
              0.04810696373613041],
             InterpretationBox[
              Cell[
               TextData[{"Fold[Permute,{a,b},{{1,2},{2,1}}", 
                 StyleBox["]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold, StripOnInput -> 
                  False], ""}]], 
              TextCell[
               Row[{"Fold[Permute,{a,b},{{1,2},{2,1}}", 
                 Style["]", 
                  RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]]],
            Annotation[#, 
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2},{2,1}}", 
                Style["]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]], 
             "Tooltip"]& ]}}}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{
  3.708186950623351*^9},ExpressionUUID->"6375c17e-2f8e-4581-8855-\
bc36938bc4cd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"Flatten", "@", 
    RowBox[{"{", 
     RowBox[{"intofil", ",", "filtocor"}], "}"}]}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "Below"}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.708184472854803*^9, 3.708184522250786*^9}, {
   3.7081846906059885`*^9, 3.7081847441679163`*^9}, {3.7081855391581855`*^9, 
   3.7081855444319315`*^9}, {3.708185606104602*^9, 3.708185606626978*^9}, 
   3.7081856376363716`*^9, 
   3.708186410838874*^9},ExpressionUUID->"fccc74a8-bc43-4c87-b295-\
d9f66a838bf1"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Fold[Permute,{a,b},{{1,2},{2,1}}]", "FoldPermute,{a,b},{{1,2},{2,1}}]",
        "Fold[Permute,a,b},{{1,2},{2,1}}]", 
       "Fold[Permute,{ab},{{1,2},{2,1}}]", "Fold[Permute,{a,b,{{1,2},{2,1}}]",
        "Fold[Permute,{a,b}{{1,2},{2,1}}]", 
       "Fold[Permute,{a,b},{1,2},{2,1}}]", "Fold[Permute,{a,b},{{,2},{2,1}}]",
        "Fold[Permute,{a,b},{{12},{2,1}}]", 
       "Fold[Permute,{a,b},{{1,},{2,1}}]", "Fold[Permute,{a,b},{{1,2,{2,1}}]",
        "Fold[Permute,{a,b},{{1,2}{2,1}}]", 
       "Fold[Permute,{a,b},{{1,2},2,1}}]", "Fold[Permute,{a,b},{{1,2},{,1}}]",
        "Fold[Permute,{a,b},{{1,2},{21}}]", 
       "Fold[Permute,{a,b},{{1,2},{2,}}]", "Fold[Permute,{a,b},{{1,2},{2,1}]",
        "Fold[Permute,{a,b},{{1,2},{2,1}}", 
       TextCell[
        Row[{"F", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "oldPermute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fo", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "ldPermute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fol", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "dPermute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldP", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "ermute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPe", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "rmute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPer", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "mute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPerm", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "ute,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPermu", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "te,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"FoldPermut", 
          Style["[", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "e,{a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "a,b},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{ab},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{ab},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{ab},{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b}{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b}{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b}{{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "{a,b},{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "a,b},{1,2},{2,1}}]"}]], 
       
       TextCell[
        Row[{"Fold[Permute,{a,b},", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "{1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "1,2},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{12},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{12},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{12},{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{2,1}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{1,2}{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2}{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,2}{2,1}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2},2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "2,1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},2,", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "1}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},2,1", 
          Style["{", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "}}]"}]], 
       TextCell[
        Row[{"Fold", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "[Permute,{a,b},{{1,2},{21}}]"}]], 
       TextCell[
        Row[{"Fold[", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          "Permute,{a,b},{{1,2},{21}}]"}]], 
       TextCell[
        Row[{"Fold[Permute", 
          Style["\[Placeholder]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], 
          ",{a,b},{{1,2},{21}}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},{", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "2,1}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},{2,1", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "}]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},{2,1}", 
          Style["}", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]], 
       TextCell[
        Row[{"Fold[Permute,{a,b},{{1,2},{2,1}}", 
          Style["]", 
           RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]}, {{{1, 2}, {1, 
       3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {1, 7}, {1, 8}, {1, 9}, {1, 10}, {
       1, 11}, {1, 12}, {1, 13}, {1, 14}, {1, 15}, {1, 16}, {1, 17}, {1, 
       17}, {1, 18}, {2, 19}, {2, 20}, {2, 21}, {2, 22}, {2, 23}, {2, 24}, {2,
        25}, {2, 26}, {2, 27}, {2, 28}, {3, 29}, {3, 30}, {4, 31}, {4, 32}, {
       4, 33}, {5, 34}, {6, 35}, {6, 36}, {6, 37}, {7, 38}, {7, 39}, {7, 
       40}, {7, 41}, {7, 42}, {7, 38}, {7, 39}, {7, 40}, {7, 41}, {7, 42}, {9,
        43}, {9, 44}, {9, 45}, {11, 46}, {12, 47}, {12, 48}, {12, 49}, {13, 
       50}, {13, 51}, {13, 52}, {13, 53}, {15, 54}, {15, 55}, {15, 56}, {17, 
       57}, {17, 58}, {17, 59}, {17, 57}, {17, 58}, {17, 59}, {18, 60}}, 
       Null}, {VertexLabels -> {
         Placed["Name", Below]}}]]}, 
    TagBox[GraphicsGroupBox[{{{
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.020389114379557115`],
           ArrowBox[{{2.4514455904343824`, 2.4205007628413524`}, {
           4.848579312481029, 2.4749166915978855`}}, 0.0476761431967728], 
          ArrowBox[{{2.4514455904343824`, 2.4205007628413524`}, {
           1.2299737202124439`, 2.1637882009954117`}}, 0.0476761431967728], 
          ArrowBox[{{2.4514455904343824`, 2.4205007628413524`}, {
           1.3851305898853314`, 3.56737476836895}}, 0.0476761431967728], 
          ArrowBox[{{2.4514455904343824`, 2.4205007628413524`}, {
           1.778271328228857, 2.8522650869450605`}}, 0.0476761431967728], 
          ArrowBox[{{2.4514455904343824`, 2.4205007628413524`}, {
           1.172116971109306, 1.44984960720282}}, 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{2.4514455904343824`, 
           2.4205007628413524`}, {2.0151069273789664`, 3.3144505301406726`}, {
           2.19456077673624, 4.292884958855038}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{2.4514455904343824`, 
           2.4205007628413524`}, {2.6308994397916567`, 3.3989351915523605`}, {
           2.19456077673624, 4.292884958855038}}], 0.0476761431967728], 
          ArrowBox[{{2.4514455904343824`, 2.4205007628413524`}, {
           2.639087826705379, 2.977152665622457}}, 0.0476761431967728], 
          ArrowBox[{{2.4514455904343824`, 2.4205007628413524`}, {
           3.4264005939897344`, 1.3176578878188556`}}, 0.0476761431967728], 
          ArrowBox[{{2.4514455904343824`, 2.4205007628413524`}, {
           2.244891067133515, 2.8407724680176836`}}, 0.0476761431967728], 
          ArrowBox[{{2.4514455904343824`, 2.4205007628413524`}, {
           3.229745131857085, 2.327064962923755}}, 0.0476761431967728], 
          ArrowBox[{{2.4514455904343824`, 2.4205007628413524`}, {
           2.7284280652527286`, 0.8825864195719899}}, 0.0476761431967728], 
          ArrowBox[{{2.4514455904343824`, 2.4205007628413524`}, {
           3.3340641806235354`, 3.7722277343174353`}}, 0.0476761431967728], 
          ArrowBox[{{2.4514455904343824`, 2.4205007628413524`}, {
           2.639570982637411, 1.9604839286495368`}}, 0.0476761431967728], 
          ArrowBox[{{2.4514455904343824`, 2.4205007628413524`}, {
           0.8755518665571802, 2.7327530762455052`}}, 0.0476761431967728], 
          ArrowBox[{{2.4514455904343824`, 2.4205007628413524`}, {
           2.9130360049133266`, 2.6565778148350296`}}, 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{2.4514455904343824`, 
           2.4205007628413524`}, {2.433450435095219, 1.5812162500296152`}, {
           1.9208011090630204`, 0.9164508872280792}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{2.4514455904343824`, 
           2.4205007628413524`}, {1.9387962644021808`, 1.7557354000404495`}, {
           1.9208011090630204`, 0.9164508872280792}}], 0.0476761431967728], 
          ArrowBox[{{2.4514455904343824`, 2.4205007628413524`}, {
           2.0318316079371295`, 1.791589888443387}}, 0.0476761431967728], 
          ArrowBox[{{4.848579312481029, 2.4749166915978855`}, {
           5.363936767709726, 2.174305431977584}}, 0.0476761431967728], 
          ArrowBox[{{4.848579312481029, 2.4749166915978855`}, {
           5.360384966091607, 2.795425278584819}}, 0.0476761431967728], 
          ArrowBox[{{4.848579312481029, 2.4749166915978855`}, {
           5.562056309639392, 1.8867881623033609`}}, 0.0476761431967728], 
          ArrowBox[{{4.848579312481029, 2.4749166915978855`}, {
           5.845783969481121, 2.483822899042}}, 0.0476761431967728], 
          ArrowBox[{{4.848579312481029, 2.4749166915978855`}, {
           5.738945571258128, 2.1609588941139792`}}, 0.0476761431967728], 
          ArrowBox[{{4.848579312481029, 2.4749166915978855`}, {
           5.746176961533809, 2.8291465929783244`}}, 0.0476761431967728], 
          ArrowBox[{{4.848579312481029, 2.4749166915978855`}, {
           5.175199185238807, 3.130213669358908}}, 0.0476761431967728], 
          ArrowBox[{{4.848579312481029, 2.4749166915978855`}, {
           5.518412792803819, 3.0993925768733392`}}, 0.0476761431967728], 
          ArrowBox[{{4.848579312481029, 2.4749166915978855`}, {
           5.561633019392158, 2.521566679471713}}, 0.0476761431967728], 
          ArrowBox[{{4.848579312481029, 2.4749166915978855`}, {
           5.21093381312901, 1.834250450670415}}, 0.0476761431967728], 
          ArrowBox[{{1.2299737202124439`, 2.1637882009954117`}, {
           0.43657174848899016`, 2.1341525002447956`}}, 0.0476761431967728], 
          ArrowBox[{{1.2299737202124439`, 2.1637882009954117`}, {
           0.4961660862869386, 1.835974444249926}}, 0.0476761431967728], 
          ArrowBox[{{1.3851305898853314`, 3.56737476836895}, {
           1.0196680607533617`, 4.290815660437276}}, 0.0476761431967728], 
          ArrowBox[{{1.3851305898853314`, 3.56737476836895}, {
           0.6439454456709566, 3.905011743860359}}, 0.0476761431967728], 
          ArrowBox[{{1.3851305898853314`, 3.56737476836895}, {
           0.7477931572122098, 4.178716728582527}}, 0.0476761431967728], 
          ArrowBox[{{1.778271328228857, 2.8522650869450605`}, {
           1.252344465422641, 3.1833120371210697`}}, 0.0476761431967728], 
          ArrowBox[{{1.172116971109306, 1.44984960720282}, {
           0.4855696890689045, 0.9112734372533251}}, 0.0476761431967728], 
          ArrowBox[{{1.172116971109306, 1.44984960720282}, {
           0.7216780500914617, 0.7479372055896032}}, 0.0476761431967728], 
          ArrowBox[{{1.172116971109306, 1.44984960720282}, {0.360537576318678,
            1.166659373305161}}, 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{2.19456077673624, 4.292884958855038}, {
           1.883384451959698, 4.6453327189564835`}, {1.8421527425748712`, 
           5.113680959894557}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{2.19456077673624, 4.292884958855038}, {
           2.153329067351406, 4.7612331998325015`}, {1.8421527425748712`, 
           5.113680959894557}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{2.19456077673624, 4.292884958855038}, {
           1.8387179862203402`, 4.506211960419555}, {1.6789624796954938`, 
           4.889109700441505}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{2.19456077673624, 4.292884958855038}, {
           2.034805270211416, 4.675782698897754}, {1.6789624796954938`, 
           4.889109700441505}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{2.19456077673624, 4.292884958855038}, {
           2.0049756039678845`, 4.743537075139775}, {2.119889397279932, 
           5.218747226256809}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{2.19456077673624, 4.292884958855038}, {
           2.3094745700482875`, 4.768095110002202}, {2.119889397279932, 
           5.218747226256809}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{2.19456077673624, 4.292884958855038}, {
           2.2219565790943174`, 4.749746965880777}, {2.5151801368395574`, 
           5.101163198709843}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{2.19456077673624, 4.292884958855038}, {
           2.4877843344814794`, 4.644301191641711}, {2.5151801368395574`, 
           5.101163198709843}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{2.19456077673624, 4.292884958855038}, {
           2.1238450499106816`, 4.634391949948189}, {2.269639264887045, 
           4.951207015616376}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{2.19456077673624, 4.292884958855038}, {
           2.3403549917126076`, 4.609700024566013}, {2.269639264887045, 
           4.951207015616376}}], 0.0476761431967728], 
          ArrowBox[{{3.4264005939897344`, 1.3176578878188556`}, {
           3.694984474220088, 0.6101342356186981}}, 0.0476761431967728], 
          ArrowBox[{{3.4264005939897344`, 1.3176578878188556`}, {
           3.987280223336482, 0.651512180621409}}, 0.0476761431967728], 
          ArrowBox[{{3.4264005939897344`, 1.3176578878188556`}, {
           4.086371301607729, 0.9556405140829813}}, 0.0476761431967728], 
          ArrowBox[{{3.229745131857085, 2.327064962923755}, {
           3.8021337393505377`, 2.27646695926385}}, 0.0476761431967728], 
          ArrowBox[{{2.7284280652527286`, 0.8825864195719899}, {
           2.882538346403023, 0.}}, 0.0476761431967728], 
          ArrowBox[{{2.7284280652527286`, 0.8825864195719899}, {
           3.1249128692498105`, 0.1584234340380184}}, 0.0476761431967728], 
          ArrowBox[{{2.7284280652527286`, 0.8825864195719899}, {
           2.606577853028568, 0.08241122946755297}}, 0.0476761431967728], 
          ArrowBox[{{3.3340641806235354`, 3.7722277343174353`}, {
           3.9852023321312746`, 4.117594974403625}}, 0.0476761431967728], 
          ArrowBox[{{3.3340641806235354`, 3.7722277343174353`}, {
           3.6580940173848457`, 4.580529353035235}}, 0.0476761431967728], 
          ArrowBox[{{3.3340641806235354`, 3.7722277343174353`}, {
           3.8784730047973373`, 4.390074972338862}}, 0.0476761431967728], 
          ArrowBox[{{3.3340641806235354`, 3.7722277343174353`}, {
           3.3947812848702235`, 4.451355659915195}}, 0.0476761431967728], 
          ArrowBox[{{0.8755518665571802, 2.7327530762455052`}, {0., 
           2.90126556969364}}, 0.0476761431967728], 
          ArrowBox[{{0.8755518665571802, 2.7327530762455052`}, {
           0.02456980640031503, 2.6077572528034962`}}, 0.0476761431967728], 
          ArrowBox[{{0.8755518665571802, 2.7327530762455052`}, {
           0.15845861616227097`, 3.1557491537583875`}}, 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{1.9208011090630204`, 
           0.9164508872280792}, {2.043869854656798, 0.50282621273024}, {
           1.897402466399265, 0.09689691879723705}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{1.9208011090630204`, 
           0.9164508872280792}, {1.7743337208054881`, 0.5105215932953228}, {
           1.897402466399265, 0.09689691879723705}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{1.9208011090630204`, 
           0.9164508872280792}, {1.9054025874710534`, 0.446332911418274}, {
           1.6139660707580201`, 0.07712730153043612}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{1.9208011090630204`, 
           0.9164508872280792}, {1.6293645923499906`, 0.5472452773402338}, {
           1.6139660707580201`, 0.07712730153043612}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{1.9208011090630204`, 
           0.9164508872280792}, {1.7639972437165068`, 0.500262281248896}, {
           1.3907697217594115`, 0.25839118998777977`}}], 0.0476761431967728], 
          ArrowBox[BezierCurveBox[{{1.9208011090630204`, 
           0.9164508872280792}, {1.5475735871059226`, 0.6745797959661303}, {
           1.3907697217594115`, 0.25839118998777977`}}], 0.0476761431967728], 
          ArrowBox[{{2.0318316079371295`, 1.791589888443387}, {
           1.6675022114545934`, 1.3102590201428663`}}, 
           0.0476761431967728]}}}, {{
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
          0.7]}], {
           DiskBox[{2.4514455904343824, 2.4205007628413524}, 
            0.0476761431967728], 
           InsetBox["\<\"Fold[Permute,{a,b},{{1,2},{2,1}}]\"\>", 
            Offset[{0, -2}, {2.4514455904343824, 2.3728246196445797}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{4.848579312481029, 2.4749166915978855}, 
            0.0476761431967728], 
           InsetBox["\<\"FoldPermute,{a,b},{{1,2},{2,1}}]\"\>", 
            Offset[{0, -2}, {4.848579312481029, 2.427240548401113}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.2299737202124439, 2.1637882009954117}, 
            0.0476761431967728], 
           InsetBox["\<\"Fold[Permute,a,b},{{1,2},{2,1}}]\"\>", 
            Offset[{0, -2}, {1.2299737202124439, 2.116112057798639}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.3851305898853314, 3.56737476836895}, 
            0.0476761431967728], 
           InsetBox["\<\"Fold[Permute,{ab},{{1,2},{2,1}}]\"\>", 
            Offset[{0, -2}, {1.3851305898853314, 3.519698625172177}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.778271328228857, 2.8522650869450605}, 
            0.0476761431967728], 
           InsetBox["\<\"Fold[Permute,{a,b,{{1,2},{2,1}}]\"\>", 
            Offset[{0, -2}, {1.778271328228857, 2.804588943748288}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.172116971109306, 1.44984960720282}, 0.0476761431967728],
            InsetBox["\<\"Fold[Permute,{a,b}{{1,2},{2,1}}]\"\>", 
            Offset[{0, -2}, {1.172116971109306, 1.4021734640060473}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.19456077673624, 4.292884958855038}, 0.0476761431967728],
            InsetBox["\<\"Fold[Permute,{a,b},{1,2},{2,1}}]\"\>", 
            Offset[{0, -2}, {2.19456077673624, 4.245208815658265}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.639087826705379, 2.977152665622457}, 
            0.0476761431967728], 
           InsetBox["\<\"Fold[Permute,{a,b},{{,2},{2,1}}]\"\>", 
            Offset[{0, -2}, {2.639087826705379, 2.9294765224256842}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{3.4264005939897344, 1.3176578878188556}, 
            0.0476761431967728], 
           InsetBox["\<\"Fold[Permute,{a,b},{{12},{2,1}}]\"\>", 
            Offset[{0, -2}, {3.4264005939897344, 1.269981744622083}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.244891067133515, 2.8407724680176836}, 
            0.0476761431967728], 
           InsetBox["\<\"Fold[Permute,{a,b},{{1,},{2,1}}]\"\>", 
            Offset[{0, -2}, {2.244891067133515, 2.793096324820911}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{3.229745131857085, 2.327064962923755}, 
            0.0476761431967728], 
           InsetBox["\<\"Fold[Permute,{a,b},{{1,2,{2,1}}]\"\>", 
            Offset[{0, -2}, {3.229745131857085, 2.2793888197269823}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.7284280652527286, 0.8825864195719899}, 
            0.0476761431967728], 
           InsetBox["\<\"Fold[Permute,{a,b},{{1,2}{2,1}}]\"\>", 
            Offset[{0, -2}, {2.7284280652527286, 0.8349102763752171}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{3.3340641806235354, 3.7722277343174353}, 
            0.0476761431967728], 
           InsetBox["\<\"Fold[Permute,{a,b},{{1,2},2,1}}]\"\>", 
            Offset[{0, -2}, {3.3340641806235354, 3.7245515911206626}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.639570982637411, 1.9604839286495368}, 
            0.0476761431967728], 
           InsetBox["\<\"Fold[Permute,{a,b},{{1,2},{,1}}]\"\>", 
            Offset[{0, -2}, {2.639570982637411, 1.912807785452764}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.8755518665571802, 2.7327530762455052}, 
            0.0476761431967728], 
           InsetBox["\<\"Fold[Permute,{a,b},{{1,2},{21}}]\"\>", 
            Offset[{0, -2}, {0.8755518665571802, 2.6850769330487325}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.9130360049133266, 2.6565778148350296}, 
            0.0476761431967728], 
           InsetBox["\<\"Fold[Permute,{a,b},{{1,2},{2,}}]\"\>", 
            Offset[{0, -2}, {2.9130360049133266, 2.608901671638257}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.9208011090630204, 0.9164508872280792}, 
            0.0476761431967728], 
           InsetBox["\<\"Fold[Permute,{a,b},{{1,2},{2,1}]\"\>", 
            Offset[{0, -2}, {1.9208011090630204, 0.8687747440313064}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.0318316079371295, 1.791589888443387}, 
            0.0476761431967728], 
           InsetBox["\<\"Fold[Permute,{a,b},{{1,2},{2,1}}\"\>", 
            Offset[{0, -2}, {2.0318316079371295, 1.7439137452466142}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{5.363936767709726, 2.174305431977584}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "F",
              StyleBox["[",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "oldPermute,{a,b},{{1,2},{2,1}}]"
             }],ExpressionUUID->"db636c9a-b138-49fa-a0a1-670f01935444"],
             TextCell[
              Row[{"F", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "oldPermute,{a,b},{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {5.363936767709726, 2.126629288780811}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{5.360384966091607, 2.795425278584819}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fo",
              StyleBox["[",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "ldPermute,{a,b},{{1,2},{2,1}}]"
             }],ExpressionUUID->"10b5e94e-770c-45c8-a0a9-b27061b456ba"],
             TextCell[
              Row[{"Fo", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "ldPermute,{a,b},{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {5.360384966091607, 2.7477491353880463}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{5.562056309639392, 1.8867881623033609}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fol",
              StyleBox["[",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "dPermute,{a,b},{{1,2},{2,1}}]"
             }],ExpressionUUID->"a45ecf07-7027-4b6e-a5ac-ee7776b4f223"],
             TextCell[
              Row[{"Fol", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "dPermute,{a,b},{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {5.562056309639392, 1.8391120191065882}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{5.845783969481121, 2.483822899042}, 0.0476761431967728], 
           InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold",
              StyleBox["[",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "Permute,{a,b},{{1,2},{2,1}}]"
             }],ExpressionUUID->"c9117ffb-e229-4867-b15f-eafd3e037654"],
             TextCell[
              Row[{"Fold", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {5.845783969481121, 2.436146755845227}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{5.738945571258128, 2.1609588941139792}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "FoldP",
              StyleBox["[",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "ermute,{a,b},{{1,2},{2,1}}]"
             }],ExpressionUUID->"842be2d7-987c-44b4-bd4f-7eb1cb10b259"],
             TextCell[
              Row[{"FoldP", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "ermute,{a,b},{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {5.738945571258128, 2.1132827509172065}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{5.746176961533809, 2.8291465929783244}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "FoldPe",
              StyleBox["[",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "rmute,{a,b},{{1,2},{2,1}}]"
             }],ExpressionUUID->"3ae18248-1ac5-453b-a843-a6f947612d48"],
             TextCell[
              Row[{"FoldPe", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "rmute,{a,b},{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {5.746176961533809, 2.7814704497815517}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{5.175199185238807, 3.130213669358908}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "FoldPer",
              StyleBox["[",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "mute,{a,b},{{1,2},{2,1}}]"
             }],ExpressionUUID->"73c2f0c1-e1bb-4f9e-a77a-ca830a28f7dc"],
             TextCell[
              Row[{"FoldPer", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "mute,{a,b},{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {5.175199185238807, 3.0825375261621355}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{5.518412792803819, 3.0993925768733392}, 0.0476761431967728
            ], InsetBox[
            InterpretationBox[Cell[TextData[{
              "FoldPerm",
              StyleBox["[",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "ute,{a,b},{{1,2},{2,1}}]"
             }],ExpressionUUID->"53382e6a-cebb-4db4-b384-63a883e8b897"],
             TextCell[
              Row[{"FoldPerm", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "ute,{a,b},{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {5.518412792803819, 3.0517164336765665}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{5.561633019392158, 2.521566679471713}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "FoldPermu",
              StyleBox["[",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "te,{a,b},{{1,2},{2,1}}]"
             }],ExpressionUUID->"4945a94c-1af2-44f1-b3d9-9ee558f3c4c9"],
             TextCell[
              Row[{"FoldPermu", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "te,{a,b},{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {5.561633019392158, 2.4738905362749404}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{5.21093381312901, 1.834250450670415}, 0.0476761431967728],
            InsetBox[
            InterpretationBox[Cell[TextData[{
              "FoldPermut",
              StyleBox["[",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "e,{a,b},{{1,2},{2,1}}]"
             }],ExpressionUUID->"322da295-c7ee-42e5-a808-468666e5dbfe"],
             TextCell[
              Row[{"FoldPermut", 
                Style["[", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "e,{a,b},{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {5.21093381312901, 1.7865743074736422}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.43657174848899016, 2.1341525002447956}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[",
              StyleBox["{",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "Permute,a,b},{{1,2},{2,1}}]"
             }],ExpressionUUID->"ffaf23bb-4f85-4d8a-923d-771009f5b619"],
             TextCell[
              Row[{"Fold[", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,a,b},{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {0.43657174848899016, 2.086476357048023}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.4961660862869386, 1.835974444249926}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute,",
              StyleBox["{",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "a,b},{{1,2},{2,1}}]"
             }],ExpressionUUID->"a21bde68-5a66-434a-a3d2-b10c92222c17"],
             TextCell[
              Row[{"Fold[Permute,", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "a,b},{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {0.4961660862869386, 1.7882983010531532}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.0196680607533617, 4.290815660437276}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold",
              StyleBox["\[Placeholder]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "[Permute,{ab},{{1,2},{2,1}}]"
             }],ExpressionUUID->"e6810b23-e514-445e-8764-b10cdc02ca1c"],
             TextCell[
              Row[{"Fold", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "[Permute,{ab},{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {1.0196680607533617, 4.243139517240503}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.6439454456709566, 3.905011743860359}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[",
              StyleBox["\[Placeholder]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "Permute,{ab},{{1,2},{2,1}}]"
             }],ExpressionUUID->"af063fd0-0e95-4bfb-a8fe-dd59abdf90f4"],
             TextCell[
              Row[{"Fold[", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{ab},{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {0.6439454456709566, 3.8573356006635864}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.7477931572122098, 4.178716728582527}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute",
              StyleBox["\[Placeholder]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              ",{ab},{{1,2},{2,1}}]"
             }],ExpressionUUID->"5910aca2-5383-48e3-9b3e-be3828b07b40"],
             TextCell[
              Row[{"Fold[Permute", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{ab},{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {0.7477931572122098, 4.131040585385755}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.252344465422641, 3.1833120371210697}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute,{a,b",
              StyleBox["}",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              ",{{1,2},{2,1}}]"
             }],ExpressionUUID->"0a7e06aa-7440-43e7-871f-079985d2e9d3"],
             TextCell[
              Row[{"Fold[Permute,{a,b", 
                Style["}", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {1.252344465422641, 3.135635893924297}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.4855696890689045, 0.9112734372533251}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold",
              StyleBox["\[Placeholder]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "[Permute,{a,b}{{1,2},{2,1}}]"
             }],ExpressionUUID->"accb7115-cf7c-4e67-a7c8-1394da12813a"],
             TextCell[
              Row[{"Fold", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "[Permute,{a,b}{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {0.4855696890689045, 0.8635972940565523}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.7216780500914617, 0.7479372055896032}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[",
              StyleBox["\[Placeholder]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "Permute,{a,b}{{1,2},{2,1}}]"
             }],ExpressionUUID->"cdd64ad9-5b0d-4e40-89e3-a74cc5fc713c"],
             TextCell[
              Row[{"Fold[", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b}{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {0.7216780500914617, 0.7002610623928304}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.360537576318678, 1.166659373305161}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute",
              StyleBox["\[Placeholder]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              ",{a,b}{{1,2},{2,1}}]"
             }],ExpressionUUID->"ccd94604-01b4-4dd7-9376-2d70a1d211b3"],
             TextCell[
              Row[{"Fold[Permute", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{a,b}{{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {0.360537576318678, 1.1189832301083882}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.8421527425748712, 5.113680959894557}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[",
              StyleBox["{",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "Permute,{a,b},{1,2},{2,1}}]"
             }],ExpressionUUID->"ee2148d2-4e82-4b57-b394-414b8107b133"],
             TextCell[
              Row[{"Fold[", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {1.8421527425748712, 5.0660048166977845}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.6789624796954938, 4.889109700441505}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute,",
              StyleBox["{",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "{a,b},{1,2},{2,1}}]"
             }],ExpressionUUID->"205b61cd-98b4-4de1-ac49-5b559b393763"],
             TextCell[
              Row[{"Fold[Permute,", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "{a,b},{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {1.6789624796954938, 4.8414335572447325}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.119889397279932, 5.218747226256809}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute,{",
              StyleBox["{",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "a,b},{1,2},{2,1}}]"
             }],ExpressionUUID->"bc934765-5bda-40a4-9403-4db2148bbb1e"],
             TextCell[
              Row[{"Fold[Permute,{", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "a,b},{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {2.119889397279932, 5.171071083060037}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.5151801368395574, 5.101163198709843}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute,{a,b},",
              StyleBox["{",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "{1,2},{2,1}}]"
             }],ExpressionUUID->"e8d30853-e277-4805-b6ef-40b11ef20f84"],
             TextCell[
              Row[{"Fold[Permute,{a,b},", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "{1,2},{2,1}}]"}]]], 
            Offset[{0, -2}, {2.5151801368395574, 5.05348705551307}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.269639264887045, 4.951207015616376}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute,{a,b},{",
              StyleBox["{",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "1,2},{2,1}}]"
             }],ExpressionUUID->"1c34e2e9-bb5f-48b8-b301-b840bb5d605d"],
             TextCell[
              Row[{"Fold[Permute,{a,b},{", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], "1,2},{2,1}}]"}]]],
             Offset[{0, -2}, {2.269639264887045, 4.903530872419603}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{3.694984474220088, 0.6101342356186981}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold",
              StyleBox["\[Placeholder]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "[Permute,{a,b},{{12},{2,1}}]"
             }],ExpressionUUID->"b046fc91-23c9-4636-a01a-945cae56c05f"],
             TextCell[
              Row[{"Fold", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "[Permute,{a,b},{{12},{2,1}}]"}]]], 
            Offset[{0, -2}, {3.694984474220088, 0.5624580924219252}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{3.987280223336482, 0.651512180621409}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[",
              StyleBox["\[Placeholder]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "Permute,{a,b},{{12},{2,1}}]"
             }],ExpressionUUID->"8a644741-fe2e-4319-8e6e-8f6988c4d836"],
             TextCell[
              Row[{"Fold[", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{{12},{2,1}}]"}]]], 
            Offset[{0, -2}, {3.987280223336482, 0.6038360374246362}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{4.086371301607729, 0.9556405140829813}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute",
              StyleBox["\[Placeholder]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              ",{a,b},{{12},{2,1}}]"
             }],ExpressionUUID->"5966a1f4-761e-4fa5-91ea-27bf758c30ef"],
             TextCell[
              Row[{"Fold[Permute", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{a,b},{{12},{2,1}}]"}]]], 
            Offset[{0, -2}, {4.086371301607729, 0.9079643708862085}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{3.8021337393505377, 2.27646695926385}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute,{a,b},{{1,2",
              StyleBox["}",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              ",{2,1}}]"
             }],ExpressionUUID->"6e30445c-d45c-4ab3-8560-e41ce25af03a"],
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2", 
                Style["}", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], ",{2,1}}]"}]]], 
            Offset[{0, -2}, {3.8021337393505377, 2.228790816067077}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.882538346403023, 0.}, 0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold",
              StyleBox["\[Placeholder]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "[Permute,{a,b},{{1,2}{2,1}}]"
             }],ExpressionUUID->"45ccc944-c945-4d45-9c29-d0ce9efe38c1"],
             TextCell[
              Row[{"Fold", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "[Permute,{a,b},{{1,2}{2,1}}]"}]]], 
            Offset[{0, -2}, {2.882538346403023, -0.0476761431967728}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{3.1249128692498105, 0.1584234340380184}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[",
              StyleBox["\[Placeholder]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "Permute,{a,b},{{1,2}{2,1}}]"
             }],ExpressionUUID->"21ab5844-0930-4f1a-9fb6-8c1c06c1b5e3"],
             TextCell[
              Row[{"Fold[", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{{1,2}{2,1}}]"}]]], 
            Offset[{0, -2}, {3.1249128692498105, 0.1107472908412456}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.606577853028568, 0.08241122946755297}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute",
              StyleBox["\[Placeholder]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              ",{a,b},{{1,2}{2,1}}]"
             }],ExpressionUUID->"0a19fa4e-5b6c-4547-bda2-21a875c7f4c7"],
             TextCell[
              Row[{"Fold[Permute", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{a,b},{{1,2}{2,1}}]"}]]], 
            Offset[{0, -2}, {2.606577853028568, 0.034735086270780174}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{3.9852023321312746, 4.117594974403625}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[",
              StyleBox["{",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "Permute,{a,b},{{1,2},2,1}}]"
             }],ExpressionUUID->"95f2a848-44b6-4212-88fd-95a4b25a8c8d"],
             TextCell[
              Row[{"Fold[", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{{1,2},2,1}}]"}]]], 
            Offset[{0, -2}, {3.9852023321312746, 4.069918831206852}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{3.6580940173848457, 4.580529353035235}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute,{a,b},{{1,2},",
              StyleBox["{",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "2,1}}]"
             }],ExpressionUUID->"842d62a7-c6a8-40a1-9e3a-9176dcb6c453"],
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2},", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], "2,1}}]"}]]], 
            Offset[{0, -2}, {3.6580940173848457, 4.532853209838462}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{3.8784730047973373, 4.390074972338862}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute,{a,b},{{1,2},2,",
              StyleBox["{",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "1}}]"
             }],ExpressionUUID->"4027fbe0-1045-4a6a-badd-1eed9cadafeb"],
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2},2,", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], "1}}]"}]]], 
            Offset[{0, -2}, {3.8784730047973373, 4.342398829142089}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{3.3947812848702235, 4.451355659915195}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute,{a,b},{{1,2},2,1",
              StyleBox["{",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "}}]"
             }],ExpressionUUID->"e124ea68-cb4e-41d5-8eb0-1b64669139bb"],
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2},2,1", 
                Style["{", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], "}}]"}]]], 
            Offset[{0, -2}, {3.3947812848702235, 4.403679516718422}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{0., 2.90126556969364}, 0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold",
              StyleBox["\[Placeholder]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "[Permute,{a,b},{{1,2},{21}}]"
             }],ExpressionUUID->"2637ce19-ff45-4d51-b4f1-9667c6bceed1"],
             TextCell[
              Row[{"Fold", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "[Permute,{a,b},{{1,2},{21}}]"}]]], 
            Offset[{0, -2}, {0., 2.853589426496867}], ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.02456980640031503, 2.6077572528034962}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[",
              StyleBox["\[Placeholder]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "Permute,{a,b},{{1,2},{21}}]"
             }],ExpressionUUID->"1974b03f-6c52-44d4-9d17-9b98df66a48a"],
             TextCell[
              Row[{"Fold[", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                "Permute,{a,b},{{1,2},{21}}]"}]]], 
            Offset[{0, -2}, {0.02456980640031503, 2.5600811096067235}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.15845861616227097, 3.1557491537583875}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute",
              StyleBox["\[Placeholder]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              ",{a,b},{{1,2},{21}}]"
             }],ExpressionUUID->"6f876092-959e-4531-831e-e2d3906bdc45"],
             TextCell[
              Row[{"Fold[Permute", 
                Style["\[Placeholder]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], 
                ",{a,b},{{1,2},{21}}]"}]]], 
            Offset[{0, -2}, {0.15845861616227097, 3.108073010561615}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.897402466399265, 0.09689691879723705}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute,{a,b},{{1,2},{",
              StyleBox["}",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "2,1}]"
             }],ExpressionUUID->"387a2084-6b48-4879-a864-43c7628110c8"],
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2},{", 
                Style["}", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], "2,1}]"}]]], 
            Offset[{0, -2}, {1.897402466399265, 0.049220775600464256}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.6139660707580201, 0.07712730153043612}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute,{a,b},{{1,2},{2,1",
              StyleBox["}",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "}]"
             }],ExpressionUUID->"307c82a7-5319-4b91-b9c4-deba295f8401"],
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2},{2,1", 
                Style["}", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], "}]"}]]], 
            Offset[{0, -2}, {1.6139660707580201, 0.029451158333663324}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.3907697217594115, 0.25839118998777977}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute,{a,b},{{1,2},{2,1}",
              StyleBox["}",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]],
              "]"
             }],ExpressionUUID->"199426de-0263-46c8-965b-ba9e60d158a8"],
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2},{2,1}", 
                Style["}", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], "]"}]]], 
            Offset[{0, -2}, {1.3907697217594115, 0.21071504679100697}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.6675022114545934, 1.3102590201428663}, 
            0.0476761431967728], InsetBox[
            InterpretationBox[Cell[TextData[{
              "Fold[Permute,{a,b},{{1,2},{2,1}}",
              StyleBox["]",
               StripOnInput->False,
               LineColor->RGBColor[1, 0, 0],
               FrontFaceColor->RGBColor[1, 0, 0],
               BackFaceColor->RGBColor[1, 0, 0],
               GraphicsColor->RGBColor[1, 0, 0],
               FontSize->20,
               FontWeight->Bold,
               FontColor->RGBColor[1, 0, 0]]
             }],ExpressionUUID->"b5353b25-b68f-4f78-b9c6-1f152514d166"],
             TextCell[
              Row[{"Fold[Permute,{a,b},{{1,2},{2,1}}", 
                Style["]", 
                 RGBColor[1, 0, 0], FontSize -> 20, Bold], ""}]]], 
            Offset[{0, -2}, {1.6675022114545934, 1.2625828769460936}], 
            ImageScaled[{0.5, 1}],
            BaseStyle->"Graphics"]}}}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->{562.9999999999932, Automatic}]], "Output",
 CellChangeTimes->{
  3.708185544927271*^9, 3.708185606991217*^9, {3.7081856380736785`*^9, 
   3.7081856581568975`*^9}, 3.7081856934228697`*^9, 3.7081858035538406`*^9, 
   3.7081858643248854`*^9},ExpressionUUID->"e6d1029c-f8d1-4b4b-b82f-\
e641d4df2840"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell["Data Sources Links/References", "TemplateSubsection",
 CellChangeTimes->{{3.708096132224304*^9, 3.708096148950604*^9}, {
  3.708113189015132*^9, 3.70811318984517*^9}},
 CellTags->
  "DataSources",ExpressionUUID->"595aec4a-a293-426a-b50c-4acce4123cb2"],

Cell[CellGroupData[{

Cell["Future Directions", "TemplateSubsection",
 CellChangeTimes->{{3.549548005988791*^9, 3.5495480110025587`*^9}, {
   3.707836737195241*^9, 3.707836742473217*^9}, 3.707836774328553*^9},
 CellTags->
  "FutureDirections",ExpressionUUID->"e5647c6a-cb6b-4235-8887-8cfbb24ef769"],

Cell["\<\
1) Complete the neural net.
2) Introduce the new features in algorithm.
3) Improve algorithm by adding a possibility to add in string 2 or more \
additional characters.\
\>", "Text",
 CellChangeTimes->{{3.70821000224592*^9, 3.708210005823454*^9}, {
  3.708210047529936*^9, 
  3.70821009982898*^9}},ExpressionUUID->"ff3e8539-84b7-4eed-aa18-\
66436326f47f"]
}, Open  ]],

Cell["Background Info Links/References", "TemplateSubsection",
 CellChangeTimes->{{3.549542073628705*^9, 3.5495420746677647`*^9}, {
  3.549570366165662*^9, 3.549570367234921*^9}, {3.708096156222343*^9, 
  3.7080961599500628`*^9}},
 CellTags->
  "References",ExpressionUUID->"f66f7ca2-dcb9-4c06-9d0a-f2cc48d9fd79"],

Cell[CellGroupData[{

Cell["Keywords", "TemplateSubsection",
 CellChangeTimes->{{3.549624602331629*^9, 3.549624604729114*^9}},
 CellTags->"Keywords",ExpressionUUID->"0a9d4fd1-d336-4f32-b85d-12e6f9eed8ed"],

Cell["Provide keywords as items", "TemplateComment",
 CellChangeTimes->{{3.70811356171093*^9, 3.7081135645971746`*^9}, {
  3.7081136127408867`*^9, 
  3.708113615106327*^9}},ExpressionUUID->"98efa464-d671-4dc2-97d9-\
29e7a0668393"],

Cell[CellGroupData[{

Cell["Syntax correction", "Item",
 CellChangeTimes->{{3.708096350583043*^9, 3.7080963544862823`*^9}, {
  3.708113540381196*^9, 3.708113546129714*^9}, {3.7082037060737734`*^9, 
  3.7082037137613544`*^9}},ExpressionUUID->"3b9a0db3-df49-4532-b956-\
8ec2c42dd8bf"],

Cell["Text analysing", "Item",
 CellChangeTimes->{{3.708096350583043*^9, 3.7080963563232718`*^9}, {
  3.7082037310584188`*^9, 
  3.708203734589707*^9}},ExpressionUUID->"acccdba7-4cc8-463f-9532-\
578badae9914"],

Cell["Neural Net", "Item",
 CellChangeTimes->{{3.708096350583043*^9, 3.7080963563232718`*^9}, {
  3.7082037310584188`*^9, 
  3.708203741308524*^9}},ExpressionUUID->"74f733e8-4577-47b0-afa3-\
c5a136fde8d0"],

Cell["Prediction of sentence", "Item",
 CellChangeTimes->{{3.708096350583043*^9, 3.7080963563232718`*^9}, {
  3.7082037310584188`*^9, 
  3.708203762511875*^9}},ExpressionUUID->"9a19c06d-fbfb-4c05-be40-\
61d5a8ae7277"]
}, Open  ]]
}, Open  ]],

Cell["Other", "TemplateSubsection",
 CellChangeTimes->{{3.54962463070057*^9, 
  3.549624631259623*^9}},ExpressionUUID->"7829dc32-1c2b-44a2-9c28-\
0b354f138b29"],

Cell[CellGroupData[{

Cell["Date", "TemplateSubsection",
 CellChangeTimes->{{3.708096048771126*^9, 
  3.7080960493214417`*^9}},ExpressionUUID->"1cd568fb-8340-49f7-8b1e-\
208734b6bb99"],

Cell[TextData[{
 StyleBox["Last Modified: ",
  FontSize->Medium],
 StyleBox["Tuesday, July 04, 2017",
  FontSize->Medium]
}], "LastModified",
 CellTags->
  "LastModifiedDate",ExpressionUUID->"1ccf0723-deb1-4503-82a8-8f25c3a2d0a7"],

Cell[BoxData[
 ButtonBox[
  StyleBox["\<\"Add Timestamp\"\>", "Text",
   StripOnInput->False,
   FontWeight->Plain],
  Appearance->Automatic,
  ButtonFunction:>
   With[{$CellContext`cells = Cells[CellTags -> "LastModifiedDate"]}, 
    (If[Length[$CellContext`cells] > 0, Map[NotebookDelete, 
       Most[$CellContext`cells]]; NotebookWrite[
       Last[$CellContext`cells], #, All], SelectionMove[
       EvaluationCell[], Before, Cell]; NotebookWrite[
       ButtonNotebook[], #, All]]& )[
     Cell[
      TextData[
       RowBox[{
         StyleBox["Last Modified: ", FontSize -> Medium], 
         StyleBox[
          
          DateString[{
           "DayName", ", ", "MonthName", " ", "Day", ", ", "Year"}], FontSize -> 
          Medium]}]], "LastModified", CellTags -> "LastModifiedDate"]]],
  Evaluator->Automatic,
  Method->"Preemptive"]], "Input",ExpressionUUID->"387919cf-8311-4ba3-bacd-\
ed733929beeb"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1536, 781},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"11.1 for Microsoft Windows (64-bit) (March 13, 2017)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell["Style Environment Names", "Section"], 
      Cell[
       BoxData[
        RowBox[{
          RowBox[{"$banner", "=", 
            GraphicsBox[
             TagBox[
              RasterBox[CompressedData["
1:eJzsvf2vNOlxHSYkv+TH/AuB78z0JPfOdPfMJXdJ7pKi9iMUyfXuUiKXWlkx
9RFKMiKJHwCXNhTJFPiRRIxFiw4sCZIohOIPMulATigLsORAokUikMXEdASu
A8OByURAEMpGAHvD35KZ6a4651RV98y7XJLvS75C62Juz9PPU3Xq1Kl6nr7v
8j/4wZ98+j/9d77jO77jXf/e4cfTb3vPd77znW9775v+/cMv3/sT7/qxt//E
j/zw637i3T/y9h955wM/+O8ebj56+P/vOAw9fl7vbu/C6z98icZMXy/7pvt4
N19fG7b3r6/ztf9mG/Birzle3bNOfYPwuduuS+J1P6bfXPzvX/evO72+vXl1
XoFn8bmXBPz+df+6f33rXN82W9qvsUJ9exe4b6vrW6gcf9tk9/3rsutbiNv3
r2/j65tXju9n0LfudXeUy4u5/XWj4t2Bw91ixv3rXrvub9buX3fJdREV7wvd
t9H1Ld9AvggHv+UxuUuu+zjfv+6a6y6uet/yDeSLcPCbgMldzJA7ue5Mdb/l
uXdn17cIB76dr/tdx/3rm32dk5G7SXW/vfMlRuquReOuNezFWHg38f/+df+a
vu6OhvBcvty14jBv2Is0+65Vj/OGfR3pdBGYdy10969vi+vukNNvynXXpt68
YXet2ffidR/Mu/R6yXXp21jo7l/3r/vX/ev+df/62i7a0u6PP/uZwfvGhw1X
r7/ubhuap8kz9LTQ4SfG7MPIRi1p8rfnr7PuFEs3x1/tzsE88SIaqU7RsP5W
gdqvi1/lfvToNINNso+P9PpUnwzr6YN924T5+4lHAv6zADY07URQknfOgTQz
g3ZZiH3C8JQC3gecGS4hc/p2jir0YMXe2QGT8wsm+5AF0YB+WCvkY4lq9Wud
X/tIjIl1L74KtIUzF82GlCQDalQbHuk3OSPCbFNX+W1gb580EE/tJfViHGfE
hJJ9Jvr1bEVaTflFVu3ThKMlDXtq2DbiO6Zlpp2XlypqTflskOg+/Vrk13zG
7Q2oO3mwT7b1mZBJ5GfrqX8g0jKXclwmvu1DsVNC9lMTkoUU38lI9UNp24cU
S0/tWU/iVL0TbwL8acScsWfsPIP22bj4nFxH9k1ablK+evU6MDabFNJ8Unmo
MxEVFV2lKkZmTCZgfFaDO5UmJaq06HTz5r5EG6bpRDdLS/Zphn2c5IwX0ulx
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
8bkXMfmaLrHtTv2dKCgZzxqBerk7Vphy8s3st7LWJV68tEw7v+LXfnHJu0MY
z5Skb4DxUyt+7VbND7tskpdYdmxn941G9U6hm39w9SJUbtNxx/v1Q+BFzdzS
z4tnmNeic/a8GAynFr3rr68h3JSAmwvdn8pZvX/ngnlHm9B5KF4cIN9E3fh6
Xuc09lykLoLlXGJeju1Un3PnujHpOE3Vzi7x9d01XODg12bAbFpdaM83Iimk
bHlH9+J8nw/o9P0Xe852yXJTC70Ip+7Utjtsw14Cwr8kNI6TfOPr8jdgxXuy
2bijUN7B4NU4vi3YeGpuFxv7fPqw2LRj07sdfx0HHNvgseFcbLvPfeqJL3z6
qS/8zvH6wWdfwSsexj/0mt3xq9OA3/6V7/Yu2tf67V95nQ+Qx23pp5542e9/
/A3/+vPPfPVPv4+vf/4P3/Th//y1i63Wo017unN88PDtYNXhOnw+OQjHfdj4
+XQdH/n0U+NlVsn1aZ9txORgcxypT/3yhx556omXM2hlIzcujaceXUy3i0fQ
zM7Pfeovjl5viw7zqTe+nE368E+/doiLLZ3P8A9Ttb/2sd/4yp//+f+n/3e4
81uf/NQim7TpDt8+//w/MxhbQLppsWmyYcfou6knyw83D1996ctfdk4uThez
dHjkIx/96GDM8WT4OA/4/O7nnhu++rkPfNDIIAiPeJ4+H9ZyY5QMozHz/3dY
a0mzHWCZGnlY6Hd+93effstbQYBNhw+Rja3beZjzhRdeyCE4IGCA8CRg1GFA
jt1hqoMZx9N4h+I0+ADjGLsNbkYunX5SiFt8S/rwvg98cEA1/N8ffuYzTz/z
VnU8p8ARgYPLX/lKYfnh/uk9AokVlm7f/Z5j3A9jRo3aitn009Rs05oBI1FJ
FsbBq7Z/5PGXv+lNr9w9uAP9mJA8+cn+9oH900+/4vHXPbDuaFFeXfiMOb/3
e17xl7//ofaBXZxT4sv/iKYVCrFrOAcIy6ksCDJttNYMG5PrsrUiPsFZRmDD
a7W84rKKBQ2bWCvFghZK3sVY3GP43OOYiPELCListdC2xCYfsjW4Fkcmae2o
3BhiEiByMMC1UeSlKZqGSPCHyDBQi7B6mlBrHw3etJB9sdabtIAkhX5ATwRQ
YhdoQI5TEaequmBsI7f5p1wBTyJkKywNSCJNuBFFFbD4EgeAp0Z84yglwoin
g3eoyNrCBdpUWcwAAj3BhNBLWIEJ4AC3WGRAhRvqXQhrm6zKiTwnWQvODuAW
+NaySgiX2GCqwgVDUo4sRhpziBERpzG6FE3SBTMqS0TOzSgynjuB1e1C1i0F
uRUciotT0ibRvPB2l7q1SrcLA06uiWhnjZVVXGcGxVugZRL0WKvHB5kMEr5W
9w5aBDfBWoJi0ybc1MGNkU3Z6OFbhBWFgSEFrDCJwpgOcDmOQk33T/YsuOIM
z3o0Ib9jcLUOhvDxfVWPisPBmMVWw10QW1JJFWm0jZKCwrFRCznom5hladtY
lT/Y2U5tflO5yUFvq9Ro6cIjCyF/SEDbhBb5riaN3G5NXsK6oXaYd4iyFp2U
C5kMC1ehWOs7cdDWot5MeCJ7paSKRaUOrUJZpmNFoKIptV5pJicYJeCcPoFF
7Sg+iecLgBw6gU6UCpiwwqc4EnoL4lvNYUpzZxG22Btt1Rw09j2oJSFjJbiN
j8uDOZ1TlPFrbiE88SlMIstgDopLEFuqvFZWCo6hq5fCR2ISwu1YccsXmg3p
bQiKTSK2nFblDHKKdlguYtWCmQFtUuBFiO/WWgKeFhZyRWP9bMVHP/GQ1YWQ
C8FWldmQ4QhSarQJhy5vQKJ4avrknief2SbeMsitZZwWQUsoIp5rHYmPT7Jh
bUkaGwWNgqLHjItoYSn7UMsFZ8QG96UBoPPwmJjVCa1mASedeOG4LbyWIXAt
bBYpC8fUrQn42M8sNkSP0zxf+J2n/Ez+Ex95nFc5DHvH2x/yb//1559ZkFac
Kmb7z//hm3zAU298GSn88ecvf+iRcOyf3wL84LMPOk+oBW0PxsCwv/m4yAsp
Bo4sth0/MnMdho01a9O94+2vuuSR3//4Gx56zQ6V7uT7wlTlMA/jMPgl4fAQ
nKxlzA/X2559xXLTSc5au/5LCuAJh7wFo5TZtH/4mc/4ifG73/Pcu5977+Hn
4fNwNvulL3/5dIwsOXu4/8XjGXJLVbjlIjUQfjxyZ8U4Md+P3J9+y1ttEpuB
e+lN9yef//x4Av+e55zJww7Fz/8PYxa+RdoQIJbRh1WGkXb+L/3VYMzwF+xT
13igbd4N5/8H3MKwgyV+FH88t7dY27ZOzqsXdhZ9+DmE4AD46a/onzs4+3Mf
+OAhBMMbgYOF43m4ITw8+/AjjzmShxkOjxzD957jvyDw2P3wj/64o3qYYTj/
/+IxKOMkVCtbz/fDBw8xy46HZjB4WPd9x3XfO6w7vBE4mD24v3A9QV07fn74
0cd85MHNo+UH1j333PGNwAnAg/3DP39glAZL/Px/QbR34we0XV3dLy8QC69H
JxifecsrP/t3n/xXf4K3jV/6R29+/1975D/a71BhveJsuqbrPvDXHv0Xf/C9
Pv7f/JO3fv5/ePrZZ15lmumX5Puw7isevn3hnx6fesMbH/Q5h6T4wF995P/8
7Fsuud76lldKCaP5pZvVjnThzTk1cm7q2NRxzfJcm1uL8AlUkdadDkzQujgD
8dml4MxaY+nnEwZnr6tEEQvZpN8j+NzLmEjjSv1kK0+NykDDDAGYtOF+u/VH
cFpl41nuFnhcfYkj2Z2xt1z6vnvQFjSBJsIbUhhq7UbM/RE/VcaKZPmWj9ra
JRSs5XD4VsJbqWURNbNHGx7rdqx1BJfMa+0AqSG0Lmvjv47gi2tmmHeMC/SN
zgqjH6/CGeGw4ChyPGNZWCAWhOGCjLeq6rO13m2CQog+IWmZYv2D04bQ2/ii
Ixoe+jSzc7Ljdb1j8WRxB411tqfwJmFj9tN9KqBCb7DFrBV+0tIL6+qZlgYF
jMTWwFUltq+w0+8MKOHOFvgsNxQO8NbkgnOZW9Nty6xbRuhsZwEOGMOxOyDA
PXFox+FpuHTGUmO81LhoxHlH1nqwGBCx1kPpPOFWHPKCBsx+9a67NWniHOkE
T7PWsmOckPLXKoKrscHOZ1b+uPOclJCPDoxUzGeUIU4397rVYNEphFYWLpHo
TlFKqF6Q0mrIzHG44Jx3YAlGtsEfF6mxwupBJwWWE0LSFi9w7ubCCWmG+S4b
9ZQpZxyW9xFSpEj9thQ4el278FgH2d8wdOKID3DiubAYZyjEQBJqQIHgDPKT
ijF2ODbxtUzDnc/s5minxtHKMUjICavdSGuNSgetCGnrp0BciL3QeBJZgOhI
08tly+qkxbpD9m1DUFwVJXNdFhb21FI4wAtZQ7UlArMLiAuriqu305g7Rqop
6C07Sz0WH1JOW53gBQJcNDlfqJZpFrPcAXxmfucZ4e20tUMiL6onEENSldBl
GciEDAqB1zjmP4VS3encEdT3DZFnaw1AEPkt2RnoJO2EdxEuRFT0oS1etiAy
tB3zwHEbw3LUql+dx2LBcIkCBEZRLR5X50xxL7wl4MbVLE/Rpx6mBVW2ShhE
TVzT9DER09rkY9h9H7MgVBccMqoFQNLx2agueaUQceNwe3PIqkuVkUXGeO4X
pxJKfyQVVzGVjg1skEpnSW0nNlKAWA2sAtK2YssR57Nx0iuDK+71Ag6cXJ7s
EnHQBmgjFl4+iGBUiL3l1sLnCtCy6mLz6wUF6HkdYQNGRfVwL0iZF97obqz1
ku2AbtVJ1RkuPm8RZ3UJR953Wy6VfGb++x9/Azq69O3ppPpBqm7Hi98O+BLD
JIfZLjlaPzx4fAWgzx4slPP/44m97t+9+aQA3cH5vy134fn/cKS/QLOH9Dkg
+eQbX5bHH25ClkWlu3D+/3sff8OYbpSYg2vhtcJguVU6ElhL3vd94IN+yO/g
DIMffuTx3/nd3z18+2sf+w17dvyJ83/KmgU5ONzxPzWnmnhc4nBzOKA+neLS
s9poPfzIY4Ntw/l/QPLd73nvcFB8+Pnwo48hMbewc+D5cFx/GOnGoBxsxvN/
sh+1Kfa3OuHBAEuolg37hV/86HBuf3pn0S40QCxiw1fDv3E4huCRx6WIbNqD
X8NJ+/uO/8aBuHEa4/+o4eln3uoTOs6HqB2+PUQQJcBA++LwjzKoYV7oRbGD
177uYNLx5cKP/ZhXAY+Ou3+wmdTJh7WHsA6W/8nnP3/4HFT38GFg3WGS4fWQ
V8Bhfvz9v0uleSdQB6oPbt5gN9G03d98/2P/7/86kbz/4/e88tW3Iw1MGPcP
7v7x33tqKt//9n/xOCsS568b9jfe9+gw+PVvfJDvH3F732Nf/dNnL7n+k+9/
FdNyoZxh/suhFsvFFmgz8ymFcTiMJjmtFfCh6mZdCtNeHklW0e7mwrVCoCHs
toXMsVjea/jc05jAF424rssgoFKwYrCsjTqcVMut0g/c14lEuFOiYAAZOyBN
rm5JBrNVWX8IVQ0K/9yGD97XdeqLCWw4WEOwrP9027atoucbilo62AUZIAh4
7KylpGMKTgSjru7L4iQhfPE+0wNf2fbH4YqQTpQ2GebHbka5giGoKV2w1us4
fYWdQuakGexh5UVpmL7gwKkmb043LZILIeDtmM9WZIcmPgFORz30VLfcSoIz
5YICkEYRklu6YxtYNtidtUODlsWKd7WZeBpK3u0SJ4nnrjDYaeJ0oo2Zrjgs
6LxioVHmkxZ2trrPghNwlizwmbF7lY1np1pB2Z36Wzqa6Agf2hJu6LDCj2iw
GWf50qjxcQQN0M9xp6wTuo+mYAg37xo6IbMWsqQVkmJ8cYAkI8JN0Q0UAo2a
n2Y4uzR3yMgxj7aR8xO2eTcLr3PSUSqJI0iKNCDs1PzIncRQrFpKY2MNwNad
iuuOi6LEd2ESzEOMXQglqM/Ziql+bgMERHj93InUdSuSlbSlXW5YDJHpkqd2
0Eeq2xGYY+Hz5A2bfT31sqK87dgqGOO4eYvoZTQ5LnGM8Ao4crIqnI+nEyGn
7FvaUwtVzDvp7oxpW3Jft0LCSct3+sxc7cj9qCfqOMkgnfzIUYBYTnkqhbJo
ThYJn9x/LoRjwq5FWlo6UrZWjTcEOCVZz8WvYICUv6hdxaV60ilKhomFSUkb
2O48z98CZICvKeA3eV+zgD1R1bXDb3Wwi1WEy0eKF9SrLKPBJh3Z2uSdRlPW
opyq1NUdoQ5NHEmNKJ9UEw0cND5zbllU5afptuTIFo8XbmodX5pfvkNZpJHB
7MJHjQVbsuDxJIksAqzbCx3JQuEjeaEQTUeSe5ulEYmojs8BjRDcsazIll+o
KKuTigZ4w8ZB8deMiElRjJy/ph78mXe+2o+8vvDpp8IShzt8JvZLH3pkeYPH
3/bsg/wsZr5pf5am9VPuD//0a9/x9ld94iOP/9ln35yO1k8r3mxt6e0nPvIY
n3uTzdtl9GI7XHz+f7Dn8Gt1PXaw4ejmyRE+/z9YxSN/L/1ni47/+R0Hh3Dw
f+bA4w83lymywyMB1dM/rBC/hl+fSq8VBhzKOA4fhj+wH/8Ov1q6OMS2Pw6v
Uoaum5ZfExhpj/F6/vl/drj/pS9/+Stf+XP6yj4YUL/wix8d/sLczv/Hx4fL
z4EPPw8jS++GD4dVDmsdVnyejHHQvvj886fz/y1bwld2zc7/nwvL+c/hrcrx
HyZckHfDYfjxJHwctg1i+BH1bvg5HJIflpClb3iG7WjhDVYfQHs+BqUoXiF2
fuGF0SOPTVFrGPPCCy88/MijIbhs+YIwx4eTtQPCiTwS9xDHhSBQBGVJB0eH
VZ77ydcMOfIvP/Pmn/rxV7/y1be7B3c/8Owr/9hO+P/RJ59ct7Lt+sTfev3w
1f/86ad/8AdedRj/2kde9t53fKf/84Ef+oGHpjhzINj7/+p3eWK+4Y0PhAHf
95ZXfvhnHz1ef/1wPWbXo+PNn330c//dwbBnv/KP3/qa174sp14g8OBjGZ18
M83GwrKtntrmx8s5k5GIMh65KUa+iLWW+sjAhDznvYXPPY3JUuefsRafbwoz
yvFcC5Zp3VLW2NQqgyYwmTY+DJ6ZLXp0E2ZGGzPleMZ/GSeJM2T79drmaRnM
pQN1IwPKzzNUmZj/IniX0Uj7Fb5v52CfMCCnWBm+WcNQWGeiPw4wVnu4M2Or
NjWuOLfErCNTNJiBKz0VmTmjYO4sRypieyM2T4I8nZhTLi9ofrqznQdn6uZE
EsVgnQN2pmRsFYStp5uzoqbTuVBOqdxyQuRrcG7CmG25UOXXkCMT+XvxlTu6
RYxshHoKh/m4l88GS8qIL6f8uklQ0685MTFt0R0F3YsljIK1zfU3PFK4djZG
F1Tk+W9ZQ+ZTJqIRICVfsvDGCVVklgLUubXUsNKRyscRw6mAJjdVl25ikxYs
lA+pLk8FhROnplnSliieZtgi52MCSu7PtrLzMNIkJaULvSIbikao3nKSgi0n
IA3RryXlJhIjhzvHNEOdHClpA3hTj5RXZIMnLVykB7HWCEsh5mReURqYA1nx
eImQmDlllgM5b1pO/3HAVCJMnAZM3Qlh4p6BoZiNRaU2le/x2XPX0h2/Ecur
GaQElMk4Dqt2EGlClJ6lArLIT93E4rVUyoWQhSVm0FgmDLOwzKjByZi56sPT
Op0iJwMg56aaC+5NGjmzyZpooXMjVHWGWRy2AxSUzlvlwxafPaDHD0d5DIfM
FLvjh3yGb7Mdv+V3B8ejaYvIQ6/e8Un44fPbvu/B0PP8nv7rgNPjZvOJmeHv
/+EUmXd0AajmRwycwbAM5s2Wz//tFcbW2XVwhP8CfxxwE1vBz33qiWHA4YOP
H/4TQGaArB7O/w/XAUmOy2DGb//K66rz/0BXmXz4w/gJtsCvcH88m73x1XmM
PYXzfwrBCYfnn3/+i88//2sf+9hhwA//6I/J5OT7F0//TOC3PvlJO//fjuE7
xX04Bz78PIw5GbPlJFoaLIf5hxcE+A/aaE4N5/9GeFQ0N2bJSXEa4Of/TCct
DdvhHyY4880pgOMpFlBiDJf+oF+nhYb/otHpgP0xmtCDu10SK4wnx18H0Aa4
0qGTM/+4rr7iGSw5fjv4dYzaDVlr5tmw8ZD/EDsVFrb8USVMlKwhLv5mZwB/
Kef/4+OoBcdgbY0nW+9aSVqHPzfabvb9l//ozcPh/6tfux8Ou4agrNruD3/r
ySF9/rO3v3r8atM++eQDw83P//dPb1++I7O3b3zigX/zT956+Opf/MH3Ht8y
3Gw9Im/7Sw8995Ov+eX/8j/m/2RQef4/zLayNw7hr6//4pMP/j//y+HBZ3/k
Lz9sLN1Kbt5sBagb8Nl5y3Tyujw/D4ClBMGYsSfZBi9SaY4nHt7F6efW6Hfx
WpIvwjQXfMoOWHjv4HMPY5J2BKSE8VzIJ7du4cZkxx1nySpK82k5aT7FttDV
q1WCp8sg63laS91h0MS1E1zuL6QY4hy7xBu/nwrrDa9OwcUdbtuCzdtwc7nR
B0tUwZnkOOO2YRCYewF5YfhS4A2OcLJQ0bwJxmyXgRibYCH7rpuU1NlKD1Dm
iAKr2wpay5FRqi/jyIC/tt8hHNoQRrrar4qn9UtOnuEOrZK2GMrSm+1SbgYO
e6fh36rZN1aJIrUAzpAa1JJtlwILi5WlUsg1Ih7JhdJmVBh1xIxZhptEDDLG
GUI9IXmqu2wScBSIZFu+kibr40WeJvWYmVn2PnHRG0ZelSdnZcjWRKHlTQu4
NjQ/QOBYIP2pQiVJuVFuhEy5IfUjB5fRndIvLgEYqdVEM0vHL0N8mefBVNcB
7c9xknCjdaf0d5xH7zCAG+p7Rf20oHiK2QxLRyOpjaSJZKiAo9slcGDpoN3w
bIwDb4tEY5cb3QoxVuILkerGBPBmG20IxnsHxUkdOE+/LrHiVsbwYEiZbZ2C
eUX1bOnbEGLNWSpbNBXpuWiymERposYQtqqH6TyEewx+kZ37jQ0UPmTE8sat
tWFCtqleV9XYMyVYWx5ERz5vBdtSH0helg4dPjhcEzTgKDMCRrllzOLEZM5K
hDVBvQnIs1WsrkiK9GCidK2ZLn3jQXQ9TyEI6tqkSGqA4nGxIyNFYZIwbrDY
EwKkxEC3wC4nEajMtpP5bfzW57whcES65eTKZ4u1DKm0nQENjzMTQqRQiLfi
7E1ITPgCEQs2Z6nhfJlhaWKsY8jjo/JHNZC/UPJesU7/yAHN9ECDGNz01Kjw
qmOBig4Uf5UKOneJSYLc+C16zqAYJZklxKoAKI7HO1e+sULdZKFjwTkN3rR8
Vv/kG1/mJr3j7a8M589/9tnvJeVp+U/0f+adD48GbLYf/unv5KcO85BYIZH5
GPzPPvvmweUr+1b//v+x4fEr7AJYfNye6pWBKcaV2XCFFiKd/4fBm+3bvu8B
eT+i3cjh86te3fu3v/ShR/jQ/gQmwnFlJMnn/5/71BNR8W62B7SL838TzCux
ZFxiPP9He6DXZnvFamMw4vx/I75fkTELvCaQCQ8/v3g6/3/4kUeH/0BNXPQE
+NNveWb4Fuf/2jDbOfAnh6Pm0z9hcKr7WuNB9PCfEjosyu398MHO/ylzAZEU
ekuWLZkEcgatptcKQyiHEHANHcM3/Dk9p4mEQzg5UhGn6/LUyPYrTnmLxWAY
nf+zUnGPtx1S0uCC/hz44/8ig2IRWovR8kNwXzj9n9FjRGaw/DDP1Wbr+SVS
ZmaYqc+z/Qt770Pn//4UV38F2dy82rQDRd/54+OLyL/+nu/CtzdDjrTf/fqX
D9/+yn9l6XPT/q33j/Lytr/0Kvb0ahCfj373mMJPPgAm3LT/8jNvDin51fG/
//MAVFe0jovOmP4PvGr/v//BYZ5nP/yzj6a6CapTliExPeuv0MZsA23OzGNm
OD5jISiecuHa1oEAZ8we/syRunQtYd2VE3KQO87KjPM9gc89jgm1EKOGXPl4
0yirGoOpJwM2/BSJMABh8hv4ttzVDWnLjcMVpMZvikJiIbgTgKJOb9ST0cIr
yCk1aZg/FVmqNdKGxQFqw6Yly1EUSO1Dn8O9HDA0nPVBjil0JpJKyOwkSX2C
2sDFiERbUBVGabmkTOEHNyFYLRt2hUht1ZHMhxaKNNCjiFRoEiwfb8b0JN+p
bZCMZuhCJrZX7EJZxQy0Kw2BRVMXldgxaO2VoOHJThkhy7UjzzfJBW5OOOv9
J2Zgr7ekYEGRLPQcrJgFLWaIPUxremJqVjRC9jj9FKuEpe4Lez1aaDkbCCY5
aKJtHEjZdMUwOiwhQVydbrayHPKdsOVnudAIZzjHJcWuwjCKAmiDesf8zFIj
pQ35KAjog2JMsEF+xVQy2IXdNHljhW+jYGoUJOIRJQ39Jj1rlQvZ51mGZFQm
F+I8Jhd6AxeNkjMh+6KcipTJh5IDlJjhkXFPwVZtdLlCaoRvVxs0e743ESZs
WiAgXEIXYUm9laBLLdCu4Ka0R8UWqcQrhqIjTL4SS3hdTaigwJsiFsxMkR0V
k1ijORyZzFJQKogQNQnlFazVa8PdZlQkaatU9yhZMvEmkovvxEq6pejTtBYj
6fdOoF1RWK/gKfcYmj4bYpdmOk2uYsu7GI+pBItDpjXRPbpRG250gIwMcmrl
mOm6SaVz7G22pNXMXgI2KHCQX9IunDNwUQ4ddahB8C5EOcgmpwDNL20GRQe5
kOdnxQh6SGpzw6C1YrZlonvKuwxLT4UxkD8XR0SkFZsjXMxbsJqMUX1j0m7G
hk0YEmVTyTYwJ/IwyYtXfO8hk/44qlL+kHrS8SLEgn+lD1kZ6CIxpy7UacyS
Dr9aRYyMZ8Fh6bhx3da84FYEqUHWKkq+BfYNDrVSJHFSyJj5owFeiSqBCjJF
OgZZ85xlrQNtZFqagY+jj8f45q+fwPPfwNuZ9vFZ/7v30/1bv88THv/JgDEt
GHB4hM/QfurtrxxOEccjuKnzf+qprsY8Gif8TXrkN+0Rx4R+AjR+x2Hn/5Id
h0vP/8eNlQPLLzve9n0PHADE64APPjJEMzju+PAJ/6te3fMYf+/A4I/n/0Q8
cepmPP1+93ueo5cdkl/BkoGlw8HsVYDXqqE/4ue3drAzfnu4+aUvffnw6598
/vOnI2JJmWHa4V8HPP2WZ8Lf/zur/fx/+Av/w3jKR+TXYf7jf2rmxm2OxB4Q
SJh7xTQa0OqDSe8i0DyLffLx/J8q+ERatfQX9di5yLunYJj944Ljn9BjH6pp
vqG1NrjPh+o8M7dPg9ccYj+rH/5rUe97/wecTpQarfF8nGr8Xy54/wd4IbGc
M2ukvXQRw+CHHnnUc/zqhs7/C2lq4QJfwxLH/+TaCNfP/8z4H+Dav2KfU3i5
bYf/pM9n/s6TPvk//ftPH+78X//TM1QoAd0zb37FMOHfeN+jvPqnf/2Nn/27
T/r1v/3+94zn/294oFJXrjsjFOu+/aNPPfnVP332d37jCf+Tp0AhqDc1UR67
DIjzgVmN07Y0T8An3SS6bmR+5sYixlfYwpBeuha+lVi411X6jEbacdbdjs89
jQmXkqvoCDc/2/AgYzL1COyxZ4ObARkGRF+Fp5GbfJ80dhMfqfBsdU7sRAZ1
xbSb7RVrdQBBA60uT6cS7TGzhVc8w0YGhKilyen9dfgqESatGOfMMZ0MRwWs
TK5J5J1zFR0hJFt1VdlQrq6pWkahDRRd6M1gZ+jVI3tjQ0hNe3xwGuGbnJuY
0ERJp9qQnTdbO3BI8/OWR/qBaLBvRXGAVsYUzeREfpkleXy4IxtJ2+Nf1Tml
pwoa0CsWt9GFtHo2gxFOmLNh/HiJwyRQthMf4NU4yq9BV0uSRBoHcc7MDCce
eHZ8tyj9DKlcIRQBxghvUQtgA5OqGIAETB90FZxCF2v5scOVTs5BzGDiMKSk
pYQDO46FYYi9P9kJPal6CRZk2lXFFRcpEQgEcYekBmjTh9FmKUkRjYhqnby0
EVCSR8Ze2bs/Of/En1Xw/Pq3FkHTKDGvptle2d8uvHxsZMWy4DIr8EcOWiwC
c4D5Jsycc6HqCScqMutYleOAuqzLsFOsaq9SHMs0v6L9i1UE2aV6VWUJ0tau
ADmmQNkBVi2B552HG7mTniqhuILxoagJSsSo8Y1woXtF0ok7Ac8reirXyivS
K9a96Kz/uinYstBOMuCgyoBaKSEjZjLhSTrUWWoyozBiXdCG8leGXRF6mmVQ
v8z8KPJpnxXwn/qqvM/iSTiochJPJIU3LSMD+smfZEwtDbVBb+BhovZjSrVA
VOFzKPpbL/QT+Ew3HnEbIhUqKHZoZasJ2zj/bOAQ97oTm4SX/4JRB9hf40wQ
46r8uSE+jP1qWRcEiiribVXLKthvNmrb5up6e7wOH47X6ea1DbiGDb+pJ+3j
szcbP6b+eTriPnz2tfxo+vhfsD9NPizEB+anfxcwfDVM6zYfP+vh9mOsAL9Z
nf+Plxt/PQwep/2Env+rhG4c9qtrgPlTev5/RSOHAeElxcJmcBv8JcgBhOEp
H3zw7srM4w8O7OGDP358WQBibPy/j3S4LxBdjxaGFBiu4S+6X3jhheH8eTFG
KhBjhM6fojNk932zoJHD53DU7B75kfsv/OIv8nnyQLMh0F/60pdP7wj4j+03
BvXmsISf//PgMb5mwGHm01+b/+LhjhxoE/ntoF6TlJyFg9fjzG4SxhBDDiMf
+q5HB1QLRb22y54dZjvY/9RbnnGeJ8HZ+M/hX0Y4sJ4mVxQ75i17IX9UP4y8
3gQjOcT87NXpZYph5eHeXFHorwj8gVqnf6Qw3nHLSc02mP9avD78OvxjgfGf
fpzUaXEjccdThP9VhM5ivelGebze/LcfOf6jm3/1J89cXYvXw+ema//tF47p
8w8+/sTw7HLTDv+Fn9/7xBMuKQtC/ua2e+H0PyX827/6hilID9e7/spr/Px/
RO8a7h+uv3C8Wk6iv/2hx7/6p8/+33/81t2DOx/MM4cleIyok+oAP+JrLa6F
POfXojwafKmoG2dYXFM1oc9lLC5ZK8Tiim5WsdjoKnc1Pt8CmAzzj3Ze45HK
l+NX0bbTHcZB0zxYDpeTCORnbYZroHelT5Eab4YmB1Ljpg4oXWvqXY+A+M9F
sopm9jGIF8ci229lfXOljwATkdONWzX+tA/BthzrCCkCsbGZN1x3RgInupbJ
MoJ5vY1EDWZccxSg9lfRzuLXkAVhCQeZbnL3Jcsp+BRlnl/lN9mzoRlQ+xbX
vEoNRW6xCrRFN2IXV3y+xlNTwYLl1zJJGpYzMWU3LaoDNt7d1RZWmRtgiauH
VdRHH1AavCiDiJpVZpyZoesuKLjOluGRoGlljvh4j8JVFfHSd8Vhc0oiJOkV
Um/M4uAyaYu2lPAF2cHkX7jZsRWRFGPCQGFY7VNDmDJFaeBlJWlaReyoCXUU
rqls1Xkh20NTg00ALXT1tJuO/TNTmk1Vq3yhaNVUItMA3q5y6al+WpRzNbkK
a12z/QGisEHY2LRMAHEzJF3CB2ZkasUZbrhebLTl3qQ5HfxNQlgSJNizCN0X
u69JwflLVnFYo9cxsjJhHWikdsgFfpbcl+zT2F2luMCe601Bzpst90JlKCsk
Rf9RI0T/N1V3t6HxaMk87zIfrq6TtiQYFzzPTcmT4gMnTmYs+q6cPk6wa/c0
5lQKTSSSxnojnExHARQOKQpoxoB8ZgVsZjCZYAsaoLBIhx8mXCR/r2hmShPs
evxkQJ4toYsatfGq4ceeWXthSW47qU6lZNwEy/krSfYoFFTItP4uZBIJjea4
d+YFJiHiC9rRpMlD+ByK1C3HBt73SptIUbizYZSCDuT7C+o/A/ciYSqdca+j
gFwnhdRQqqcbnSoFbloQFgiu0GMS+Vw1YLP3JJtFtFAzxZc+BoK3ilaGrhGF
K9sFe3t2urmxoolQ8p+sf+5TT/jemf8y3w/qf+/jr/dMoZPzJ0fkrzfhP5jz
0EO9k8r7BPN6w/+1nNPSZuH15jeLw3zL6Gs4ONam08/wTwakiFwj3FxH9Pz/
yRGxsdwcP7MZx/+dYgB+nPZVD+E//jMic7MJ/yyC6T3MzH///+Gffg1eFrgv
N1v/jzL9vA2wVyQbb2LHcF9vWMr+4PR32sOZ6kPf9aio07Ucv3h7YKe4G9kV
Yv7tsN0Yh40n3hubauPn/w9/1/G/EvOHn/mMcW809anTQfGvfuxjh1/tj+3f
EziJc+Dr7a/++vEfC/zQj/4oA3IYc3DteAh/Go9z72vXK7yMoA0IF300gSQ4
bJKNuTadPM08QHr0S4oFNdt40Xb8PIw/mHqY+eFHHqXobHxRC9zo+PG/m3SN
UF655nsF11PEYeS7/Pzfq7aZMY632ooQu510cxB2NDPjs5sFGfNDp3+XYeOP
BDggNlgeVkSWXSMKHtbTGwSk5DCJvVaIO3HMg6kskY//+7+jwa973cu//62v
fPObHrziFU0i3vDE+N//+W8+OKbPKx/eDXd+/b9+XagyzpD/44/echjwx3/v
qYVHjXX1tMS7/sr43x16/etfvkDsxp9/4eh1y43Bo4+/7N9+4dmv/umzH/rp
R3DsYJrMNl9xKHWMpPOoBqAro+dKfulaPqH64tQltRmHOWEWHu6gDxqLs2uV
sfCErWJhXPXKeDfjcy9jgg7NJRcULQzmEuNyx1uwRRzvvvCfLnBf5P2zdxG6
fQh9kdc7h+56AwfRsxGeZp70w76tuBF3FmQJy/LoAs/pXlM4FvKV4+PKbw0D
veWhiIycwdula/d3Q6ExPPnz+GAN1Bh6pStYd0022wc7N6AzSX+HAory/oLq
2o3b7LsJFEHfOMc9Fx5Hi+utkdRxrzXXtLT322OaEDM5IljRw+rGU1N9Y7nm
DWpIqHGnAOTDASn6h1EovJ8Bz22kvJohg/VYb4yLI4xeIrCI7N84zSjRWJo8
JUXoFnzfSUXtxxWOlYiHkIitrOItB1DaECBbIxKvyMHy0/gBcMo1El40VJ6t
+LBxklyRgAu9HYT4leaLsWLsr0wWVMaJtJz7N4HzGxpPOvP/c/fuv9Kd13nY
f8K5nZl9mZnz0bqLl9oUpdgSdSEjfaRk140s17KbAo1EQ1QvilVfJLeJAdNU
E0BuBblQ1EKQgtZJJDq13FiWIyGoJFhJW6up/ENl2EABtgUSlM1v7szsvdbz
PGutPeecjx8l0sTgYM6ed7/vWs961rPW++7h+ez6WkaSDrB088hxkuyUssKy
Brq981852W+tBQrKwT3jzOGTckPlj3YfrkuWpJZBnoDQJS611JAEy5GYQX7H
SO3tFqaHeerbDQ8f1GlHjb0zB5FFEJELdlFrGSm5ZhDQ2MuNBLUciVxgsxxo
aWtR2x+6CEoiaEhMN6Qqu5xQ2oW6zMcdl7ZBuwwBGmnpTLMSw/oGZQtC7cuR
a1kefRgIM0aT6wg/n9JvC1g4gJVIEzUwifxrCgc6E1EkTiiA7OEg0C7Jd2g4
sUuFjkoS6bmHhloaLpq28/IKdSGB4O4CzRinAzof1k8TW6SYLcoISwGSIz4y
Poq5SBx/uwP5tafxaGhvgRJBvgwxeMEbdqQGKjUDaBEUwPkjky8mj8q4AmId
r8KIZg9uIovhI7PL3ecyTWt5WpGpa68O6BwuY3SQApSD0kt4e38JwMHecRWT
PmktrKfCjWtyxHsG/noSyQK6OC49pplamMhOKAylISnepRlGoYyVEeVv7T56
KdEa7ZlookQUZTFBEScmY4tB/S1KBm7kWqbVLXRQEDEhLRfNUEClSHkInLeU
+JB9DBaDRcRQDVFJWbRx0emqerVLUIB7zmT/ebmGAV4LqCyytd4JsCaIJht/
OGp75g/t2R1GUjMIjoski97+kj6lMXsYQ8cRl4++9dV8xD0M+MD7cTB++NW/
jn76JwCOE/KA3/7NN7va8In68SvxbAbKymgPf7n9ePw+In+ELv4xHxHh2kG+
5Z9/8bHDr4fXf3N6fdZeB2d9lcPPeP6P2W4dRh784mcZx8cQ1JAcXnw4f3g/
ePfJX33YLx4czAYfFvIBDzz4Q/Kw4DTAn8gcRjLOgwHQH3Kfdl7HA+3hq92H
/77y1a8+9vi7paA4pc0ROhwO1BLy+Pl/qDV+/n+Ydjiif/CNb/Td7uH1pWeP
X/x+7IknLsJhO1Gazv8vH3v8iePB8rO/s1Z7DjN/5XgITzaDV+NrMOYwT/ka
/t+BULthkoXe5zxYMvyRnKNTD7+JCr3mHarwkKqjm8ONpxA8ccG7PO9JdpfD
X0YaHMenXHCp8WDqXtj/NPHcc89N+esve0yAGfzZQXKH3kOCmCejJZ9yy0md
vMJC9wwZP+pndlUXCWQr8Wv/1HTG/wU9Ju0aM7iMX/4Pnxmfx/3ku+8bIPUn
Ar/+i29SSNFo/YvfOT7x/JPfv02JdisIL87/h7//Q0gut7dWWwu03fW7nz1Y
8hN/+odP7F5xL/VyUjUu9gkHWMVjbqFAE57r/a10y+WN1gqdEjUSHAIViup9
GYur1qpj4RQqYuE1PTr1UsTnZY6JmkE6SQekylu6aw2baZ6dzHPBXf3ezStT
gKWJ2nUx4Ja7icM0RATvsSJewYu8nLoQJXSqSaPZvBZH2ffwUWUJURCRjICv
ZYAzxHuAiS7RGwDqdYGzbBaiI7IJlUk8+kzCy2Iqf8/03vvkqcEWysW8ox06
CSbBwgeMdLR4i3aaApQ/4BCqWIez3mVY6GdRQZK2j3kk+03iyWWV5lUEGcP9
maDcstpKYzzjQlZWoUx1mQlGSQc+gwPrCNREBtFs630OH+dywpzOqIv5hy2t
sOhWsS4HF7zF+LX4HnCWs99C+sJFSmd/oEYq7cePVE32tFa0RNct1MxdI37u
szGXcjvvI0LV4O0qT05+pSiUEU8SLV13ZrgWuNL+bKdvxsP4EgTmFR1R1hEU
waniG41Ry/fBqeF4IaQqcT7bLJWC579VmCfUlWSsGHW5jvdybmp2k6gagSmd
Ib+apCHufFQiUaA4ijCmYWQDBME1Nt01PmB1AssSQk5+Th1pLzVO1U8OS5kJ
iW97RsZPbCq5Dp1GSmfKRMpQlsrJ4pXsYdpwW7tXYoSASqKpbijHcKqcVgkx
jTgH3xN1hcPRzaCZpGaepBwOkSAN4p7h5SweKk5YPVeBW4U7UeUMgeis0Jiv
qMoJSnbGqxFRNVjLjbco3OEYijCXXQzkS9unYl+f5DcVU3ydoKxcIk0X+8so
EeDALeoibnGDt96p5Tq5PJni0PtywrdbuqjSVWiQkUwlDFduFZ+GvBOaXWZP
dV2u3bfinCEpxHKjwZ4ndPnyE/hxcHy2zkFXel/IWSvVoMpHfL9lp/sRSUmn
hzwld7pqLUjaLlp0S+LuzZjELiwqzvKBLcmjokGb3HB4+AJfK8WZ/wngYenP
0h//P4zhM+3hCD0efZubfF7NR/qHFVfJ/mKwvcL5/4qsnXrxLVOvw4pTBhxA
ONgwvPKNf/612w88+ENhRf6qv38anqes+JYTAjw/T3J8jHIE6taX/94jDmx1
/n/168GH38hPAf74O9+x8+3iJWfpzg0N1ioN89d4/n96T3+iBwOee+65b37r
W8N7PWzH6+fp/P/wOow/3OVLH17+x4WuY8zUf4dPMwkHk77y1a/6afmXnv2d
4R81GO46/jGf0wF+DuWZ1+GW4WnIMMnBozIEw+rhVJxeuZogoYbD82v+F+Aa
7i0xvCZP3PLVmbv2ccXB09XZixIj6SRxfYNn3/taFk7i/J//zVG4fue/fpvf
/thjrx8u/mcfeXjK8m/8g+M/EPC9P3z8DCD8/f9gw2J7OZ7/26I/9ZOHRD5+
+f8//sBDTuzS5ikAJ8fUg8WeG6511b3nWDoZi+usdSevhMbqjBk/eHxezphc
9Zq6Jay+mrx+bHLyJDe1pBy/Sm2PjN9fa7nVnSKjaIfG8mZgVq8z85zpG6+k
WTgEyI6U1koQ85tJPItdwORyw0IxHPu8VsG64vrk0vVu7lopnzqoOw3u5Gt1
bkLdA9bGXOHLVL5cO0B5tlKC0nYVxJjYF8ecvXX1Ktf15Vwtu1H6xz1LpWz+
aTFz2vlOBPqKKJy1NkNxK9zlhk3PU+OZO+2zojEx4V5muxL5wNib2vwCX3E5
jnhSmDy4NO9Oq+GtixqxGN8X5GD5ijy/PtTXofrkbFdz6Xo33gjwiaJ2DZAn
UrVUmEltn6yVZEBREzFJrCAVZ86I8BnvzBfZsU7Neb08zbeYm9JL31pNrHJu
ueIkOa543vG6NOwvz+fylS33DZvAK7qOyRvP7Ton7FdBuyLlb9LU8XLnInXn
QJ1bsZyzboSYM9Eqz9Cqlk04cifRP5OJhxwsn/ufX6UKaHb/KsOu27Sc2RRM
4PlCIbrpbr0er4JzvWnPI3CtOnU8U7LX6njwNV45vqeLGDz+uh9TaXsa5ouO
31Dd84n0e3/8dXzlt3/zxw7z/NSPv9YHfPTJBw9X+LD9dMto5JkjfbNhtOpg
ahg8WHhyYR///o9bexhgb8z+8XWz8//tPlh75vXnX7t9QGA1ujAizF/d/+7v
vdOgPtrJ/7Dvo299tZT17eW3Ce3DlY9+8N/yVQ6TH6YdHsccft7/4L3l+f8A
EfmOoDtQq9NTgKc/8YnnnnvOT4APV3jk6kSY8WDcrpAjeyLJpQ2jdY+U2w9H
7qtT4A4/+bT/8OtP/+zPDU8EBt/5/P+0+jjVeA78+S8MF59+5hP8mOAw8ze/
OTwR2KsxyuStPIwgKI6Gje+3e3eTTfre9753uHd4DSf/zz///Jee/Z1f+tjH
V3bXeAsBTviPCSjwHkhyehDjITgg4yEYXnyKzuxC1liSXviRsoKWnt0cjXFs
T7770f2+uBfIjKs4dKuaAOMqh2Dxk4sTAZDmJ1065bJdD1/1Ly8ayHtPlsGX
jPbx8P8SexxKsdHH7Q/d+m//zvj/7/zv/+O7HvjhV6ws4o+/c/wbZR//Tx5W
kPH+f/rt4x/p+vOvP+HUWo2WOH8uf/7fHzP3kbe89sIYNeTUYiuzNZeXf/y7
7/o3/8tP/Mvfu93cuuWCvNoOL+PVdu/a6FCMOPj8Rr9VyFOiihajF7gWBozD
vIJsjWzAf1/G4vprlbEYl95enokFiqMjgPEvHXxexpggK+mnBX1c1Ly+vAhv
tnRlK5+Km4OMUA1yQXOXxwCZ/YT8AEIUSRPnfRKKsX7RKsGSMPOeoJZGi9zZ
m2GweRXCQbaxZuq6l1awCtnnSqFd+r4oH1SbPDoW0HpOvhjfgzylYXtT7L0X
zTSn+RVi5zhvpTFAwR2b2z06XkWMo2MWal3mSspeJ9oghWmwZZy2XlvMcxFf
MRYxy7w5sVxmfkaGUw46CBdkf1xCWpG9inOkemE26wbSxFqLkGLoqdBYKgjS
q7O/4+1bJO8KH8luZSUOSie2MsqVIQiZTgin8UheiBtxQHs8oTGharIfaJBA
kwDx+HSFHEnxYpYSJvsLqIE3VKxIe1qIi1GYmdIkWW6bNecJCoFIK7JvnxXP
97MoeeTLqnJzbClpFQ7KysUhkvDSJAvkqTRZsumCMeSRnp5bKBJzgIqjq+4I
OzAnnVmx9HETDkaZSS5r8MJQlYuInfslk4cB7DLLGothkeD8K3nHgQPm3ClR
KGUGASGmqnQje6tuWZCtPOmu5IKD63W2EGoyidie0mGfmJbSx2sNai4rw17V
WBRG4WJs94xqrCmiUXsAQjSuNd+UochNKgdyi5gKYqcqtq88clj2XkFSW5L7
QNmigpDCk/2QXKGSIhG2lvihNw7tBDNQmS+VS9SMXcvE2PsSyi6uOMh36r2D
tse2KqNKM0u3gPwSp5zJ+2CVoh3Dlz6yBkObZ4rgZaxWXvFTJnosDPO994cF
aKPxe+WP1x1vA2hRMYl7EiqODGNYzgdA1fexfm2xVm48ViOFJKCUgyIUF5Vf
KdwcDmurQCHvonVkxfOSYynXzHLWAadQyX9lUYUPtbjsPpN2yyMpZ8mwHCyU
sO1+RThgdxaAZVNVbO2nzpOblrqTkfaDc0R/epNjDcaW0NsOR5qm2GMc96NJ
o5zu+S7rT+wslDaYfHL+gffff5jB/4+Aj37wwWEhv3L6mvqev/p+gTK6Dyfq
qClb7v3GTOF1v316WLAazzHi+b9dh3Svdr7BHJnGt/z5124fJsyvn/rx1/kB
wuHNlef/B68P095//G6/Az4mI/8fEF/+zCOHqU6v+w4vBueTv/owTkFPgIfz
/8NH/rzgp97z2l/7yDjt8R8UOD6huE9xGBseRH9MQHNKCvEYl6efGZ8CPP/8
86evsrNM7XGw78Qb5kdGHH+l839v9Y+v8fzf0mT4az8PvuGNg1CPfxHo9OuF
HRr//FMf9hZusNnPgYcQP/DwG4fv5A82PPCG46+Hmd0eP/ceNzJGm/H83/AZ
TUWauF6Znm8vR5M+/OELy5fD6sP39g9YhdM5E+c9hCv0h5Zro9JaJnoIvve9
Pz2iMUrf/pc+9jF/8OE7Gg8uaiUdDlgi4Azf88sVgMTnOI8f9dtU+8duP+EB
lVTCOeSe5WsIwWmS0fHRcv/+/xbVmTcy48OXQ4ifGh/xmLwfV/TnPk5dOg+R
U4sRGZNi/K1IbM3Q6z5++/Xf+fK7xgeLz/7V1z3wSs+R1fH7/+PTzL/90Tca
Yij0g/F/9MXj9///9A8fhyMuQZYRT9r5/1seee1o9mm2ZX+57MccGVZ8n335
/1c/8jBvBFw2IWgOu/EHQSc6OXtXYDj4ORZ9Z/4LWAs1xW/x6mz55UVttS1i
cfO1YiyQsNOxuIB32KqvtgTRDw6fvxyYuD3eVLDGklIJIfl4xBo55DU3/9iZ
wnJsD9lmr1w+Ie37ZC+zwjaQnbokU0VXeUK0Utyj2tcP+JYIoIuSxcWFy2sQ
3B/x4QNMppC0fyPgWzaMyh82elqqrGFARHZGKqOWT7ja8bQ4azKzmTl7eI0S
4AVoT4h5n7wXPjBFbSuB/bUUPnm2tTIEfEvIW79VJCTGM8FYsWGMtwouBbZB
C6Zi60eDfdgK7LV09tqK/pO3BtbU+b5mi+vUfF4qwlAGDRyoDtu2XFL3Cuyl
zG+7A+9JvMu6oJk94tpsmPt+5rAFFd0Gpv2Fhx42u2IQr1QBKBkBF/KRdIa3
lrwogeMaYhH35lk3s1ojLJpb+tXT0Bo8km6+hdBzFhlpGQRkqJNEhBRRwwvN
p9+FDTLqtRcCavIlHTwo4JjzlkLp+mx2Qg0YcFISSwFHyc8BfKpL8ssLIoxH
EHcczdhCu7Kt2B4WeU86AMjk34OHRHXMQ7T0iF8IjZ1RSQ9Zi4jV0JNdss2L
sqePB26XaePYUl2w6uyzWZpABHDIAD5DtC2glhFW+xw9UnJqP/x2SJnjb0BJ
jGQGL7IrBxkIUMkw/QEHjBLo0Hw34dUWgbZ8wS4PxnMUuJhiHiOzn714ylDF
N+2lRstd8LORC04rylALjSUp2eBNpncREEn7lJPID5pQ0MlOcFVKT6Ki7EHk
DVo7D6XnKbpBLigm10gZcEY7JW7tXEul9q1gG2uvKx75JRxDr+755fWRRczy
5ZKM9CveuzpjTYisognNQEW08ejEXMA50KR7SFVTJKu5lEoIurPLBqOxdCaY
GbG7I+6ZnshegOlN9LNAu5TBQboXXYRIJXU4Js5ijEeBRIwQo6wE/tRpi4aj
JO1BNmsniLRe6D0oYrwmL/d4pDZcSXUrcUGhQbNBDbNPi+bHlc2TztIBmQLB
ARup1aGq4f2qNH6oO1xPiZNUGSnTvY+iXoULK5UM1GvEyNWeewzg6XQFl6JC
+ngqNCjB9hG3EAY4yr20Otbf7unXS6QAt+JQGFchkMrLKOoU1zLPC+tyqR6h
iFtY3R2SNSmywNa9W1mn8dEPPsiHzI++9VX+6zve+qphcj+1Ph7Ub/ff/b13
8q9u0jvo3tO3319FBl/y+8NdX/7MIzhC/3uPsFPp/B+eXpDjpFSTt1AL7Zwc
w82n63/+tdvDvxEQ/uz/6YFIQP44yde/8HYeNvX6+t9/OyfgRfj+/8mq3/7N
H/NnKz7twbbV8XlKPP9nr913IcNWIPK0Hf5d2uF74Cj6uz2+HE6zgWzGQJwh
y8yX+P7/6d7hC/+f+vRvDb8OfwDfp/XDdivHow30/f9xZv/Xflenw/PDp4eZ
3S8/i7YyN7Ldvv9PWyRqOx0KzvHxf0l46sM+ia84Hq2bqchEwAJie9nVYups
Px6hDyEYABlew6n48cqOpuKAou9Fmg9LDPcORmYOkDuXYdgw1V+c/u0AdL/b
aACTwe307QlfsZ6Qs3JPaOwd5wMxLoh7/lAgK1vhC73BH+qUrfp+96p7P/Vr
P+opc3i/+6FbKxfSk+Vvfet4/v8bv/wmO4vw2jTa9r/+4/Hv/ytolxb6YxSe
/Ov2/f9HXuP7i8PPZc9JdBz52//VW4fz/x9+6JXOB281rSKM0FHVgM2Y39sM
HsMlIIrtC17Lw+E5y3GRRJZYEGmvu1YZC94xTcVipV4zCBeaO99nfP7SYIKe
zVOb7bE3pCR7QsYR4O0GN2Oa47RBsz2IeM1zsmqxDFIoucejJdhlnjmIj+93
3Fo/dRHQ9nEJ2hbphGNwsX9nBKRUkZHSyzEO+zhDdkGBIgbuUQ13YQz6WGo2
ciNqvlDECY3LZACzxTsxsPqC79WOV1sa0kBwb9zulQBqGlKwsGuGARdcdjUo
BpoMYN3wtVaq0hfKMZMLYMsMoVOL/YqEghM/NvOxCu81ppeKMI4LWPci64Sx
EtAyLmpeZB3R27sODVbqmhRSocSFA8sr+nGHRmS1ldyE0m6TR4ZDZL5MCPny
U1ASUgq96bynWPZUU5VOPs1m2xuCWhdKyItAKrjm7423lPgrP9DQKIdQcqRE
agJbItR0lhKpJbWAg4uDEYKRKk6K1JYvIs15XYnyrhalC3VBTtLCcvFXpAYX
YjorIyI5pOgEIqXJbCmsyWAFajuhljQVKqnHiJKRdhZeNCP90OeERCP8gwHc
qYKE3OE4YikLLnTFlZ1XXxjJLwhA2lZooql5OKECAtDqkersrB0e0q9eMkDR
CP6Ok+WSl4jWknncHeHYTVSLy7Q7Je2BIJYrdRScImRMVMoyfn4UQh9zhPsT
kTsQkgsfM4p0OxhfdB1h+8NXFIqibMm292IbkEFG5K0xCEBZr1xFU01Ux7QX
Ap2WZifVZJflyZhKP0cBOKBeUBObk3fPUFRZQLzN+jy2sgHneIWPni40cS6I
ctkqu1cFahuNsWYp9hVlRkgtEwe51lwKzSZSJrZ2FYeZSNzYhNlGTdNs4nNd
bwjFQmE1X7+0Ti8KRRH3rdoMaWUwMyCGmEx1eeGbJraZWpGMDLzAObnM6TS7
kPGu6pck6UFeJIP4QC+wgnq50M6l7k6SFJkVehgVKAIq7F+IGC4mdXpOXLm4
auTUiw/tv/yZR/xxwPEv0tgYPl0//OrvT38gSJbjf03g1z7yI2eM4b+T88lf
fZjRKA/zz3s0+ciAX738yqfr3/7io36dj+hxvcck9z9w73UO/4fXYTAvquf/
+4se+Dsgjnx5/h/cYVjs/Y5+YsDwFfTHbj/B18N3yPnG4b0MUwBX/Pd/aJXv
fe97hze/9CvHr4j/0sc+5h/h+/9qMJ0D74aLw9fLh3tPf5Pne7xE+TCiNIZf
JX/UpF2Yio1Pr13GPywUPnrwDeP/WfDA8X+IOF4Zvld/OoeftHOK9nr+vytG
Dub1McTDsAOkbMnFtNmHeT716d/yxzpnLD/z+sY3vxVCr3E/c+/OzfCLp3/h
JSrk4+963Z/8/m3/2v/h13LCB3/klcOY33r6x6bW+rOvPX4Y8K1/+JgtDWL4
in7+/5a3vKa2/GTwD73m3n/1R4dhP/HP/vvH6jF9nPnK18U2Stm1JrnjtTgK
N39df6067mp5GYsz+I/zvMTweTliQpSLlSUjUHYvEYRUTWSV8tPpFcWeYOrV
U5V+5ZjeeRZcKzpq/3UwDM7eKa+Ok1xMlLPruQPobmjDJKSxyZ+4Hm6ZrJ79
vuRtnq2e4XrKUDHwpkjGFc9Zda05dxnDqCQpEBd6sWotdjf18fqWx9c1wL+I
6nTDVFXyewjOrWh9F0FRwzXF1WL+c5BWPV6050UA/xr3Fg1JfftE/Tr3moqj
Xj8TqbxKP5EIN1i9huVcCPp6tjPcyMYzhncgNdf2eloPr64RVyHGudxff9pi
kjT+ptV5N4XhDco0Ev86q58bczGtqC8kbc+uWJg3XV6xEatJe0fl4Cw+JVzn
ZXB3xsIVsS71eFf0IVdgYsiUvxYzJKwuziF/7jo+Shy+uHlQokpXq0c7K6U6
O4NgfjWqZ89Y4qv3onwjl3XpvkRgVwQoRfzK0l9bfq3Ej8pflt0Juu5crK5r
YW3S1Wkipp7toK7xukGduuHgerzw/Bp9wkVU/mrOWnDsVfQnBdOWaGttS9tb
vehROJZckvpA5t1pHu/ecd0P7b/9xUf9IP3rX3i7rbL7wPtf7wfRv0D/v8An
P/4w1YXjSP5i/PHwvN8tT8Yvxf3dB34GEx5e733PazFJeZjf74e/qrFUoJbm
6WefLm7RJvOIkrkfbRhMHa6//RH5vxjGpxjY8uz8r/Rc5zXcvrTYyfm/hc//
fwp/GjKsGM//LaBjlDm+/cAQZyONNN9x1t0DnOdP/4E8IoAjr4bD3m9881un
69LDj0fuBPVwVvzY7Se+8gfH7/CPmJ9edNi+g9n9bjgH/tx4Dnxc4nDxcO9h
xeEv1RxPnimOeqA9mnpw387/UxfBcZefOz7/X7rL/Xg0/dxzz91/PCHfDfSL
kwBnDweDs4vLbffD30d6cgzBccBwDv/Y7cfjjcdwWEAlHLvBWZz/97652J0i
vpMg8vk/jNl96dlnj/80wzOfGM3udy4yS5/NVhyM/On3/+yYhqdbzPIngtmk
BnvnD2h2zNlx5JMcd3fWNUpkylw7Xbw4/RPq0M9+99N/7f5//e33HNLkX/3R
e375P3xosx8nWUogjvOv95fP/4tjQv3TLzxqIO9pwP6Vrxv/aY9/9Om3avh2
vCKd/79axyBMh9d/9Dd+ZPjy/0c/9FCh0pLFuymbE3tJvVOwwMm7tta+cLDf
pTBNXr/mWjkWEIRtNiM7pcUUKhfT58XCJ5byv0yYYJIl28ZLh4XcVAcKgNBU
oG7yhReFPlgvwTAO5a+HvCzd0yBKHJohFkG3C7TDDFZQ2GxEE/WOerY93eWO
02BGW3TPoBaUdoJqlgLCgYSdZ6aI9+Rsn4b1bKojNqDN3sF+Xku8o9sNkBJ2
mTPg7E3OEsMofAYgtXlkNtjOGcpZHPkZHdQrmrwkCCEN2Wsm21giEyelywXt
fRXqhCnNgQNHhKKfkzQKCBfNccCSsQWlR+It+x3fNW1SWDTne0bYcWDa7JYZ
rn6Cik6SKpeXIto7uojxS16F05MzaBsiyDMkhgPt3QpBTJws6khImTGsy3iv
CQIEXHOwN23MxSLY2bPXwbC0rhq81HmWDhrWRTSXHD57s/SlOdc43VznSxtK
UgXw+xC+HcHFVUY5EN6rSqdQDqSKWZbgChIaLByjuUw3Fp6KBLlW7xFKcWG8
OOoYR0cydye+TOshwZvw8Wl7GKbJEsbIdkzx5LTdRcKH7UMITQhTjZ7oecxQ
ZpG4DJuXHoVQEZjhUuu949pRYfWtViYzlWD1aAmEh9k4QXYhs0gHdsuSyZ6b
bhJD13NW0rAcWeqyQDYplBQ+oEdtcypbS6AkFrLuaSGT1Iht9mRkQ9bsgbzI
MhxZyi1DWawqb6gp4h1X7aBsCjXBu0Q/bGy0AC19hgR71M8kxWzA0g0gBS5o
sx3sUfB7qrmUtkv3tKf5o4U+WxAEbiSYMGaA2Mb3ckNIvkfEdgKFIKb4AKKy
NwgyqOksZZFyn3kis3GZ0Lxj73q3R9d1tWQtyvZw8RXW7ZSZlNdeQ3PbI7Cn
WLgWSeuiua+Z4lGQnlNKidJDLVnKr1wNuangLOATbF5ur1CUzCz0Vj4NnSc3
zz0N4D7KGL6EAHLJIwEZQobdHGvLaHD4xjvO9l1Yenznn/9uzwd+5j4J3Hb3
0Q8+oKffP0ynBCM37n/gXj7xPn7dvXfROA7+7G+8SQ/zrUskX/yUcryFz/+f
/itLR6B3SdnpKruD8fF7/jaAfTyYd/oOP2z4+hfexg5SBzIG7pMff4MPOAxm
8uj5/1j6D5MwaO946ysHI9nCg1Oj/gxx77WS9nsOxHJsrSm5+v3ncP6P+jWc
mR/Pn31Oz/rtqKj4M/WWnr60n//7leHE/jD49E/oPosiaIftTw5fAu/HxnjZ
43vgfIYzHJUPNj96+3E/dj7cNRxoC/lPpg7G2PkPWix/SLQKXVO/c0yWziuj
yvDneoZvp/s+hUq/lWkCfEVGBl0qQnBa61Of/vTwh3RCQ0jlDA+5ILB2eH7C
gduqwSSXi+Mt9piAHxvt3vf+nxsecIh69LDcgNo9aY9CEP3Tyy13xeOt3NJm
W9nfU/rKH3wVSni65Un//r9CaglFE46zjbQc/wc007R/5z33/b///Jgj3/ny
u/7Kj75qZJdo/o51b/jXAf7Pf/aE6Sry6LDiu2+P/0Dwf/ErbxribtEn43t8
///Nb351GMNr/dO/f8j3n/j//uefeO39r3CGOLajhpuPZ2xG+4EQ+Kc6xkv2
3VsLsqNVyQUz1nS+fr21yljEnJqIhZZFa1eIQqaHKNl3BR8ow/aGWL3sMPHW
Wvofm+0kF0tvk7j5J32GKHkdd8nCil4abC8DTHbZF5pQCpMriU8lZxf0ZDy1
XlTNIWKwYSl9BTddaEetdMIjY4Vh7qnKG5ytwhJbPmpE5eiVyk26UXbHFm4H
cJnuBf99fqpHK6mt+1z4yN8o5l44NGo762f8eRYcBCb+tEvIjxIAlvq0FEd9
rr03VnvBHUPmkyCmWzZYf6USCW4wwsLknYPmT7E5I5b869YTB83bmCa9W7Vj
1q2EkL6QWAv++BK+I3DHqZOHbezjdo9Yx03KbhVm7gM+QgYPNKbiZKGLS0LY
chAZ5EpLmxohYXyYEiVoT6zeIRzIAhzKUXBH1nHC+vkGncyL45TaaUcDShiF
7BBgCXeMuuCb1CBWQggOzc/PU3RHKb8uob1W0SzLNIgs6XQYaA6KKNkugHzh
EyHnDBqJJUXf+3xkaI+0BTm1SEVpIo5hA7U1qLnYcfXpGTRyZOu/cpRlS0Jk
I40SDrsA7k2CWNU9y9xUlnRZdyXrenaT3AEETVivQaiMTuahdKow9vBuKW7u
KRcEt5U9HzQ3qWqAHrSEk1+SZc/khzFS5eVQWs8DPd32Uk2k5kJbHHxXBign
w8jKsN0zOOLIlqPmBY4tDLFjRu291iNMltde3YJiY4/Qg0XUKFKyWLHAeHoD
NaPE4UYCz8G3yivehnujq/mLSuHkh3bJbn3JM2zNKm5CttbmWb+3dONFbCGk
lDhQEo41aYuLIbMUyqZXrBlG2+wqvVuyy55HvWNl5kUW0a+qM64nVO45u4MO
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
Z4HYQtstclw5ZiuqQOmczvmQPvQr4tinT1mfI8dKTfN82cFymWdLuKnBoE1d
6ZRRumK/DTof8yjepatD5SzcUi+4twlKqFeKTDQFEAsrYZTuaCeBzpabwQsQ
UvDXxGFgB+Lt/DqKjjMqCrXObAFadFdoy5Q9E4WG48JahJ+LeipKzM4lWpvw
fjwKmISUMzdSKJe2Kh/78L7STGHajg2ut8a6OrrfbthuIHAkoUxLLwG75BQN
6IPLWuCC0PVyF5uU7nWJY22siNETnqRa9ea0CwaztCpLIw6pmHLW9+lTtq2L
pkpr16k9eENLBzpJKdkuRGHkdu1VxivYF6ibATGqZUpjCwe/+CI7RTQ7fl9d
/rTOu1/NBXQY8+XPvEXHvCbGXei9ve/+ez/79Jv4n/r9N6e/pfP1L7zteHTv
jvjLrPq1j/zw1N/8CUb6DHzL3/7IDwtcPRZiOw+3+y0H90sXDqb6mIMvfMvx
W/0Tjg/vs6kBZ95NcCwWlYXHPyLk9Ei+DK/TF+9x9Dr89/zzz3/lD75qR9zR
Wv/5i7/ysfLG973/ZxfpfM8N/uKzz/7xd74Tuu5FQNvwf/qZZw6DjxNqOhyu
HK7/+jPPLPvCr0V648f4YYkvnYw5//oi3ZhNEnjN38HH4/f2U4iDp4c3j77r
9iEEw/81EJA8fLRIfvGVw4DDsOE03v87BOVgJDFkJPYA2sE27xJLSgxwDV4n
lo56daDNAbpg82HdXz+tW85p88CYbPk3vvnNE+t2OYKDzYML519Pqw286OH9
j/7oq65z+I/zf3r19+7/7sff9H99Q55R/snvv+uvv+/+HOglrTtckb//U5l3
eP13v/nIcP7/yFtenWYrCHAG7XDLlSNfpLWK91DXXXn9+usuFOHz+HsN9V43
3J5FSZfbTcH4fcDqZYlJ2JpFrGJLE/TK3M+biHPTLhJcZxGmvUBSm6nbS0nP
A6bMEAtTny/j42bwnG0TV3YTgUtjmAlhqoKEcTe0mECvfmljsNQWRebp45xs
lYBfbrenSVKBNsmrM1emcvM6N6olsV0vr1+HA+dvKQ2bEIepl5wYLGI0I3O4
/pZeZ2eTd7JlS47E7dJZeWTD0quPRi7oeglOyfapdAhyKhP20ZKlpUACTUCY
MOwcDtXhiUBd3NhLqi5JqM8ne61I6dOITLV3mOC8bKWdkCkEYddfG++sLoNb
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
Llj9/cbq5YXJ2KrZ4GVbOrhVHtL+Qsar2RD/8y0Nm8oOeqNlsPD2DYVvvEi2
Tc8v4NBDAYo4FFvDSucVpX6a+nU8oSFsF5flLdLwRD6Ms3UcNTID0dnmJLVF
veONtKQdpUbQkMdpOe+ghclip9NSG7MtLkoDs52gUI6aj1ce1sVlurQFDrQS
r2LFek7eTU++xl02w+VkKIK+leWkSZhSHt04BJM6olPUAdqC8YZUBivCOX8F
sW3kdic/l+Eiugv2blvl1ITeGj5Lnt/eC/d4dd6mhfwq308RQPKO7dwK/l1y
SsafYxEOAOlMQIOesIImyIMnARNvUkNYqJByMgZFmdyx4CfOE0WTSQHDcJfu
QYJ6FHzIRPW1qnlYE7QmSqTK6HukgmvYSwrmocguS19YMbqtjMyJMMTa25uu
wGSBrRMRSScUtsT9F0efNgXDS3oGn9kOmtRrJRtXWByVLyh5i+1zNGy7iLpN
55mBSLn7avmASKLmI/FQgNMqFXrjT2K17veXhS+yiY6KnSlHOp+qeViLjqd4
6RTcNAMFiKkSa3EZDibM1ihBbRvapDKnwMCijns1nGxoq7ovBzsR8CBrgfn5
SLDAnAQn3e5zynO97PJSb1lE97WsSBRQ5pSimFbhsoez6gI6bTQeMINRcsNY
ARbFY7hKioVI4VPVFkkKgSK3IhN7lgrqjiYUWhbw6o4jtzfWVEctDUtzHfdD
bOU2OpNIHnJwK/brcgQ+PMKBeRzPT2dYAAlkuzee1VAEl5U9ErKAiW+yeCoJ
bqpB3XYZYu3osSTSov5MaimFrFKMgjD9Mu7RaOZI1K36Tq2C12UOtIOWyaav
eXXx/OsObnkx56mxvcPX3UNpepIpg++qIy8CCMmXbbpygxn4xhrebmLylzAs
L/w1icbN50kXryQYit3NbIjI3NEkNzH1qlS6KTJ3Heqrbrk7OrO9E1/ukMbf
z7Ve9Ficx18n2b604/Kyx+SF52Nl4TVwvluAn98OvCRf57HKxf3aXusk58aM
je6LUtmvHdn52V9fOLY3mvC6eXpXYZnK+jtf+mZpNU2zG6bnvJwzTfKS6CTv
1Iz59JtrCs7V6+Zt8h3MqTv0HyzmefUz9ry4pnZXrPICWXHDYdcM8Qvart6U
n9d36o42OHcCchx/V9qGs1lWVpC7tZmamKc+zab3N8b2piS/U5zPGnZ+ku6q
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
KOYZlnKeeeJM5bhkSlnrTVFToSmZvJHakbmXI5LsL2LhFa2wcD25ypQZ3mOD
gRVPPNAhoSZY0eQCkW2eT7NdL5qFxrQICN+7RqzJ1MIYDVnoiArmB7aE4E5F
UKZaS43OP4FzaG5jWOM8JaUnwLSfuVJPN7e5YaswlElKY84oyagMa8nrqVWm
AD9DJIRY4x5BqCCdIsCUcIVfAz8LVJW055ydCMSZcJf2nAlHmZXJl7CXaQTh
c/c282ppeRMkIupVVLAwM0e24MZaEqqEKCOcHQnGzNNy88raWTV5yR/GWVxY
T3RN11jxDJN9ckwlapA3F7n/b0KKzYuuoPH2Mkzu0TnDz+xFMjXZuU4Fi44F
MpHymypMsa9LJNTzjXU0uJw2fDrBB431OtTTE+bY8MoWfr6O4PAYBKj063hv
LZXZzjJw86ouxHSjHi9IQZiW5j97hKgb+XkafwZhmr/YWU8FdK6rK7FjdxoG
lJicsS1YHh1RiTujCWdQzbdnuMrX3KiV1z2TFGecyjvN0rAzbgaow10c7pEn
tpmqTarap7QfGeecAmoOoEJzAujOMGEeJ5n0K3ox3XVPkZBzJy9UsrRMLlIn
DeugTut4I1aXHZz3G41O5fhP7lNAzjUnXRNrk7w5Ybumc9E1iDQbJbc8UzUp
W8fJffU5DzDWzTBt4vA6Y6jd16jVjcM7FkEHmcgmJkn73QgINjjm6Rp26vhm
vE7FyCz39lI3iXzMOJ7zNLbVdczJqrUVtTU7Aq/HGTY2ibQW44R2ptSoO0SY
wWaPjgMlPiL74OnG9ukaRMs+XKRWivb1iYd+LH+CJZ2c6Cn3jP2yQ7M5JmmZ
rpFdMb54M6c8zQpDRIpJNxfcmIq8FnJkzjqcrcooibUWppHSyAvIi4QMgg/N
14Q1xWAL1c21Jea6dLBhzmBReoaI/oo5rxVz7iNZcEg5hQPxfbwFurGuAuGZ
EjcCtINbh2kpSTf09OE0IdmvzGdikI/uu9qmrHYaYMfBxG4QuNHfKAVzAtwY
ElwGqeamGFxHqJR4BCGnog/OT33yGzV/zdywWKholKUBj7r8Fsw2qqVHLWAF
l2Oesi4V888xlW4Af/CYMC39I3aBanQWNDfe901r8h3ljC+64MRdRv2r2O+l
War5nIXCAOelRYHXYbkGCYvnF17LAhQiTZICqQ2I5SZteLUFcpstmrg31D6G
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
yGdR2tX0o1Z/eP7YXL8u8X0ejpvY4q5FXb+p8sMqX2b7mwp+fP9L+rQ473Rp
m9jtn9tab4vyzV7io7FP1F267iTrm3c+ZmyzhXH78G82/pHd2ww/PPzLun8T
wMcnbJl4J7Mf0rj+OfLNT1LwAMunVW6S/FFbdnmY28vuyvennDzn/y7CbS2e
UXR3y3MSPmrdzUfzYeljuf33lghmxKffKMPdNu9eP1z8UOjn/Bz581zuh8Ae
LvteAZ6v2fKIYT/H34Mfmxu39z4s8WXVPr75XL5tuR/wvL3gjkdfQvQ/V/9j
WR+2c0f/u51+zPa6l49Uqp8+cLX3mc8/gWS794eEnLtzCV+cKnTnWu92+rju
h2u+SfvHn4eHf2T3NnvfrLj9/U3SPorb86KfkzM+Z7hHtbvl389cb3Tw48Mq
D9n+666/p/CXT/uT4GxL9pDk70X7y+x93GkL8jmSu+zd0eGv9Dw+Je05/39a
7mMdH/DznM9vPq0XpfPDfx4jlx68WH1BjeD/iDbrxLXeHFJj9pF5lko7nvH7
ptvKr+a/h7uhFR2nnvx7778rN93qyJDOsV5T8dy0JJZ7B6r5G+eR2zx+wx5e
8bjaDDUPf9kxFUZfenOIPQ9tdkztTo9yYCM2WFdGkg9WYdksZv+o6QGEBDzG
q3+DUxnAM/tXPGdr31jaEQ6/v6XMwTr+K4e97orq0e6NtQ7suq11eAuz6cPB
g4jRk5PFmtud5tIF6TH5PnOYwZuSG8X4TchvzANv1u+jrRI5n5tGOZxkoDdI
ukKr3kwEFjGP302NnqLGnYbzY1PK36T12tW9OfO+SRoVJ3r7csJJ5rNtlncd
C7UZW9uXatFMbOx99N8bUerKkLo3Yun15319qzu4cyoJb+SwEbzava2ODbQt
/iWkyWh7KhBq4QEiTA2JdtP3xdy2WgvtxoPZN8l6YozhZZ5nlM/VmT1jjrlK
OUzJg49K+kfDBZHxqNdeJa4SljxTPfqT3cFzI6nAyZcDXHCoV/HdqMjRclGe
RGlojnPyLmJtNhUP0TYVncee5qqvQZ4cuaH5iFSffh1upClDo0xjH6qTjyqY
uWRNadehOAjV9bax4wQglau8eCKqN0eggZXA0ttVVM8rNGeJoYCnMKQ5TMiY
2Gy5nbHAPmxh+lUo2JqciHOItrMSUvAbsZfIdrNDnV/Eicu6g8SMh4/+fhOZ
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
ul8dY5Fzn6h0PQ9E4f1tS12PGTPD74/+B7evbpk=
               "], {{0, 69}, {2048, 
               0}}, {0, 255}, ColorFunction -> RGBColor], 
              BoxForm`ImageTag[
              "Byte", ColorSpace -> "RGB", Interleaving -> True, 
               Magnification -> Automatic, MetaInformation -> 
               Association[
                "XMP" -> Association[
                  "BasicSchema" -> 
                   Association[
                    "CreatorTool" -> "Pixelmator 3.6", "ModifyDate" -> 
                    DateObject[{2017, 6, 20, 10, 7, 18.}, "Instant", 
                    "Gregorian", -4.]]], "Comments" -> 
                 Association[
                  "XML:com.adobe.xmp" -> 
                   "<x:xmpmeta xmlns:x=adobe:ns:meta/ x:xmptk=XMP Core 5.4.0> \
<rdf:RDF xmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#><rdf:\
Description \
rdf:about=xmlns:xmp=http://ns.adobe.com/xap/1.0/xmlns:tiff=http://ns.adobe.\
com/tiff/1.0/xmlns:exif=http://ns.adobe.com/exif/1.0/> \
<xmp:ModifyDate>2017-06-20T10:06:78</xmp:ModifyDate> \
<xmp:CreatorTool>Pixelmator 3.6</xmp:CreatorTool> \
<tiff:Orientation>1</tiff:Orientation> <tiff:Compression>5</tiff:Compression> \
<tiff:ResolutionUnit>2</tiff:ResolutionUnit> \
<tiff:YResolution>72</tiff:YResolution> \
<tiff:XResolution>72</tiff:XResolution> \
<exif:PixelXDimension>2048</exif:PixelXDimension> \
<exif:ColorSpace>1</exif:ColorSpace> \
<exif:PixelYDimension>69</exif:PixelYDimension></rdf:Description> \
</rdf:RDF></x:xmpmeta>"]]], Selectable -> False], DefaultBaseStyle -> 
             "ImageGraphics", ImageSize -> {2048, 69}, 
             ImageSizeRaw -> {2048, 69}, PlotRange -> {{0, 2048}, {0, 69}}]}],
           ";"}]], "Input", 
       CellChangeTimes -> {{3.7080974999989*^9, 3.708097547169641*^9}, {
        3.708097586842518*^9, 3.7080975954012012`*^9}}], 
      Cell[
       CellGroupData[{
         Cell[
          BoxData[
           RowBox[{"SSEdit", "[", 
             RowBox[{"\"Notebook\"", ",", "\[IndentingNewLine]", 
               RowBox[{"DockedCells", "\[Rule]", "\[IndentingNewLine]", 
                 RowBox[{"Cell", "[", 
                   RowBox[{
                    RowBox[{"BoxData", "@", 
                    RowBox[{"ToBoxes", "@", "$banner"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"CellMargins", "\[Rule]", "None"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"CellFrame", "\[Rule]", "None"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"CellFrameMargins", "\[Rule]", "None"}]}], 
                   "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"Deletable", "\[Rule]", "True"}]}], 
             "\[IndentingNewLine]", "]"}]], "Input", 
          CellChangeTimes -> {{3.70809764968008*^9, 3.7080977436515083`*^9}, {
           3.708120595263157*^9, 3.708120608069406*^9}}], 
         Cell[
          BoxData[
           
           TemplateBox[{
            "Options", "optnf", 
             "\"\\!\\(\\*RowBox[{\\\"DockedCells\\\"}]\\) is not a known \
option for \\!\\(\\*RowBox[{\\\"CellObject\\\"}]\\).\"", 2, 7, 1, 
             27255214006958592697, "Local"}, "MessageTemplate"]], "Message", 
          "MSG", CellChangeTimes -> {3.708097755857635*^9, 
           3.708120610772525*^9}]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Notebook"], Deletable -> True, DockedCells -> Cell[
            BoxData[
             GraphicsBox[
              TagBox[
               RasterBox[CompressedData["
1:eJzsvf2vNOlxHSYkv+TH/AuB78z0JPfOdPfMJXdJ7pKi9iMUyfXuUiKXWlkx
9RFKMiKJHwCXNhTJFPiRRIxFiw4sCZIohOIPMulATigLsORAokUikMXEdASu
A8OByURAEMpGAHvD35KZ6a4651RV98y7XJLvS75C62Juz9PPU3Xq1Kl6nr7v
8j/4wZ98+j/9d77jO77jXf/e4cfTb3vPd77znW9775v+/cMv3/sT7/qxt//E
j/zw637i3T/y9h955wM/+O8ebj56+P/vOAw9fl7vbu/C6z98icZMXy/7pvt4
N19fG7b3r6/ztf9mG/Birzle3bNOfYPwuduuS+J1P6bfXPzvX/evO72+vXl1
XoFn8bmXBPz+df+6f33rXN82W9qvsUJ9exe4b6vrW6gcf9tk9/3rsutbiNv3
r2/j65tXju9n0LfudXeUy4u5/XWj4t2Bw91ixv3rXrvub9buX3fJdREV7wvd
t9H1Ld9AvggHv+UxuUuu+zjfv+6a6y6uet/yDeSLcPCbgMldzJA7ue5Mdb/l
uXdn17cIB76dr/tdx/3rm32dk5G7SXW/vfMlRuquReOuNezFWHg38f/+df+a
vu6OhvBcvty14jBv2Is0+65Vj/OGfR3pdBGYdy10969vi+vukNNvynXXpt68
YXet2ffidR/Mu/R6yXXp21jo7l/3r/vX/ev+df/62i7a0u6PP/uZwfvGhw1X
r7/ubhuap8kz9LTQ4SfG7MPIRi1p8rfnr7PuFEs3x1/tzsE88SIaqU7RsP5W
gdqvi1/lfvToNINNso+P9PpUnwzr6YN924T5+4lHAv6zADY07URQknfOgTQz
g3ZZiH3C8JQC3gecGS4hc/p2jir0YMXe2QGT8wsm+5AF0YB+WCvkY4lq9Wud
X/tIjIl1L74KtIUzF82GlCQDalQbHuk3OSPCbFNX+W1gb580EE/tJfViHGfE
hJJ9Jvr1bEVaTflFVu3ThKMlDXtq2DbiO6Zlpp2XlypqTflskOg+/Vrk13zG
7Q2oO3mwT7b1mZBJ5GfrqX8g0jKXclwmvu1DsVNC9lMTkoUU38lI9UNp24cU
S0/tWU/iVL0TbwL8acScsWfsPIP22bj4nFxH9k1ablK+evU6MDabFNJ8Unmo
MxEVFV2lKkZmTCZgfFaDO5UmJaq06HTz5r5EG6bpRDdLS/Zphn2c5IwX0ulx
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
8bkXMfmaLrHtTv2dKCgZzxqBerk7Vphy8s3st7LWJV68tEw7v+LXfnHJu0MY
z5Skb4DxUyt+7VbND7tskpdYdmxn941G9U6hm39w9SJUbtNxx/v1Q+BFzdzS
z4tnmNeic/a8GAynFr3rr68h3JSAmwvdn8pZvX/ngnlHm9B5KF4cIN9E3fh6
Xuc09lykLoLlXGJeju1Un3PnujHpOE3Vzi7x9d01XODg12bAbFpdaM83Iimk
bHlH9+J8nw/o9P0Xe852yXJTC70Ip+7Utjtsw14Cwr8kNI6TfOPr8jdgxXuy
2bijUN7B4NU4vi3YeGpuFxv7fPqw2LRj07sdfx0HHNvgseFcbLvPfeqJL3z6
qS/8zvH6wWdfwSsexj/0mt3xq9OA3/6V7/Yu2tf67V95nQ+Qx23pp5542e9/
/A3/+vPPfPVPv4+vf/4P3/Th//y1i63Wo017unN88PDtYNXhOnw+OQjHfdj4
+XQdH/n0U+NlVsn1aZ9txORgcxypT/3yhx556omXM2hlIzcujaceXUy3i0fQ
zM7Pfeovjl5viw7zqTe+nE368E+/doiLLZ3P8A9Ttb/2sd/4yp//+f+n/3e4
81uf/NQim7TpDt8+//w/MxhbQLppsWmyYcfou6knyw83D1996ctfdk4uThez
dHjkIx/96GDM8WT4OA/4/O7nnhu++rkPfNDIIAiPeJ4+H9ZyY5QMozHz/3dY
a0mzHWCZGnlY6Hd+93effstbQYBNhw+Rja3beZjzhRdeyCE4IGCA8CRg1GFA
jt1hqoMZx9N4h+I0+ADjGLsNbkYunX5SiFt8S/rwvg98cEA1/N8ffuYzTz/z
VnU8p8ARgYPLX/lKYfnh/uk9AokVlm7f/Z5j3A9jRo3aitn009Rs05oBI1FJ
FsbBq7Z/5PGXv+lNr9w9uAP9mJA8+cn+9oH900+/4vHXPbDuaFFeXfiMOb/3
e17xl7//ofaBXZxT4sv/iKYVCrFrOAcIy6ksCDJttNYMG5PrsrUiPsFZRmDD
a7W84rKKBQ2bWCvFghZK3sVY3GP43OOYiPELCListdC2xCYfsjW4Fkcmae2o
3BhiEiByMMC1UeSlKZqGSPCHyDBQi7B6mlBrHw3etJB9sdabtIAkhX5ATwRQ
YhdoQI5TEaequmBsI7f5p1wBTyJkKywNSCJNuBFFFbD4EgeAp0Z84yglwoin
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
N39df6067mp5GYsz+I/zvMTweTliQpSLlSUjUHYvEYRUTWSV8tPpFcWeYOrV
U5V+5ZjeeRZcKzpq/3UwDM7eKa+Ok1xMlLPruQPobmjDJKSxyZ+4Hm6ZrJ79
vuRtnq2e4XrKUDHwpkjGFc9Zda05dxnDqCQpEBd6sWotdjf18fqWx9c1wL+I
6nTDVFXyewjOrWh9F0FRwzXF1WL+c5BWPV6050UA/xr3Fg1JfftE/Tr3moqj
Xj8TqbxKP5EIN1i9huVcCPp6tjPcyMYzhncgNdf2eloPr64RVyHGudxff9pi
kjT+ptV5N4XhDco0Ev86q58bczGtqC8kbc+uWJg3XV6xEatJe0fl4Cw+JVzn
ZXB3xsIVsS71eFf0IVdgYsiUvxYzJKwuziF/7jo+Shy+uHlQokpXq0c7K6U6
O4NgfjWqZ89Y4qv3onwjl3XpvkRgVwQoRfzK0l9bfq3Ej8pflt0Juu5crK5r
YW3S1Wkipp7toK7xukGduuHgerzw/Bp9wkVU/mrOWnDsVfQnBdOWaGttS9tb
vehROJZckvpA5t1pHu/ecd0P7b/9xUf9IP3rX3i7rbL7wPtf7wfRv0D/v8An
P/4w1YXjSP5i/PHwvN8tT8Yvxf3dB34GEx5e733PazFJeZjf74e/qrFUoJbm
6WefLm7RJvOIkrkfbRhMHa6//RH5vxjGpxjY8uz8r/Rc5zXcvrTYyfm/hc//
fwp/GjKsGM//LaBjlDm+/cAQZyONNN9x1t0DnOdP/4E8IoAjr4bD3m9881un
69LDj0fuBPVwVvzY7Se+8gfH7/CPmJ9edNi+g9n9bjgH/tx4Dnxc4nDxcO9h
xeEv1RxPnimOeqA9mnpw387/UxfBcZefOz7/X7rL/Xg0/dxzz91/PCHfDfSL
kwBnDweDs4vLbffD30d6cgzBccBwDv/Y7cfjjcdwWEAlHLvBWZz/97652J0i
vpMg8vk/jNl96dlnj/80wzOfGM3udy4yS5/NVhyM/On3/+yYhqdbzPIngtmk
BnvnD2h2zNlx5JMcd3fWNUpkylw7Xbw4/RPq0M9+99N/7f5//e33HNLkX/3R
e375P3xosx8nWUogjvOv95fP/4tjQv3TLzxqIO9pwP6Vrxv/aY9/9Om3avh2
vCKd/79axyBMh9d/9Dd+ZPjy/0c/9FCh0pLFuymbE3tJvVOwwMm7tta+cLDf
pTBNXr/mWjkWEIRtNiM7pcUUKhfT58XCJ5byv0yYYJIl28ZLh4XcVAcKgNBU
oG7yhReFPlgvwTAO5a+HvCzd0yBKHJohFkG3C7TDDFZQ2GxEE/WOerY93eWO
02BGW3TPoBaUdoJqlgLCgYSdZ6aI9+Rsn4b1bKojNqDN3sF+Xku8o9sNkBJ2
mTPg7E3OEsMofAYgtXlkNtjOGcpZHPkZHdQrmrwkCCEN2Wsm21giEyelywXt
fRXqhCnNgQNHhKKfkzQKCBfNccCSsQWlR+It+x3fNW1SWDTne0bYcWDa7JYZ
rn6Cik6SKpeXIto7uojxS16F05MzaBsiyDMkhgPt3QpBTJws6khImTGsy3iv
CQIEXHOwN23MxSLY2bPXwbC0rhq81HmWDhrWRTSXHD57s/SlOdc43VznSxtK
UgXw+xC+HcHFVUY5EN6rSqdQDqSKWZbgChIaLByjuUw3Fp6KBLlW7xFKcWG8
OOoYR0cydye+TOshwZvw8Wl7GKbJEsbIdkzx5LTdRcKH7UMITQhTjZ7oecxQ
ZpG4DJuXHoVQEZjhUuu949pRYfWtViYzlWD1aAmEh9k4QXYhs0gHdsuSyZ6b
bhJD13NW0rAcWeqyQDYplBQ+oEdtcypbS6AkFrLuaSGT1Iht9mRkQ9bsgbzI
MhxZyi1DWawqb6gp4h1X7aBsCjXBu0Q/bGy0AC19hgR71M8kxWzA0g0gBS5o
sx3sUfB7qrmUtkv3tKf5o4U+WxAEbiSYMGaA2Mb3ckNIvkfEdgKFIKb4AKKy
NwgyqOksZZFyn3kis3GZ0Lxj73q3R9d1tWQtyvZw8RXW7ZSZlNdeQ3PbI7Cn
WLgWSeuiua+Z4lGQnlNKidJDLVnKr1wNuangLOATbF5ur1CUzCz0Vj4NnSc3
zz0N4D7KGL6EAHLJIwEZQobdHGvLaHD4xjvO9l1Yenznn/9uzwd+5j4J3Hb3
0Q8+oKffP0ynBCM37n/gXj7xPn7dvXfROA7+7G+8SQ/zrUskX/yUcryFz/+f
/itLR6B3SdnpKruD8fF7/jaAfTyYd/oOP2z4+hfexg5SBzIG7pMff4MPOAxm
8uj5/1j6D5MwaO946ysHI9nCg1Oj/gxx77WS9nsOxHJsrSm5+v3ncP6P+jWc
mR/Pn31Oz/rtqKj4M/WWnr60n//7leHE/jD49E/oPosiaIftTw5fAu/HxnjZ
43vgfIYzHJUPNj96+3E/dj7cNRxoC/lPpg7G2PkPWix/SLQKXVO/c0yWziuj
yvDneoZvp/s+hUq/lWkCfEVGBl0qQnBa61Of/vTwh3RCQ0jlDA+5ILB2eH7C
gduqwSSXi+Mt9piAHxvt3vf+nxsecIh69LDcgNo9aY9CEP3Tyy13xeOt3NJm
W9nfU/rKH3wVSni65Un//r9CaglFE46zjbQc/wc007R/5z33/b///Jgj3/ny
u/7Kj75qZJdo/o51b/jXAf7Pf/aE6Sry6LDiu2+P/0Dwf/ErbxribtEn43t8
///Nb351GMNr/dO/f8j3n/j//uefeO39r3CGOLajhpuPZ2xG+4EQ+Kc6xkv2
3VsLsqNVyQUz1nS+fr21yljEnJqIhZZFa1eIQqaHKNl3BR8ow/aGWL3sMPHW
Wvofm+0kF0tvk7j5J32GKHkdd8nCil4abC8DTHbZF5pQCpMriU8lZxf0ZDy1
XlTNIWKwYSl9BTddaEetdMIjY4Vh7qnKG5ytwhJbPmpE5eiVyk26UXbHFm4H
cJnuBf99fqpHK6mt+1z4yN8o5l44NGo762f8eRYcBCb+tEvIjxIAlvq0FEd9
rr03VnvBHUPmkyCmWzZYf6USCW4wwsLknYPmT7E5I5b869YTB83bmCa9W7Vj
1q2EkL6QWAv++BK+I3DHqZOHbezjdo9Yx03KbhVm7gM+QgYPNKbiZKGLS0LY
chAZ5EpLmxohYXyYEiVoT6zeIRzIAhzKUXBH1nHC+vkGncyL45TaaUcDShiF
7BBgCXeMuuCb1CBWQggOzc/PU3RHKb8uob1W0SzLNIgs6XQYaA6KKNkugHzh
EyHnDBqJJUXf+3xkaI+0BTm1SEVpIo5hA7U1qLnYcfXpGTRyZOu/cpRlS0Jk
I40SDrsA7k2CWNU9y9xUlnRZdyXrenaT3AEETVivQaiMTuahdKow9vBuKW7u
KRcEt5U9HzQ3qWqAHrSEk1+SZc/khzFS5eVQWs8DPd32Uk2k5kJbHHxXBign
w8jKsN0zOOLIlqPmBY4tDLFjRu291iNMltde3YJiY4/Qg0XUKFKyWLHAeHoD
NaPE4UYCz8G3yivehnujq/mLSuHkh3bJbn3JM2zNKm5CttbmWb+3dONFbCGk
lDhQEo41aYuLIbMUyqZXrBlG2+wqvVuyy55HvWNl5kUW0a+qM64nVO45u4MO
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
Z4HYQtstclw5ZiuqQOmczvmQPvQr4tinT1mfI8dKTfN82cFymWdLuKnBoE1d
6ZRRumK/DTof8yjepatD5SzcUi+4twlKqFeKTDQFEAsrYZTuaCeBzpabwQsQ
UvDXxGFgB+Lt/DqKjjMqCrXObAFadFdoy5Q9E4WG48JahJ+LeipKzM4lWpvw
fjwKmISUMzdSKJe2Kh/78L7STGHajg2ut8a6OrrfbthuIHAkoUxLLwG75BQN
6IPLWuCC0PVyF5uU7nWJY22siNETnqRa9ea0CwaztCpLIw6pmHLW9+lTtq2L
pkpr16k9eENLBzpJKdkuRGHkdu1VxivYF6ibATGqZUpjCwe/+CI7RTQ7fl9d
/rTOu1/NBXQY8+XPvEXHvCbGXei9ve/+ez/79Jv4n/r9N6e/pfP1L7zteHTv
jvjLrPq1j/zw1N/8CUb6DHzL3/7IDwtcPRZiOw+3+y0H90sXDqb6mIMvfMvx
W/0Tjg/vs6kBZ95NcCwWlYXHPyLk9Ei+DK/TF+9x9Dr89/zzz3/lD75qR9zR
Wv/5i7/ysfLG973/ZxfpfM8N/uKzz/7xd74Tuu5FQNvwf/qZZw6DjxNqOhyu
HK7/+jPPLPvCr0V648f4YYkvnYw5//oi3ZhNEnjN38HH4/f2U4iDp4c3j77r
9iEEw/81EJA8fLRIfvGVw4DDsOE03v87BOVgJDFkJPYA2sE27xJLSgxwDV4n
lo56daDNAbpg82HdXz+tW85p88CYbPk3vvnNE+t2OYKDzYML519Pqw286OH9
j/7oq65z+I/zf3r19+7/7sff9H99Q55R/snvv+uvv+/+HOglrTtckb//U5l3
eP13v/nIcP7/yFtenWYrCHAG7XDLlSNfpLWK91DXXXn9+usuFOHz+HsN9V43
3J5FSZfbTcH4fcDqZYlJ2JpFrGJLE/TK3M+biHPTLhJcZxGmvUBSm6nbS0nP
A6bMEAtTny/j42bwnG0TV3YTgUtjmAlhqoKEcTe0mECvfmljsNQWRebp45xs
lYBfbrenSVKBNsmrM1emcvM6N6olsV0vr1+HA+dvKQ2bEIepl5wYLGI0I3O4
/pZeZ2eTd7JlS47E7dJZeWTD0quPRi7oeglOyfapdAhyKhP20ZKlpUACTUCY
MOwcDtXhiUBd3NhLqi5JqM8ne61I6dOITLV3mOC8bKWdkCkEYddfG++sLoNb
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
Llj9/cbq5YXJ2KrZ4GVbOrhVHtL+Qsar2RD/8y0Nm8oOeqNlsPD2DYVvvEi2
Tc8v4NBDAYo4FFvDSucVpX6a+nU8oSFsF5flLdLwRD6Ms3UcNTID0dnmJLVF
veONtKQdpUbQkMdpOe+ghclip9NSG7MtLkoDs52gUI6aj1ce1sVlurQFDrQS
r2LFek7eTU++xl02w+VkKIK+leWkSZhSHt04BJM6olPUAdqC8YZUBivCOX8F
sW3kdic/l+Eiugv2blvl1ITeGj5Lnt/eC/d4dd6mhfwq308RQPKO7dwK/l1y
SsafYxEOAOlMQIOesIImyIMnARNvUkNYqJByMgZFmdyx4CfOE0WTSQHDcJfu
QYJ6FHzIRPW1qnlYE7QmSqTK6HukgmvYSwrmocguS19YMbqtjMyJMMTa25uu
wGSBrRMRSScUtsT9F0efNgXDS3oGn9kOmtRrJRtXWByVLyh5i+1zNGy7iLpN
55mBSLn7avmASKLmI/FQgNMqFXrjT2K17veXhS+yiY6KnSlHOp+qeViLjqd4
6RTcNAMFiKkSa3EZDibM1ihBbRvapDKnwMCijns1nGxoq7ovBzsR8CBrgfn5
SLDAnAQn3e5zynO97PJSb1lE97WsSBRQ5pSimFbhsoez6gI6bTQeMINRcsNY
ARbFY7hKioVI4VPVFkkKgSK3IhN7lgrqjiYUWhbw6o4jtzfWVEctDUtzHfdD
bOU2OpNIHnJwK/brcgQ+PMKBeRzPT2dYAAlkuzee1VAEl5U9ErKAiW+yeCoJ
bqpB3XYZYu3osSTSov5MaimFrFKMgjD9Mu7RaOZI1K36Tq2C12UOtIOWyaav
eXXx/OsObnkx56mxvcPX3UNpepIpg++qIy8CCMmXbbpygxn4xhrebmLylzAs
L/w1icbN50kXryQYit3NbIjI3NEkNzH1qlS6KTJ3Heqrbrk7OrO9E1/ukMbf
z7Ve9Ficx18n2b604/Kyx+SF52Nl4TVwvluAn98OvCRf57HKxf3aXusk58aM
je6LUtmvHdn52V9fOLY3mvC6eXpXYZnK+jtf+mZpNU2zG6bnvJwzTfKS6CTv
1Iz59JtrCs7V6+Zt8h3MqTv0HyzmefUz9ry4pnZXrPICWXHDYdcM8Qvart6U
n9d36o42OHcCchx/V9qGs1lWVpC7tZmamKc+zab3N8b2piS/U5zPGnZ+ku6q
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
KOYZlnKeeeJM5bhkSlnrTVFToSmZvJHakbmXI5LsL2LhFa2wcD25ypQZ3mOD
gRVPPNAhoSZY0eQCkW2eT7NdL5qFxrQICN+7RqzJ1MIYDVnoiArmB7aE4E5F
UKZaS43OP4FzaG5jWOM8JaUnwLSfuVJPN7e5YaswlElKY84oyagMa8nrqVWm
AD9DJIRY4x5BqCCdIsCUcIVfAz8LVJW055ydCMSZcJf2nAlHmZXJl7CXaQTh
c/c282ppeRMkIupVVLAwM0e24MZaEqqEKCOcHQnGzNNy88raWTV5yR/GWVxY
T3RN11jxDJN9ckwlapA3F7n/b0KKzYuuoPH2Mkzu0TnDz+xFMjXZuU4Fi44F
MpHymypMsa9LJNTzjXU0uJw2fDrBB431OtTTE+bY8MoWfr6O4PAYBKj063hv
LZXZzjJw86ouxHSjHi9IQZiW5j97hKgb+XkafwZhmr/YWU8FdK6rK7FjdxoG
lJicsS1YHh1RiTujCWdQzbdnuMrX3KiV1z2TFGecyjvN0rAzbgaow10c7pEn
tpmqTarap7QfGeecAmoOoEJzAujOMGEeJ5n0K3ox3XVPkZBzJy9UsrRMLlIn
DeugTut4I1aXHZz3G41O5fhP7lNAzjUnXRNrk7w5Ybumc9E1iDQbJbc8UzUp
W8fJffU5DzDWzTBt4vA6Y6jd16jVjcM7FkEHmcgmJkn73QgINjjm6Rp26vhm
vE7FyCz39lI3iXzMOJ7zNLbVdczJqrUVtTU7Aq/HGTY2ibQW44R2ptSoO0SY
wWaPjgMlPiL74OnG9ukaRMs+XKRWivb1iYd+LH+CJZ2c6Cn3jP2yQ7M5JmmZ
rpFdMb54M6c8zQpDRIpJNxfcmIq8FnJkzjqcrcooibUWppHSyAvIi4QMgg/N
14Q1xWAL1c21Jea6dLBhzmBReoaI/oo5rxVz7iNZcEg5hQPxfbwFurGuAuGZ
EjcCtINbh2kpSTf09OE0IdmvzGdikI/uu9qmrHYaYMfBxG4QuNHfKAVzAtwY
ElwGqeamGFxHqJR4BCGnog/OT33yGzV/zdywWKholKUBj7r8Fsw2qqVHLWAF
l2Oesi4V888xlW4Af/CYMC39I3aBanQWNDfe901r8h3ljC+64MRdRv2r2O+l
War5nIXCAOelRYHXYbkGCYvnF17LAhQiTZICqQ2I5SZteLUFcpstmrg31D6G
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
yGdR2tX0o1Z/eP7YXL8u8X0ejpvY4q5FXb+p8sMqX2b7mwp+fP9L+rQ473Rp
m9jtn9tab4vyzV7io7FP1F267iTrm3c+ZmyzhXH78G82/pHd2ww/PPzLun8T
wMcnbJl4J7Mf0rj+OfLNT1LwAMunVW6S/FFbdnmY28vuyvennDzn/y7CbS2e
UXR3y3MSPmrdzUfzYeljuf33lghmxKffKMPdNu9eP1z8UOjn/Bz581zuh8Ae
LvteAZ6v2fKIYT/H34Mfmxu39z4s8WXVPr75XL5tuR/wvL3gjkdfQvQ/V/9j
WR+2c0f/u51+zPa6l49Uqp8+cLX3mc8/gWS794eEnLtzCV+cKnTnWu92+rju
h2u+SfvHn4eHf2T3NnvfrLj9/U3SPorb86KfkzM+Z7hHtbvl389cb3Tw48Mq
D9n+666/p/CXT/uT4GxL9pDk70X7y+x93GkL8jmSu+zd0eGv9Dw+Je05/39a
7mMdH/DznM9vPq0XpfPDfx4jlx68WH1BjeD/iDbrxLXeHFJj9pF5lko7nvH7
ptvKr+a/h7uhFR2nnvx7778rN93qyJDOsV5T8dy0JJZ7B6r5G+eR2zx+wx5e
8bjaDDUPf9kxFUZfenOIPQ9tdkztTo9yYCM2WFdGkg9WYdksZv+o6QGEBDzG
q3+DUxnAM/tXPGdr31jaEQ6/v6XMwTr+K4e97orq0e6NtQ7suq11eAuz6cPB
g4jRk5PFmtud5tIF6TH5PnOYwZuSG8X4TchvzANv1u+jrRI5n5tGOZxkoDdI
ukKr3kwEFjGP302NnqLGnYbzY1PK36T12tW9OfO+SRoVJ3r7csJJ5rNtlncd
C7UZW9uXatFMbOx99N8bUerKkLo3Yun15319qzu4cyoJb+SwEbzava2ODbQt
/iWkyWh7KhBq4QEiTA2JdtP3xdy2WgvtxoPZN8l6YozhZZ5nlM/VmT1jjrlK
OUzJg49K+kfDBZHxqNdeJa4SljxTPfqT3cFzI6nAyZcDXHCoV/HdqMjRclGe
RGlojnPyLmJtNhUP0TYVncee5qqvQZ4cuaH5iFSffh1upClDo0xjH6qTjyqY
uWRNadehOAjV9bax4wQglau8eCKqN0eggZXA0ttVVM8rNGeJoYCnMKQ5TMiY
2Gy5nbHAPmxh+lUo2JqciHOItrMSUvAbsZfIdrNDnV/Eicu6g8SMh4/+fhOZ
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
ul8dY5Fzn6h0PQ9E4f1tS12PGTPD74/+B7evbpk=
                "], {{0, 69}, {2048, 
                0}}, {0, 255}, ColorFunction -> RGBColor], 
               BoxForm`ImageTag[
               "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                MetaInformation -> 
                Association[
                 "XMP" -> Association[
                   "BasicSchema" -> 
                    Association[
                    "CreatorTool" -> "Pixelmator 3.6", "ModifyDate" -> 
                    DateObject[{2017, 6, 20, 10, 7, 18.}, "Instant", 
                    "Gregorian", -4.]]], "Comments" -> 
                  Association[
                   "XML:com.adobe.xmp" -> 
                    "<x:xmpmeta xmlns:x=adobe:ns:meta/ x:xmptk=XMP Core \
5.4.0> <rdf:RDF \
xmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#><rdf:Description \
rdf:about=xmlns:xmp=http://ns.adobe.com/xap/1.0/xmlns:tiff=http://ns.adobe.\
com/tiff/1.0/xmlns:exif=http://ns.adobe.com/exif/1.0/> \
<xmp:ModifyDate>2017-06-20T10:06:78</xmp:ModifyDate> \
<xmp:CreatorTool>Pixelmator 3.6</xmp:CreatorTool> \
<tiff:Orientation>1</tiff:Orientation> <tiff:Compression>5</tiff:Compression> \
<tiff:ResolutionUnit>2</tiff:ResolutionUnit> \
<tiff:YResolution>72</tiff:YResolution> \
<tiff:XResolution>72</tiff:XResolution> \
<exif:PixelXDimension>2048</exif:PixelXDimension> \
<exif:ColorSpace>1</exif:ColorSpace> \
<exif:PixelYDimension>69</exif:PixelYDimension></rdf:Description> \
</rdf:RDF></x:xmpmeta>"]]], Selectable -> False], DefaultBaseStyle -> 
              "ImageGraphics", ImageSizeRaw -> {2048, 69}, 
              PlotRange -> {{0, 2048}, {0, 69}}, ImageSize -> {2048, 69}]], 
            CellMargins -> None, CellFrame -> None, CellFrameMargins -> 
            None]], 
         Cell[
          StyleData[All, "Working"]], 
         Cell[
          StyleData[All, "Presentation"], MenuSortingValue -> None], 
         Cell[
          StyleData[All, "Condensed"], MenuSortingValue -> None], 
         Cell[
          StyleData[All, "SlideShow"], DockedCells -> {
            FEPrivate`FrontEndResource["FEExpressions", "SlideshowToolbar"], 
            Cell[
             BoxData[
              GraphicsBox[
               TagBox[
                RasterBox[CompressedData["
1:eJzsve+zbOlVHkYlX/Ix/0KqTnfvTs7p3nt3H82MpJkR0swIIc0wM0LSCBkq
EpABXPzQj9SM7CIEEUkkRjYCOWUgYFEWchWWnMKJFKoCJCAbykWY2DgpjV0O
VZZSVFIBOx+cib8l3b33Ws/zrLX2Pn3vjKR7NZfanOqz+93vu9aznvWs9b77
3NG/974fffo/+re+5Vu+5YP/zuHH0+997ls/8IH3fvjt/+7hl3f8yAd/8Nkf
+f7ve8uPfOj7n/3+D9z/vn/7cPPRw/9/y2Ho8fN6d30HXv/+KzRm+nrNN9zH
O/l6edjeu77G1/4bbcDtXnO8umud+jrhc6dd58TrXky/sfjfu+5dt3q9unl1
swLP4nM3Cfi969517/rmuV41W9qXWaFe3QXuVXV9E5XjV01237vOu76JuH3v
ehVf37hyfC+DvnmvO6Ncns3trxkV7wwc7hQz7l1323Vvs3bvukOus6h4T+he
Rdc3fQN5Gw5+02Nyh1z3cL533THXHVz1vukbyNtw8BuAyR3MkFu5bk11v+m5
d2vXNwkHXs3Xva7j3vWNvm6SkTtJdV/d+RIjdceicccadjsW3kn8v3fdu6av
O6MhvClf7lhxmDfsNs2+Y9XjZsO+hnQ6C8w7Frp716viujPk9Bty3bGpN2/Y
HWv23XjdA/MOvV5xXXoVC929695177p33bvuXS/voi3t/viznxm8b3zYcPX6
6+66oXmaPENPCx1+Ysw+jGzUkiZ/e/N1ozvF0s3xV7tzME+8iEaqUzSsv1ag
9uviV7kfPTrNYJPs4yO9PtUnw3r6YN82Yf5+4pGA/yyADU07EZTknXMgzcyg
nRdinzA8pYD3AWeGS8icvp2jCj1YsXd2wOT8gsk+ZEE0oB/WCvlYolr9WufX
PhJjYt2zrwJt4cxZsyElyYAa1YZH+k3OiDDb1FV+G9jbJw3EU3tJvRjHGTGh
ZJ+Jfj1bkVZTfpFV+zThaEnDnhq2jfiOaZlpN8tLFbWmfDZIdJ9+LfJrPuP2
BtStPNgn2/pMyCTys/XUPxBpmUs5LhPf9qHYKSH7qQnJQorvZKT6obTtQ4ql
p/asJ3Gq3ok3Af40Ys7YG+y8Ae0b4+Jzch3ZN2m5Sfnq1evA2GxSSPNJ5aHO
RFRUdJWqGJkxmYDxWQ3uVJqUqNKi082b+xJtmKYT3Swt2acZ9nGSG7yQTo+b
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
H77r35z+ucFbH7+/qBppnkFw5hk4MQ8Ly7Z6apsfL+cM3+Irtu2qGHkbay31
kYEJec67C5+7GpOlzj9jLT5fFWaU47kWLNO6payxqdmYyTyaNj4MnpktenQV
ZkYbM+V4xn8ZJ4kzZPv12uZpGcylA3UlA8rPM1SZmP8seJfRSPsVvm/nYJ8w
IKdYGb5Zw1BYZ6I/DjBWe7gzY6s2Na44t8SsI1M0mIErPRWZOaNg7ixHKmJ7
JTZPgjydmFMuL2h+urOdB2fq5kQSxWDdBOxMydgqCFtPN2dFTaebQjmlcssJ
ka/BuQpjtuVClV9Djkzk79lX7ugWMbIR6ikc5uNePhssKSO+nPLrKkFNv+bE
xLRFdxR0L5YwCtY219/wSOHajTE6oyLPf8saMp8yEY0AKfmShTdOqCKzFKBu
WksNKx2pfBwxnApoclN16So2acFC+ZDq8lRQOHFqmiVtieJphi1yPiag5P5s
KzsPI01SUrrQK7KhaITqLScp2HIC0hD9WlKuIjFyuHNMM9TJkZI2gDf1SHlF
NnjSwkV6EGuNsBRiTuYVpYE5kBWPlwiJmVNmOZDzquX0HwdMJcLEacDUnRAm
7hkYitlYVGpT+R6fvelauuNXYnk1g5SAMhnHYdUOIk2I0rNUQBb5qatYvJZK
uRCysMQMGsuEYRaWGTU4GTNXfXhap1PkZADkpqnmgnuVRs5ssiZa6NwIVZ1h
FoftAAWl81b5sMVnD+jxw1EewyEzxe74IZ/h22zHb/ndwfFo2iLy4MM7Pgk/
fH7vdz0Qep7f0n8dcHrcbD4xM/z9P5wi844uANX8iIEzGJbBvNry+b+9wtg6
uw6O8F/gjwOuYiv4B59/Yhhw+ODjh/8EkBkgq4fz/8N1QJLjMpjxG78U/2yY
cODoY/LhD+Mn2AK/wv3xbPbKV+cx9hTO/ykEJxxefPHFL7/44q98+tOHAd/3
Az8ok5PvXz79M4Ff/9zn7Px/O4bvFPfhHPjw8zDmZMyWk2hpsBzmH14Q4D9o
ozk1nP8b4VHR3JglJ8VpgJ//M520NGyHf5jgzDenAI6nWECJMVz6g36dFhr+
i0anA/bHaEIP7nZJrDCeHH8dQBvgSodOzvzjuvqKZ7Dk+O3g1zFqV2StmWfD
xkP+Q+xUWNjyR5UwUbKGuPibnQH8pZz/j4+jFhyDtTWebL1rJWkd/txou9n3
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
HCaBsp34AK/GUX4NulqSJNI4iHNmZjjxwLPju0W3xI4X2rAQ5g8wRniLWgAb
mFTFACRg+qCr4BS6WMuPHS50cg5iBhOHISUtJRzYcSwMQ+z9yU7oSdVLsCDT
riquuEiJQCCIOyQ1QJs+jDZLSYpoRFTr5KWNgJI8MvbC3v3J+Sf+rILn17+1
CJpGiXkxzfbK/nbh5WMjK5YFl1mBP3LQYhGYA8w3YeacC1VPOFGRWceqHAfU
ZV2GnWJVe5HiWKY5/tIDFUF2qV5VWYK0tStAjilQdoBVS+B55+FG7qSnSigu
YHwoaoISMWp8I1zoXpF04k7A84KeyrXygvSKdS86679uCrYstJMMOKgyoFZK
yIiZTHiSDnWWmswojFgXtKH8lWEXhJ5mGdQvMz+KfNpnBfynvirvs3gSDqqc
xBNJ4U3LyIB+8icZU0tDbdAbeJio/ZhSLRBV+ByK/tYL/QQ+041H3IZIhQqK
HVrZasI2zj8bOMS97sQm4eW/YNQB9tc4E8S4KH9uiA9jv1rWBYGiinhb1bIK
9quN2ra5uNwer8OH43W6eWkDLmHDr+lJ+/js1caPqX+GjrgPn30tP5o+/hfs
T5MPC/GB+enfBQxfDdO6zcfPerj9GCvAr1Xn/+Plxl8Og8dpP6vn/yqhG4f9
4hJg/pie/1/QyGFAeEmxsBncBn8JcgBheMoHH7y7MPP4gwN7+OCPH18WgBgb
/+8jHe4LRJejhSEFhmv4i+6XXnppOH9ejJEKxBih86foDNl93yxo5PA5HDW7
R37k/rM///N8njzQbAj0V77y1dM7Av5j+41BvTks4ef/PHiMrxlwmPn01+Y/
f7gjB9pEfjuo1yQlZ+Hg5Tizm4QxxJDDyAff9OiAaqGol3bZs8NsB/ufetcz
zvMkOBv/OfzLCAfW0+SCYse8ZS/kj+qHkZebYCSHmJ+9OL1MMaw83JsLCv0F
gT9Q6/SPFMY7bjmp2QbzX4rXh1+Hfyww/tOPkzotriTueIrwv4jQWaw33SiP
l5u/9cnjP7r5l3/0zMWleD18brr2//njY/r89595Ynh2uWmH/8LPb332CZeU
BSF/dd29dPqfEv6NX37bFKSH64N/8Q1+/j+iBwM2P/oD479KeOKJ+6Eqmr88
myfa4pKCzgRgdbrVeS4FxsCEnEeDLxV14wyLS6om9LmMxTlrhVhc0M0qFncT
Pt8EmAzzj3Ze4pHKl+NX0bbTHcZB0zxYDpeTCORnbYZLoHehT5Eab4YmB1Lj
pg4oXYr742z0c5Gsopl9DOLFscj2W1nfXOgjwETkdONWjT/tQ7AtxzpCSnpl
M2+47owETnQtk2UE83IbiRrMuOQoQO0vop3FryELwhIOMt3k7kuWU/Apyjw/
c6CwZ0MzoPYtLnmVGorcYhVoi27ELq74fImnpoIFyy9lkjQsZ2LKblpUB2y8
u6strDI3wBJXD6uojz6gNHhRBhE1q8w4M0PXXVBwnS3DI0HTyhzx8R6Fiyri
pe+Kw+aUREjSC6TemMXBZdIWbSnhC7KDyb9wsy8Lv5zhTBgoDKt9aghTpigN
vKwkTauIHTWhjsIlla06L2R7aGqwCaCFrp5207F/ZkqzqWqVLxStmkpkGsDb
VS491U+Lcq4mF2GtS7Y/QBQ2CBublgkgboakS/jAjEytOMMV14uN5J0lckCb
6MEIS4IEexah+2L3NSk4f8kqDmv0OkZWJqwDjdQOucDPkvuSfRq7ixQX2HO5
Kch5teVeqAxlhaToP2qE6P+m6u42NB4tmedd5sPFZdKWBOOC57kqeVJ84MTJ
jEXfldPHCXbpnsacSqGJRNJYb4ST6SiAwiFFAc0YkM+sgM0MJhNsQQMUFunw
w4SL5O8FzUxpgl2PnwzIsyV0UaM2XjX82DNrLyzJbSfVqZSMm2A5fyXJHoWC
CpnW34VMIqHRHPfOvMAkRHxBO5o0eQifQ5G65djA+15pEykKdzaMUtCBfH9B
/WfgXiRMpTPudRSQy6SQGkr1dKNTpcBNC8ICwRV6TCKfqwZs9p5ks4gWaqb4
0sdA8FbRytAlonBhu2Bvz043N1Y0EUr+k/U/+PwTvnfmv8z3g/rf+sxbPVPo
5PzJEfnLTfgP5jz4YO+k8j7BvN7wfy3ntLRZeLn5teIw3zL6Eg6Oten0M/yT
ASkilwg31xE9/39yRGwsN8fPbMbxf6cYgB+nff2D+I//jMhcbcI/i2B6DzPz
3/9/4sffgJcF7svV1v+jTD9jA+wVycab2DHclxuWst89/Z32cKb64JseFXW6
lOMXbw/sFHcju0LMvx22G+Ow8cR7Y1Nt/Pz/oTcd/ysxv/elLxn3RlOfOh0U
//KnP3341f7Y/rnASZwDX25/+W8e/7HA9/7ADzAghzEH146H8KfxOPe+dL3C
ywjagHDRRxNIgsMm2ZhL08nTzAOkR7+kWFCzjRdtx8/D+IOph5kfeuRRis7G
F7XAjY4f/7tJlwjlhWu+V3A9RRxGftDP/71qmxnjeKutCLHbSTcHYUczMz67
WZAx33v6dxk2/kiAA2KD5WFFZNklouBhPb1BQEoOk9hrhbgTxzyYyhL5+L//
Oxr8lrfc9xfe/bp3vv2BC17RJOJtT4z//Z//8uNj+rzuod1w52/+1beEKuMM
+d//wfF/n/cP/95TC48a6+ppiQ/+xfGE/61vvW+B2I32/42fPv7nyP6vP3zm
+J96u9x865uuf+TZh/+rn/m2v/XJt/ylD7zhye+431ud0Dzg7NePJrxGXGo6
j2pwC/N4mgdf4ONQXC4DLLYFvpRhTpiFhzvog8bixrXKWHjCVrEwrt4V+NzN
mKBDc8n1Ra8Kg7nEuNzxFmwRx7sv/KcL3Bd5/+xdhG4fQl/k9c6hu9zAQfRs
hKeZJ/2wbyuuxJ0FWcKyPLrAc7rXFI6FfOX4uPJbw0BveSgiI2fwdunS/d1Q
aAxP/jw+WAM1hl7pCtZdks32wc4N6EzS36GAory/oLp25Tb7bgJF0DfOcc+F
x9HiemskddxrzSUt7f32mCbETI4IVvSwuvHUVF9ZrnmDGhJq3CkA+XBAiv5h
FArvZ8BzGymvZshgPdaztkQ2dApjYNTC5UsSjaXJU1KEbsH3nVTUflzgWIl4
CInYyirecgClDQGyNSLxihwsP40fAKdcI+FFQ+XZig//P3fv/2zdXZ2H/Sc6
3+65+8s5574CgSSkV7ZBEAzii2SQhDxJ/IUYXLfTgBxEOnVN/QXcNJ6xIhq3
uGVwQkhHBWfGjUF2BzfG2JCOARtn0tAW/xCl9rRTNc04E7W/ueecvdd6nmet
tc+995WEJb+z5845++z9+az1rGc9a30++7z3XjhJzkjAhd4OQvxI88VYMfZX
Jgsq40Razv1d4PwFXU86Y+fXciXpAEs3XzkOkp1SVljWQLe3/paT/cZaoKAc
3DHOHD4pN1T+aPXhumRJahnkCQhd4lJLDUmwHIkZ5HeM1M5uYXqYp77c8PBB
nbbU2DtzEFkEEblgJ7WWkZJrBgGNndxIUMuWyBkWy4GWNhe1/aGLoCSChsR0
Q6qyywmlbajLvN1xYQu0ixCgkZbONCsxrG9QtiDUPh25luXRLwNhxmhyHeHn
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
50HG20TaSqI9ypFOHchp1p5ajIj7bSXaOWvaakytQTEcrXmaW4sKnPKjdHJR
XKDFaOjEysqlVy4kB0+g1E4Y2daGlc0eI3A+xU+9PV5TZdypueLIqa+LarBg
0M7JBm4wtNlesDEB4as0A1NxL+89159RV1vYJhheAstJd5J3TR459ELxrpS8
nheEc7DhvEy3zoRCu7UqlCIIJ/Io8D8VboHXhz3P508eV2VCGxyZ3oeJk1Yb
I4whraEYogi+1WXxK1qVC9Ol3deCp5uu0YswuGffYf/hVFIsYNhUDapmHMQ5
5X7WeZaOuBsj4TihaRMnb40zueKnOE4mSMmlslLUt5d8aC/xvbGqVPMqtzp8
Pvc201Cz4ye6mjBFviwqzOlJS0cqYB0uimBV07vUFE0zIVZMbjPGjTvdQKga
yys2IQJ+W4SjydMdfUw4YDv3PGzRxBpaL6uD7FCsF7YnEHe6TrC0MKxwfDFJ
4Mugq/vDKdgnSUtCN3l9XAfxW2rRF1m3J7qyRThZ51fW9nZRnA89m3ZN11LI
srgXbNTrmfzn4Yw2eOftzK0d3h4/mjEIVElndGZ2zlEOzcN+2E46Gbt+dt6O
s/DgulU44wcT41vanT63oJwTPqGVbdq5DqKOjJOSCzBjf3IGNg6AsAK08qKw
zX76p8ePMCbXHd7ZO2/TaBrHKOkt3JQIMo3bI+aAS+LS0PUY7UCJmc94nG7W
KHTNcFcrODQ+UTu+kNwnNTgn1wiK2TDROc1I2TeL7G2BJOMW9hk4PUE284sf
eXguDDTwSQtpJXaN1/jbFiBzUgRBEClgogKWIxo2oLJoBvf9I8uawDcydUzt
RhlCLicZCTojXnOVn51TpIiQGkQij6DqWZ8QbsKBu2bn7iBHP61MCVLkdeBS
EIHwUaMDDv6yIERSMQlbvWV0fNYQ2hSyAupzbDPOHKWofim/KKwzjkswPmZK
K6CBTgS1VMm2cr+L1jadfkTZ51kZoubuRL4ZmKKxnbjAs5ieYxbPGriZbON6
wZ/K5kPFDSYwm3c+bTNHGd6FcbSuXWv8lwUmGR/lm+cmSTpStS6ClZvG1VTj
Ij9nXG2Fn+0swM55Ld6xRIT60kXbzr2h4itbGT8gPPpC6hdxjvVCBMQ+mnmB
CBeULJIEh6mzMQosszqRn6dhiWOGKso6tZ0sYoJMRxOR9Lk4SKUgegS/hKtE
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
                 
                 "], {{0, 69}, {2048, 0}}, {0, 255}, ColorFunction -> 
                 RGBColor], 
                BoxForm`ImageTag[
                "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                 MetaInformation -> 
                 Association[
                  "XMP" -> Association[
                    "BasicSchema" -> 
                    Association[
                    "CreatorTool" -> "Pixelmator 3.5", "ModifyDate" -> 
                    DateObject[{2016, 6, 27}, 
                    TimeObject[{9, 6, 41.}, TimeZone -> -4.], 
                    TimeZone -> -4.]]], "Comments" -> 
                   Association[
                    "XML:com.adobe.xmp" -> 
                    "<x:xmpmeta xmlns:x=adobe:ns:meta/ x:xmptk=XMP Core \
5.4.0> <rdf:RDF \
xmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#><rdf:Description \
rdf:about=xmlns:tiff=http://ns.adobe.com/tiff/1.0/xmlns:exif=http://ns.adobe.\
com/exif/1.0/xmlns:dc=http://purl.org/dc/elements/1.1/xmlns:xmp=http://ns.\
adobe.com/xap/1.0/> <tiff:ResolutionUnit>2</tiff:ResolutionUnit> \
<tiff:Compression>5</tiff:Compression> \
<tiff:XResolution>72</tiff:XResolution> \
<tiff:Orientation>1</tiff:Orientation> \
<tiff:YResolution>72</tiff:YResolution> \
<exif:PixelXDimension>2048</exif:PixelXDimension> \
<exif:ColorSpace>1</exif:ColorSpace> \
<exif:PixelYDimension>69</exif:PixelYDimension> <dc:subject><rdf:Seq/> \
</dc:subject> <xmp:ModifyDate>2016:06:27 09:06:41</xmp:ModifyDate> \
<xmp:CreatorTool>Pixelmator 3.5</xmp:CreatorTool></rdf:Description> \
</rdf:RDF></x:xmpmeta>"]]], Selectable -> False], DefaultBaseStyle -> 
               "ImageGraphics", ImageSize -> Magnification[1], 
               ImageSizeRaw -> {2048, 69}, 
               PlotRange -> {{0, 2048}, {0, 69}}]], "", PageWidth -> 
             DirectedInfinity[1], CellMargins -> 0, CellFrameMargins -> 0, 
             CellChangeTimes -> {{3.544379162237352*^9, 3.544379175555642*^9},
                3.574009622854604*^9, 3.5740096771925993`*^9, {
               3.581868126615425*^9, 3.581868137389792*^9}, 
               3.6119448864400587`*^9, 3.644332879574626*^9, 
               3.67602184800485*^9, 3.6760221842131643`*^9, {
               3.676022245795371*^9, 3.6760222459531*^9}}, Magnification -> 
             1.]}, CellMargins -> 0, 
          CellBracketOptions -> {
           "Color" -> RGBColor[0.739193, 0.750317, 0.747173]}]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
         "Originals", "Subsection", 
          CellChangeTimes -> {{3.708097404445539*^9, 3.70809740544527*^9}}], 
         Cell[
          BoxData[""], "Input", CellChangeTimes -> {3.708097488207439*^9}], 
         Cell[
          BoxData[
           RowBox[{"SSNew", "@", "\[IndentingNewLine]", 
             RowBox[{"Join", "[", "\[IndentingNewLine]", 
               
               RowBox[{
                "$TitleCellStyles", ",", "\[IndentingNewLine]", 
                 "$SectionCellStyles"}], "\[IndentingNewLine]", "]"}]}]], 
          "Input", 
          CellChangeTimes -> {{3.707838299569858*^9, 3.707838372535754*^9}, {
           3.708097312549844*^9, 3.708097348441813*^9}, {3.708097380412032*^9,
            3.70809740058037*^9}}], 
         Cell[
          StyleData["Title"], CellGroupingRules -> {"SectionGrouping", 100}], 
         
         Cell[
          StyleData["Chapter"], 
          CellGroupingRules -> {"SectionGrouping", 110}], 
         Cell[
          StyleData["Subchapter"], 
          CellGroupingRules -> {"SectionGrouping", 120}], 
         Cell[
          StyleData["Section"], 
          CellGroupingRules -> {"SectionGrouping", 130}], 
         Cell[
          StyleData["Subsection"], 
          CellGroupingRules -> {"SectionGrouping", 140}], 
         Cell[
          StyleData["Subsubsection"], 
          CellGroupingRules -> {"SectionGrouping", 150}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubsubsection"], 
             CellGroupingRules -> {"SectionGrouping", 160}], 
            Cell[
             BoxData[
              RowBox[{
                RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
                  RowBox[{
                    RowBox[{
                    RowBox[{"SSEdit", "[", 
                    RowBox[{"#", ",", "\[IndentingNewLine]", 
                    
                    RowBox[{
                    "CellGroupingRules", "\[Rule]", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"SectionGrouping\"", ",", 
                    RowBox[{
                    RowBox[{"#2", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}], "+", "100"}]}], 
                    "}"}]}]}], "\[IndentingNewLine]", "]"}], "&"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Join", "[", "\[IndentingNewLine]", 
                    
                    RowBox[{
                    "$TitleCellStyles", ",", "\[IndentingNewLine]", 
                    "$SectionCellStyles", ",", "\[IndentingNewLine]", 
                    "$IOCellStyles"}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SSValue", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Join", "[", "\[IndentingNewLine]", 
                    
                    RowBox[{"$TitleCellStyles", ",", "\[IndentingNewLine]", 
                    "$SectionCellStyles"}], "\[IndentingNewLine]", "]"}], ",",
                     "\[IndentingNewLine]", "CellGroupingRules"}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "}"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input", 
             CellChangeTimes -> {{3.70810814313243*^9, 
              3.708108249736373*^9}, {3.70810828012764*^9, 
              3.708108423385869*^9}, {3.708108542092863*^9, 
              3.70810854535496*^9}}], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"Text\"", ",", "True", ",", 
                  RowBox[{"Deletable", "\[Rule]", "True"}]}], "]"}]], "Input",
              CellChangeTimes -> {{3.708118532624261*^9, 
              3.7081185421789217`*^9}}]}, Open]], 
         Cell[
          StyleData["Text"], Deletable -> True]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
         "Template", "Subsection", 
          CellChangeTimes -> {{3.708097404445539*^9, 3.708097410907843*^9}}], 
         
         Cell[
          BoxData[
           RowBox[{
             RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
               RowBox[{
                 RowBox[{
                   RowBox[{"SSEdit", "[", 
                    RowBox[{
                    RowBox[{"\"Template\"", "<>", "#"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"CellGroupingRules", "\[Rule]", "#2"}]}], 
                    "\[IndentingNewLine]", "]"}], "&"}], ",", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Join", "[", "\[IndentingNewLine]", 
                    
                    RowBox[{
                    "$TitleCellStyles", ",", "\[IndentingNewLine]", 
                    "$SectionCellStyles"}], "\[IndentingNewLine]", "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"SSValue", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Join", "[", "\[IndentingNewLine]", 
                    
                    RowBox[{"$TitleCellStyles", ",", "\[IndentingNewLine]", 
                    "$SectionCellStyles"}], "\[IndentingNewLine]", "]"}], ",",
                     "\[IndentingNewLine]", "CellGroupingRules"}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                   "}"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input", 
          CellChangeTimes -> {{3.7081084326190777`*^9, 
           3.708108448711751*^9}}], 
         Cell[
          StyleData["TemplateTitle", StyleDefinitions -> StyleData["Title"]], 
          Deletable -> False, CellGroupingRules -> {"TitleGrouping", 0}], 
         Cell[
          StyleData[
          "TemplateChapter", StyleDefinitions -> StyleData["Chapter"]], 
          Deletable -> False, CellGroupingRules -> {"SectionGrouping", 10}], 
         Cell[
          StyleData[
          "TemplateSubchapter", StyleDefinitions -> StyleData["Subchapter"]], 
          Deletable -> False, CellGroupingRules -> {"SectionGrouping", 20}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "TemplateSection", StyleDefinitions -> StyleData["Section"]], 
             Deletable -> False, CellFrame -> {{0, 0}, {1, 1}}, 
             WholeCellGroupOpener -> True, CellMargins -> {{25, 0}, {10, 15}},
              CellGroupingRules -> {"SectionGrouping", 30}, FontColor -> 
             GrayLevel[0], Background -> GrayLevel[0.98]], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"TemplateSection\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"CellMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"25", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"10", ",", "15"}], "}"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"CellFrame", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"FontColor", "\[Rule]", "Black"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Background", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", ".98", "]"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"System`WholeCellGroupOpener", "\[Rule]", "True"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"ShowGroupOpener", "\[Rule]", "Inherited"}]}], 
                "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.708110741385954*^9, 
              3.708110851610701*^9}, {3.7081130402316437`*^9, 
              3.708113043300379*^9}}]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "TemplateSubsection", StyleDefinitions -> 
              StyleData["Subsection"]], Deletable -> False, 
             CellFrame -> {{0, 0}, {1, 2}}, ShowGroupOpener -> True, 
             CellMargins -> {{35, 0}, {10, 15}}, 
             CellGroupingRules -> {"SectionGrouping", 40}, 
             CellFrameColor -> {{None, None}, {
                GrayLevel[0.8], 
                GrayLevel[0.5]}}, CellFrameStyle -> {{None, None}, {
                GrayLevel[0.8], 
                GrayLevel[0.5]}}, FontColor -> GrayLevel[0]], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                
                RowBox[{
                 "\"TemplateSubsection\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"CellMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"35", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"10", ",", "15"}], "}"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"CellFrame", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"System`CellFrameStyle", "\[Rule]", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"GrayLevel", "[", ".8", "]"}], ",", 
                    RowBox[{"GrayLevel", "[", ".5", "]"}]}], "}"}]}], 
                    "\[IndentingNewLine]", "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"FontColor", "\[Rule]", "Black"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"ShowGroupOpener", "\[Rule]", "True"}]}], 
                "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.708110741385954*^9, 
              3.708110851610701*^9}, {3.7081111553628283`*^9, 
              3.7081112437760963`*^9}}]}, Open]], 
         Cell[
          StyleData[
          "TemplateSubsubsection", StyleDefinitions -> 
           StyleData["Subsubsection"]], Deletable -> False, 
          CellGroupingRules -> {"SectionGrouping", 50}], 
         Cell[
          StyleData[
          "TemplateSubsubsubsection", StyleDefinitions -> 
           StyleData["Subsubsubsection"]], Deletable -> False, 
          CellGroupingRules -> {"SectionGrouping", 60}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "TemplateFigure", StyleDefinitions -> StyleData["Text"]], 
             Deletable -> False, CellFrame -> {{1, 0}, {0, 0}}, 
             CellFrameColor -> GrayLevel[0.8], DefaultNewInlineCellStyle -> 
             "Text", CellElementSpacings -> {"CellMaxWidth" -> 200}], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"TemplateFigure\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"CellFrame", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"CellFrameColor", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", ".8", "]"}]}], ",", 
                  "\[IndentingNewLine]", 
                  
                  RowBox[{
                   "DefaultNewInlineCellStyle", "\[Rule]", "\"Text\""}]}], 
                "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.708118089312223*^9, 
              3.708118117904132*^9}, {3.7081181598805313`*^9, 
              3.708118208024638*^9}, {3.7081184114307003`*^9, 
              3.708118419860927*^9}, {3.708172037300425*^9, 
              3.708172049232625*^9}, {3.7081721467881002`*^9, 
              3.708172204916522*^9}, {3.708172280619154*^9, 
              3.7081723009167128`*^9}, {3.7081746452376738`*^9, 
              3.7081747274033117`*^9}}]}, Open]], 
         Cell[
          StyleData["TemplateTagItem", StyleDefinitions -> StyleData["Item"]],
           Deletable -> False, CellDingbat -> None, ReturnCreatedCellStyle -> 
          "TemplateItem"], 
         Cell[
          BoxData[
           RowBox[{"SSEdit", "[", 
             RowBox[{"\"TemplateTagItem\"", ",", "\[IndentingNewLine]", 
               RowBox[{"CellDingbat", "\[Rule]", "None"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Deletable", "\[Rule]", "False"}], ",", 
               "\[IndentingNewLine]", 
               
               RowBox[{
                "System`ReturnCreatedCellStyle", "\[Rule]", 
                 "\"TemplateItem\""}]}], "\[IndentingNewLine]", "]"}]], 
          "Input", 
          CellChangeTimes -> {{3.7081008112154207`*^9, 
           3.708100886309214*^9}, {3.7081009411687393`*^9, 
           3.708100967800761*^9}, {3.708101009040277*^9, 
           3.708101010990672*^9}, {3.708101059515785*^9, 
           3.7081011285096493`*^9}, {3.7081012089244957`*^9, 
           3.708101257264598*^9}, {3.708101308346807*^9, 
           3.7081014188166647`*^9}, {3.708115497491859*^9, 
           3.708115521794114*^9}}], 
         Cell[
          BoxData[
           RowBox[{"SSNew", "[", 
             RowBox[{"\"TemplateText\"", ",", "\"Text\""}], "]"}]], "Input", 
          CellChangeTimes -> {{3.7081088280276947`*^9, 3.70810883639429*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "TemplateText", StyleDefinitions -> StyleData["Text"]]], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"TemplateText\"", ",", 
                  RowBox[{"PageWidth", "\[Rule]", "Inherited"}]}], "]"}]], 
             "Input", 
             CellChangeTimes -> {{3.708121429599868*^9, 
              3.7081214382245083`*^9}, {3.708121551804061*^9, 
              3.70812161012812*^9}, {3.70817476810653*^9, 
              3.7081747693509274`*^9}}]}, Open]], 
         Cell[
          StyleData[
          "TemplateSectionDivider", StyleDefinitions -> StyleData["Text"]], 
          Deletable -> True, CellFrame -> {{0, 0}, {3, 0}}, ShowCellBracket -> 
          False, CellMargins -> {{0, 0}, {5, 15}}, 
          CellBracketOptions -> {"Color" -> None, "OverlapContent" -> True}, 
          CellElementSpacings -> {"ClosedCellHeight" -> 1}, Deployed -> False,
           CellGroupingRules -> {"GroupTogetherGrouping", 0}, CellFrameColor -> 
          GrayLevel[0.5], FontSize -> 16, FontSlant -> Italic, Background -> 
          Hue[0.14, 0.2, 1]], 
         Cell[
          BoxData[
           RowBox[{"SSEdit", "[", 
             RowBox[{"\"TemplateSectionDivider\"", ",", "\[IndentingNewLine]", 
               RowBox[{"CellBracketOptions", "\[Rule]", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"\"OverlapContent\"", "\[Rule]", "True"}], 
                   "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"FontSize", "\[Rule]", "16"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"FontSlant", "\[Rule]", "Italic"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"ShowCellBracket", "\[Rule]", "False"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellGroupingRules", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"\"GroupTogetherGrouping\"", ",", "0"}], "}"}]}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"CellFrame", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "0"}], "}"}]}], "}"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellFrameColor", "\[Rule]", "Gray"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Background", "\[Rule]", 
                 RowBox[{"Hue", "[", 
                   RowBox[{".14", ",", ".2", ",", "1"}], "]"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellMargins", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "15"}], "}"}]}], "}"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellElementSpacings", "\[Rule]", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"\"CellMinHeight\"", "\[Rule]", "Inherited"}], 
                   "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"CellSize", "\[Rule]", "Inherited"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellOpen", "\[Rule]", "Inherited"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellSize", "\[Rule]", "Inherited"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Deletable", "\[Rule]", "True"}], 
               RowBox[{"(*", "False", "*)"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Deployed", "\[Rule]", "False"}]}], 
             RowBox[{"(*", "True", "*)"}], "\[IndentingNewLine]", "]"}]], 
          "Input", 
          CellChangeTimes -> {{3.7081008112154207`*^9, 
            3.708100886309214*^9}, {3.7081009411687393`*^9, 
            3.708100967800761*^9}, {3.708101009040277*^9, 
            3.708101010990672*^9}, {3.708101059515785*^9, 
            3.7081011285096493`*^9}, {3.7081012089244957`*^9, 
            3.708101257264598*^9}, {3.708101308346807*^9, 
            3.7081014188166647`*^9}, 3.708101606961513*^9, {
            3.708101641696826*^9, 3.7081017561393433`*^9}, {
            3.708101808460186*^9, 3.7081018677917128`*^9}, {
            3.708103794209401*^9, 3.7081038134341784`*^9}, {
            3.708104158118223*^9, 3.708104187289254*^9}, {
            3.7081043830438013`*^9, 3.70810439460859*^9}, {
            3.7081069110410643`*^9, 3.708106912168968*^9}, {
            3.7081108897132587`*^9, 3.708110923341772*^9}, {
            3.708110955855033*^9, 3.70811099778972*^9}, {
            3.7081111161059847`*^9, 3.708111129764081*^9}, {
            3.708113016680519*^9, 3.708113016973053*^9}, {
            3.7081719902931423`*^9, 3.70817199927437*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["TemplateInlineHeader"], Editable -> False, Deletable -> 
             False, Deployed -> True, DefaultFormatType -> TextForm, 
             SingleLetterItalics -> False, FontWeight -> Bold, FontColor -> 
             RGBColor[
              0.7143816281376364, 0.21776150148775464`, 0.03341725795376516]], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                
                RowBox[{
                 "\"TemplateInlineHeader\"", ",", "True", ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"SingleLetterItalics", "\[Rule]", "False"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Editable", "\[Rule]", "False"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Deletable", "\[Rule]", "False"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"FontWeight", "\[Rule]", "Bold"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Deployed", "\[Rule]", "True"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"DefaultFormatType", "\[Rule]", "TextForm"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"FontColor", "->", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{{{{{{{{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}}}}}}}}}, {{{{{{{{{
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}}}}}}}}}, {{{{{{{{{
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516], 
                    RectangleBox[{0, -1}, {2, 1}]}}}}}}}}}}, AspectRatio -> 1,
                     Frame -> True, FrameStyle -> 
                    RGBColor[
                    0.4762544187584243, 0.14517433432516977`, 
                    0.022278171969176776`], FrameTicks -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], PlotRangePadding -> None], 
                    "RGBColor[0.7143816281376364, 0.21776150148775464, \
0.03341725795376516]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], DefaultBaseStyle -> {}, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516], Editable -> False, Selectable -> 
                    False]}]}], "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.70809780710437*^9, 
               3.708097877215589*^9}, {3.708098455287459*^9, 
               3.708098461273109*^9}, {3.7080985599027643`*^9, 
               3.708098562649983*^9}, {3.708118722827732*^9, 
               3.708118725851734*^9}, {3.708120025831884*^9, 
               3.708120046503688*^9}, 3.708120092834372*^9}], 
            Cell[
             CellGroupData[{
               Cell[
                BoxData[
                 RowBox[{"SSValue", "[", 
                   RowBox[{"\"Subsubsection\"", ",", "FontColor"}], "]"}]], 
                "Input", 
                CellChangeTimes -> {{3.708120073384966*^9, 
                 3.7081200876291237`*^9}}], 
               Cell[
                BoxData[
                 RowBox[{"{", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{{{{{{{{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}}}}}}}}}, {{{{{{{{{
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}}}}}}}}}, {{{{{{{{{
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516], 
                    RectangleBox[{0, -1}, {2, 1}]}}}}}}}}}}, AspectRatio -> 1,
                     Frame -> True, FrameStyle -> 
                    RGBColor[
                    0.4762544187584243, 0.14517433432516977`, 
                    0.022278171969176776`], FrameTicks -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], PlotRangePadding -> None], 
                    "RGBColor[0.7143816281376364, 0.21776150148775464, \
0.03341725795376516]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], DefaultBaseStyle -> {}, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516], Editable -> False, Selectable -> 
                    False], "}"}]], "Output", 
                CellChangeTimes -> {3.70812008805412*^9}]}, Open]], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"Template*\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"Deletable", "\[Rule]", "False"}]}], 
                "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.708097772466872*^9, 
              3.708097785576872*^9}}]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["TemplateSubsectionDelimiter"], 
             CellFrame -> {{0, 0}, {1, 0}}, CellMargins -> {{66, 0}, {1, 1}}, 
             CellBracketOptions -> {"Color" -> None}, 
             CellElementSpacings -> {"ClosedCellHeight" -> 1}, Deployed -> 
             True, CellOpen -> False, CellFrameMargins -> 0, CellFrameColor -> 
             GrayLevel[0.85], CellSize -> {1, 1}], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                
                RowBox[{
                 "\"TemplateSubsectionDelimiter\"", ",", "True", ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"CellBracketOptions", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Color\"", "\[Rule]", "None"}], "}"}]}], ",", 
                  RowBox[{"CellFrame", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"CellMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"66", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"CellFrameMargins", "\[Rule]", "0"}], ",", 
                  RowBox[{"CellOpen", "\[Rule]", "False"}], ",", 
                  RowBox[{"CellFrameColor", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", ".85", "]"}]}], ",", 
                  RowBox[{"CellSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                  RowBox[{"Deployed", "\[Rule]", "True"}], ",", 
                  RowBox[{"CellElementSpacings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"ClosedCellHeight\"", "\[Rule]", "1"}], 
                    "}"}]}]}], "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.708103741047009*^9, 3.708103748448641*^9},
                3.7081037835804777`*^9}]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["LastModified", StyleDefinitions -> StyleData["Text"]],
              FontSlant -> Italic], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"LastModified\"", ",", 
                  RowBox[{"FontSlant", "\[Rule]", "Italic"}]}], "]"}]], 
             "Input", 
             CellChangeTimes -> {{3.708107424142766*^9, 
              3.7081074555101757`*^9}}], 
            Cell[
             BoxData[
              RowBox[{"SSNew", "[", 
                RowBox[{"\"TemplateComment\"", ",", "\"Text\""}], "]"}]], 
             "Input", 
             CellChangeTimes -> {{3.708113594869081*^9, 
              3.708113601524016*^9}}]}, Open]], 
         Cell[
          StyleData[
          "TemplateComment", StyleDefinitions -> StyleData["Text"]]]}, 
        Open]]}, Open]]}, Visible -> False, FrontEndVersion -> 
  "11.1 for Microsoft Windows (64-bit) (March 13, 2017)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Author"->{
  Cell[1168, 34, 475, 7, 
  42, "TemplateTagItem", "ExpressionUUID" -> "832f54f2-1fad-4cf5-
   b946-9af95123a3ea",
   CellTags->"Author"]},
 "Mentor"->{
  Cell[1646, 43, 511, 7, 
  42, "TemplateTagItem", "ExpressionUUID" -> "22bc8a53-ae8f-4d0a-
   a0e1-3981e223ea44",
   CellTags->"Mentor"]},
 "Affiliation"->{
  Cell[2160, 52, 508, 7, 
  42, "TemplateTagItem", "ExpressionUUID" -> "1228af7e-4b56-4150-
   a921-0baba901e6e7",
   CellTags->"Affiliation"]},
 "DataSources"->{
  Cell[1117602, 23356, 257, 4, 
  102, "TemplateSubsection", "ExpressionUUID" -> "
   a6d798b2-5fe0-4cd0-953e-8cd9dc2e7f56",
   CellTags->"DataSources"]},
 "FutureDirections"->{
  Cell[1117884, 23364, 276, 4, 
  83, "TemplateSubsection", "ExpressionUUID" -> "30fe9b7e-d0c3-452b-b264-
   dd34cb982cef",
   CellTags->"FutureDirections"]},
 "References"->{
  Cell[1118543, 23382, 313, 5, 
  102, "TemplateSubsection", "ExpressionUUID" -> "ee401cf0-80f0-4d29-
   b17c-5e4b3a0fc60f",
   CellTags->"References"]},
 "Keywords"->{
  Cell[1118881, 23391, 182, 2, 
  83, "TemplateSubsection", "ExpressionUUID" -> "5e961b4c-560d-45fc-90e2-
   f4996d9a9a86",
   CellTags->"Keywords"]},
 "LastModifiedDate"->{
  Cell[1120598, 23441, 230, 7, 
  44, "LastModified", "ExpressionUUID" -> "1ccf0723-
   deb1-4503-82a8-8f25c3a2d0a7",
   CellTags->"LastModifiedDate"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Author", 1433047, 28757},
 {"Mentor", 1433200, 28762},
 {"Affiliation", 1433358, 28767},
 {"DataSources", 1433521, 28772},
 {"FutureDirections", 1433699, 28777},
 {"References", 1433875, 28782},
 {"Keywords", 1434044, 28787},
 {"LastModifiedDate", 1434218, 28792}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 563, 8, 134, "TemplateTitle", "ExpressionUUID" -> \
"66e6be80-d13d-48b3-8b0e-7c89cf7dd5e0"],
Cell[CellGroupData[{
Cell[1168, 34, 475, 7, 42, "TemplateTagItem", "ExpressionUUID" -> \
"832f54f2-1fad-4cf5-b946-9af95123a3ea",
 CellTags->"Author"],
Cell[1646, 43, 511, 7, 42, "TemplateTagItem", "ExpressionUUID" -> \
"22bc8a53-ae8f-4d0a-a0e1-3981e223ea44",
 CellTags->"Mentor"],
Cell[2160, 52, 508, 7, 42, "TemplateTagItem", "ExpressionUUID" -> \
"1228af7e-4b56-4150-a921-0baba901e6e7",
 CellTags->"Affiliation"]
}, Open  ]],
Cell[2683, 62, 94, 0, 6, "TemplateSubsectionDelimiter", "ExpressionUUID" -> \
"49791f18-dec9-4ddf-9575-8de037ccc825"],
Cell[CellGroupData[{
Cell[2802, 66, 231, 4, 101, "TemplateSection", "ExpressionUUID" -> \
"ec407da3-c1f2-4e6e-b420-82c03a8e35cc"],
Cell[3036, 72, 53306, 880, 543, "TemplateFigure", "ExpressionUUID" -> \
"db131f0c-95d3-441f-bf8e-df5454420989"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56379, 957, 308, 5, 101, "TemplateSection", "ExpressionUUID" -> \
"cea3c4cb-ab61-4c70-8a53-4a017bd95473"],
Cell[56690, 964, 1109, 22, 46, "TemplateText", "ExpressionUUID" -> \
"53305248-88c2-42f4-86e7-77ea436af941"],
Cell[57802, 988, 3088, 58, 274, "TemplateText", "ExpressionUUID" -> \
"07825d12-a5de-4879-8700-4dacb2710a2f"],
Cell[60893, 1048, 1404, 25, 103, "TemplateText", "ExpressionUUID" -> \
"a3220aa3-0bc8-4904-a941-522450e43e83"]
}, Open  ]]
}, Open  ]],
Cell[62324, 1077, 6920, 145, 95, "TemplateSectionDivider", "ExpressionUUID" \
-> "7b962fea-9a6a-4282-9567-019fa980bc81"],
Cell[CellGroupData[{
Cell[69269, 1226, 507, 16, 102, "TemplateSection", "ExpressionUUID" -> \
"71c5bad7-8a51-4111-9c1f-fdddf876b843"],
Cell[CellGroupData[{
Cell[69801, 1246, 295, 7, 46, "Input", "ExpressionUUID" -> \
"31fa86da-a13a-483f-88a6-3f332d6f8ab0"],
Cell[70099, 1255, 1428, 40, 88, "Output", "ExpressionUUID" -> \
"8d18a811-fe50-456e-b6be-bb490acffb16"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71564, 1300, 448, 9, 46, "Input", "ExpressionUUID" -> \
"199261d5-f425-4d3b-87b4-68e34bf3af63"],
Cell[72015, 1311, 3130, 82, 176, "Output", "ExpressionUUID" -> \
"f70c614d-d7ff-431d-8372-9faf9567f098"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75182, 1398, 372, 8, 46, "Input", "ExpressionUUID" -> \
"158797cf-e999-4faa-b3a9-e51587158967"],
Cell[75557, 1408, 1755, 45, 88, "Output", "ExpressionUUID" -> \
"a208aa7a-45aa-4b1f-b678-1adf260eb86f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77349, 1458, 416, 9, 46, "Input", "ExpressionUUID" -> \
"2516ecf1-c98b-4265-bc54-64cf5cb99f03"],
Cell[77768, 1469, 4013, 102, 220, "Output", "ExpressionUUID" -> \
"46db88d8-5336-4bfb-a61a-d424ef7f1cbf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81818, 1576, 425, 7, 46, "Input", "ExpressionUUID" -> \
"eb67cfc8-9e7a-41a5-95df-a382404285a2"],
Cell[82246, 1585, 1628, 42, 88, "Output", "ExpressionUUID" -> \
"230d154c-3287-4ee4-8bd3-4d9a36614b69"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83911, 1632, 392, 7, 46, "Input", "ExpressionUUID" -> \
"f36099df-8934-4a42-8529-1ac7273f2bf1"],
Cell[84306, 1641, 1463, 40, 88, "Output", "ExpressionUUID" -> \
"0782a912-249b-4132-9c72-3b26d0f5649e"]
}, Open  ]]
}, Open  ]],
Cell[85796, 1685, 7856, 162, 95, "TemplateSectionDivider", "ExpressionUUID" \
-> "2a410f4e-9df0-4e9f-931c-478a3933bab6"],
Cell[CellGroupData[{
Cell[93677, 1851, 186, 3, 101, "TemplateSection", "ExpressionUUID" -> \
"80990120-78d6-4217-9f81-963440ededdd"],
Cell[CellGroupData[{
Cell[93888, 1858, 270, 4, 102, "TemplateSubsection", "ExpressionUUID" -> \
"ec486cf1-bdf1-4bf6-9bd6-0a3e2548a100"],
Cell[94161, 1864, 885, 16, 217, "Text", "ExpressionUUID" -> \
"49053ed9-9085-4749-b029-205fb0f8bc66"]
}, Open  ]],
Cell[CellGroupData[{
Cell[95083, 1885, 183, 3, 102, "TemplateSubsection", "ExpressionUUID" -> \
"21c52fcd-c2ef-43f9-8861-3ed5e577658f"],
Cell[95269, 1890, 169, 3, 46, "TemplateComment", "ExpressionUUID" -> \
"5a0f92ce-f275-41a2-9211-00e103012524"],
Cell[95441, 1895, 836, 22, 46, "Output", "ExpressionUUID" -> \
"350ca185-6f20-4683-af40-737619ed9853"],
Cell[CellGroupData[{
Cell[96302, 1921, 226, 3, 42, "Subsubsubsubsection", "ExpressionUUID" -> \
"d3e5bd13-0231-4352-9d49-8fbc7ee94656"],
Cell[96531, 1926, 27938, 667, 4977, "Input", "ExpressionUUID" -> \
"5269408b-cbd3-4de2-ac23-cf5f9e5a6197"]
}, Closed]]
}, Open  ]],
Cell[124496, 2597, 186, 3, 102, "TemplateSubsection", "ExpressionUUID" -> \
"87e68e4b-b2ef-487d-ab10-ad383b7005f5"],
Cell[CellGroupData[{
Cell[124707, 2604, 249, 4, 83, "TemplateSubsection", "ExpressionUUID" -> \
"28ed68f5-471c-474f-b9a5-44ad83985b1f"],
Cell[124959, 2610, 324, 7, 75, "Text", "ExpressionUUID" -> \
"e79b1373-c11c-4c89-91cb-0b59e10a378b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[125320, 2622, 275, 4, 102, "TemplateSubsection", "ExpressionUUID" -> \
"979f4965-317b-48d6-9b3a-105a105ccf53"],
Cell[CellGroupData[{
Cell[125620, 2630, 185, 3, 96, "Chapter", "ExpressionUUID" -> \
"7face186-ae95-47ea-8acd-69f0b13cd6c5"],
Cell[CellGroupData[{
Cell[125830, 2637, 3148, 71, 540, "Input", "ExpressionUUID" -> \
"bcff7b13-499b-4775-8eb8-2246e1883dcb"],
Cell[128981, 2710, 19500, 351, 285, "Output", "ExpressionUUID" -> \
"59ee8b0c-f5f1-4d66-87c5-4a567478f3bd"]
}, {2}]],
Cell[CellGroupData[{
Cell[148515, 3066, 3794, 85, 598, "Input", "ExpressionUUID" -> \
"20b48497-2105-4019-8a42-de02640003bc"],
Cell[152312, 3153, 20786, 374, 405, "Output", "ExpressionUUID" -> \
"3a3aecbf-5e47-4568-9aca-6802bb6238ca"]
}, {2}]]
}, Closed]],
Cell[CellGroupData[{
Cell[173144, 3533, 207, 4, 77, "Chapter", "ExpressionUUID" -> \
"259d25c2-758e-4c8e-ad87-203afbc23560"],
Cell[CellGroupData[{
Cell[173376, 3541, 516, 9, 46, "Input", "ExpressionUUID" -> \
"a1f6886a-84d7-4581-83d4-5a5b22046d7d"],
Cell[173895, 3552, 2065, 49, 88, "Output", "ExpressionUUID" -> \
"6443cd53-16f1-4186-91e2-bb266fbf2a40"]
}, Open  ]],
Cell[CellGroupData[{
Cell[175997, 3606, 272, 6, 46, "Input", "ExpressionUUID" -> \
"c3fe2e25-8ca0-4a28-a1fc-0278e7c73f44"],
Cell[176272, 3614, 1373, 39, 88, "Output", "ExpressionUUID" -> \
"9cd7535c-5cd2-43e0-8d66-fa9d32a8709e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[177682, 3658, 469, 10, 46, "Input", "ExpressionUUID" -> \
"17cc39e9-02b8-490d-a17d-8144a2d1776b"],
Cell[178154, 3670, 3236, 85, 176, "Output", "ExpressionUUID" -> \
"4eb7458d-6890-4182-9f78-93b254c8ed4f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181427, 3760, 372, 8, 46, "Input", "ExpressionUUID" -> \
"d5f70d4e-2fd8-4be6-a841-7adb40ba689c"],
Cell[181802, 3770, 1755, 45, 88, "Output", "ExpressionUUID" -> \
"fdf69b0d-e125-433b-adce-0cc6431873e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183594, 3820, 292, 6, 46, "Input", "ExpressionUUID" -> \
"25b1e7f5-9435-4f2e-9275-b1ed59782e52"],
Cell[183889, 3828, 5577, 163, 396, "Output", "ExpressionUUID" -> \
"ab95f8e1-557f-42f9-94c8-e3195ff70d99"]
}, Open  ]],
Cell[CellGroupData[{
Cell[189503, 3996, 443, 11, 46, "Input", "ExpressionUUID" -> \
"e4f93b5a-9b82-4672-b78a-b2eff19b5a35"],
Cell[189949, 4009, 7494, 205, 396, "Output", "ExpressionUUID" -> \
"67cb4888-18ba-451e-bc26-95350764cfdc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[197480, 4219, 395, 11, 46, "Input", "ExpressionUUID" -> \
"f52aef0a-52ea-43b4-bd2a-7cc6c084abf4"],
Cell[197878, 4232, 5630, 151, 176, "Output", "ExpressionUUID" -> \
"6cf96aa2-5a6c-40df-84b9-59890ad8dbcf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[203545, 4388, 414, 11, 46, "Input", "ExpressionUUID" -> \
"24dd0f8d-1190-4497-a55e-5858808c7ade"],
Cell[203962, 4401, 4968, 134, 220, "Output", "ExpressionUUID" -> \
"168be4d9-12cd-4fb0-9caa-4a2217509174"]
}, Open  ]],
Cell[CellGroupData[{
Cell[208967, 4540, 464, 12, 46, "Input", "ExpressionUUID" -> \
"a9541d6f-04dd-4b53-a0d4-11447a2bfc65"],
Cell[209434, 4554, 5508, 137, 316, "Output", "ExpressionUUID" -> \
"ddcaf0da-a069-463a-85e3-1d258a8bd3cf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[214979, 4696, 473, 11, 46, "Input", "ExpressionUUID" -> \
"c7f16819-723d-4260-82c1-113a43a764b4"],
Cell[215455, 4709, 2292, 61, 88, "Output", "ExpressionUUID" -> \
"5ca0e996-68c6-4138-b0aa-db7fddb0374c"]
}, Open  ]],
Cell[217762, 4773, 577, 14, 76, "Input", "ExpressionUUID" -> \
"d521ce2d-139b-4fef-b8fb-97b1428f9364"],
Cell[CellGroupData[{
Cell[218364, 4791, 471, 8, 46, "Input", "ExpressionUUID" -> \
"0aea6d96-c074-4bff-85ad-1f2627a0a46f"],
Cell[218838, 4801, 710, 12, 46, "Output", "ExpressionUUID" -> \
"b7f6598c-2db8-4ad2-b52c-68db77db298c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[219585, 4818, 869, 21, 105, "Input", "ExpressionUUID" -> \
"ba9df7e9-8e3c-4cc7-9a24-87da64d232db"],
Cell[220457, 4841, 530, 8, 46, "Output", "ExpressionUUID" -> \
"8141b190-8042-4991-bac4-e56e037d63b5"],
Cell[220990, 4851, 531, 8, 46, "Output", "ExpressionUUID" -> \
"679a0c5b-a66b-4bad-b875-a5553cee67a8"]
}, Open  ]],
Cell[221536, 4862, 170, 3, 46, "Input", "ExpressionUUID" -> \
"14bede3b-e6d3-4ef0-8369-a0ddcac62bb0"],
Cell[221709, 4867, 1145, 20, 46, "Input", "ExpressionUUID" -> \
"d2b97b22-fb2b-4fa6-9c3f-bf1950d81411"],
Cell[CellGroupData[{
Cell[222879, 4891, 602, 10, 46, "Input", "ExpressionUUID" -> \
"94aa9252-cea1-4947-837f-529952657999"],
Cell[223484, 4903, 3391, 81, 113, "Output", "ExpressionUUID" -> \
"db18db78-394f-44a5-bd7c-83b95784f7fa"]
}, Open  ]],
Cell[226890, 4987, 727, 20, 76, "Input", "ExpressionUUID" -> \
"238c7d5a-18f7-41cb-a213-5a8ff0ecfaa8"],
Cell[CellGroupData[{
Cell[227642, 5011, 1048, 29, 134, "Input", "ExpressionUUID" -> \
"8de62f34-b9bb-4aa3-9d46-2875177d84b2"],
Cell[228693, 5042, 30334, 813, 1579, "Output", "ExpressionUUID" -> \
"84df31bd-5364-419a-b6e9-4c34e42bb0e4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[259064, 5860, 970, 28, 134, "Input", "ExpressionUUID" -> \
"b177361d-a186-476e-a534-bbc6f4ebf1b7"],
Cell[260037, 5890, 11026, 306, 500, "Output", "ExpressionUUID" -> \
"44ef5e8b-aecc-4f97-b357-836ea1405821"]
}, Open  ]],
Cell[CellGroupData[{
Cell[271100, 6201, 970, 28, 134, "Input", "ExpressionUUID" -> \
"5aba85a8-d7d8-47a9-ad3c-6c6322eaea19"],
Cell[272073, 6231, 151793, 3852, 7722, "Output", "ExpressionUUID" -> \
"df7049ef-465c-46aa-aab5-cd2ef8eeda70"]
}, Open  ]],
Cell[CellGroupData[{
Cell[423903, 10088, 974, 28, 134, "Input", "ExpressionUUID" -> \
"15cb42e7-70dd-4407-a753-eabde289ff3b"],
Cell[424880, 10118, 33817, 908, 1799, "Output", "ExpressionUUID" -> \
"e44f58fa-f3bb-4fcc-9815-0d4419f39557"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[458746, 11032, 160, 3, 77, "Chapter", "ExpressionUUID" -> \
"f1196f30-59fd-4e45-a7dd-49ee538aacab"],
Cell[CellGroupData[{
Cell[458931, 11039, 1594, 37, 366, "Input", "ExpressionUUID" -> \
"b3cd7a7e-9ebd-47a6-8fbe-4601fa7a4823"],
Cell[460528, 11078, 1145, 33, 175, "Output", "ExpressionUUID" -> \
"5fa8c2b1-08e5-4580-be20-45c82bcb56b9"]
}, {2}]]
}, Closed]],
Cell[CellGroupData[{
Cell[461719, 11117, 176, 3, 77, "Chapter", "ExpressionUUID" -> \
"dc17e1fb-0e88-48fd-a791-4bf93c1ae29a"],
Cell[CellGroupData[{
Cell[461920, 11124, 4360, 127, 208, "Input", "ExpressionUUID" -> \
"b2af409e-19a7-4f96-9821-3ebd0ff400ef"],
Cell[466283, 11253, 1843, 40, 312, "Output", "ExpressionUUID" -> \
"33dcf932-e4bd-44c8-89a5-046440653efe"]
}, Open  ]],
Cell[468141, 11296, 710, 17, 46, "Input", "ExpressionUUID" -> \
"a199d87f-5e79-475c-b4ee-bfbdeeeaf695"],
Cell[CellGroupData[{
Cell[468876, 11317, 181, 3, 51, "Subsubsection", "ExpressionUUID" -> \
"cedee528-c24e-4629-960c-1371fd150d4b"],
Cell[469060, 11322, 1975, 52, 192, "Input", "ExpressionUUID" -> \
"af2f969e-c377-4c60-abae-4eed1436b5e8"],
Cell[CellGroupData[{
Cell[471060, 11378, 412, 9, 46, "Input", "ExpressionUUID" -> \
"a7ba9113-a639-423c-8e87-6a1d0a50d835"],
Cell[471475, 11389, 11673, 331, 322, "Output", "ExpressionUUID" -> \
"68d168c3-0c94-4541-bb56-8d8f1c0f3da3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[483185, 11725, 1090, 25, 76, "Input", "ExpressionUUID" -> \
"4317adfd-6a03-4558-b024-87518e7ba7e3"],
Cell[484278, 11752, 52518, 865, 544, "Output", "ExpressionUUID" -> \
"5f282c22-2e5d-4b62-8e1c-45d91c513fe7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[536833, 12622, 1301, 27, 76, "Input", "ExpressionUUID" -> \
"8e8bf760-5c1e-4377-8da6-97e7e2f0d3a2"],
Cell[538137, 12651, 55070, 906, 896, "Output", "ExpressionUUID" -> \
"f4009200-a1b9-400d-84cb-c1081474a80d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[593244, 13562, 2072, 40, 250, "Input", "ExpressionUUID" -> \
"a1271621-011f-4cc3-a99e-49ef93ddf196"],
Cell[595319, 13604, 36402, 738, 562, "Output", "ExpressionUUID" -> \
"27357664-89b9-4e82-a1ac-c1753be5f922"]
}, Open  ]],
Cell[CellGroupData[{
Cell[631758, 14347, 338, 8, 46, "Input", "ExpressionUUID" -> \
"ae914efa-b3e3-4bf8-9605-e5aeda0fbdd8"],
Cell[632099, 14357, 164443, 2699, 562, "Output", "ExpressionUUID" -> \
"0f71a5e1-bf99-4460-93ff-0a0d9c8dbd85"]
}, Open  ]],
Cell[CellGroupData[{
Cell[796579, 17061, 199, 4, 46, "Input", "ExpressionUUID" -> \
"a757b219-fa30-4770-9e58-0f9593941bd3"],
Cell[796781, 17067, 207, 5, 46, "Output", "ExpressionUUID" -> \
"3885d3c5-206f-48b3-acdb-c7a65739a107"]
}, Open  ]],
Cell[CellGroupData[{
Cell[797025, 17077, 1411, 35, 221, "Input", "ExpressionUUID" -> \
"81035c53-8b63-4e26-b2d1-513a2b3c5d02"],
Cell[798439, 17114, 164816, 2704, 562, "Output", "ExpressionUUID" -> \
"6045c41c-3eed-47bc-95ce-76655d1f3db5"]
}, Open  ]],
Cell[963270, 19821, 729, 20, 46, "Input", "ExpressionUUID" -> \
"dabd8c98-a909-4f0a-b3ea-892aa6e669f0"],
Cell[CellGroupData[{
Cell[964024, 19845, 475, 12, 46, "Input", "ExpressionUUID" -> \
"ed9710e4-cced-498a-906d-4c6a59a3d5a7"],
Cell[964502, 19859, 84924, 2012, 535, "Output", "ExpressionUUID" -> \
"6375c17e-2f8e-4581-8855-bc36938bc4cd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1049463, 21876, 623, 14, 46, "Input", "ExpressionUUID" -> \
"fccc74a8-bc43-4c87-b295-d9f66a838bf1"],
Cell[1050089, 21892, 67462, 1458, 648, "Output", "ExpressionUUID" -> \
"e6d1029c-f8d1-4b4b-b82f-e641d4df2840"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[1117602, 23356, 257, 4, 102, "TemplateSubsection", "ExpressionUUID" -> \
"a6d798b2-5fe0-4cd0-953e-8cd9dc2e7f56",
 CellTags->"DataSources"],
Cell[CellGroupData[{
Cell[1117884, 23364, 276, 4, 83, "TemplateSubsection", "ExpressionUUID" -> \
"30fe9b7e-d0c3-452b-b264-dd34cb982cef",
 CellTags->"FutureDirections"],
Cell[1118163, 23370, 365, 9, 103, "Text", "ExpressionUUID" -> \
"ff3e8539-84b7-4eed-aa18-66436326f47f"]
}, Open  ]],
Cell[1118543, 23382, 313, 5, 102, "TemplateSubsection", "ExpressionUUID" -> \
"ee401cf0-80f0-4d29-b17c-5e4b3a0fc60f",
 CellTags->"References"],
Cell[CellGroupData[{
Cell[1118881, 23391, 182, 2, 83, "TemplateSubsection", "ExpressionUUID" -> \
"5e961b4c-560d-45fc-90e2-f4996d9a9a86",
 CellTags->"Keywords"],
Cell[1119066, 23395, 230, 4, 46, "TemplateComment", "ExpressionUUID" -> \
"135b4465-c28d-4994-a153-0bc6d9341a53"],
Cell[CellGroupData[{
Cell[1119321, 23403, 260, 4, 42, "Item", "ExpressionUUID" -> \
"19f866f7-d585-48a5-8147-665763bbeda2"],
Cell[1119584, 23409, 209, 4, 42, "Item", "ExpressionUUID" -> \
"792f628f-9441-4ddd-b19b-b00fbacf053a"],
Cell[1119796, 23415, 205, 4, 42, "Item", "ExpressionUUID" -> \
"26328f12-a60b-4a54-964c-c4de1838f863"],
Cell[1120004, 23421, 217, 4, 42, "Item", "ExpressionUUID" -> \
"ea736303-35db-4dcc-9d3d-43479b837e5a"]
}, Open  ]]
}, Open  ]],
Cell[1120248, 23429, 160, 3, 102, "TemplateSubsection", "ExpressionUUID" -> \
"96f041f3-61e0-4b41-8e0c-ec8f9391494b"],
Cell[CellGroupData[{
Cell[1120433, 23436, 162, 3, 83, "TemplateSubsection", "ExpressionUUID" -> \
"e94efef3-64c2-4661-861e-c788db136e80"],
Cell[1120598, 23441, 230, 7, 44, "LastModified", "ExpressionUUID" -> \
"1ccf0723-deb1-4503-82a8-8f25c3a2d0a7",
 CellTags->"LastModifiedDate"],
Cell[1120831, 23450, 917, 24, 61, "Input", "ExpressionUUID" -> \
"25f3ac13-14b5-4d50-b445-822650381c44"]
}, Open  ]]
}, Open  ]]
}
]
*)

